
tp_pcse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005890  08005890  00006890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae0  08005ae0  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae8  08005ae8  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005af0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000707c  2**0
                  CONTENTS
 10 .bss          00000364  2000007c  2000007c  0000707c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  0000707c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d413  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002624  00000000  00000000  000144bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  00016ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008dd  00000000  00000000  00017680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e06  00000000  00000000  00017f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010eb7  00000000  00000000  0003cd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5729  00000000  00000000  0004dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123343  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d4  00000000  00000000  00123388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012665c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005878 	.word	0x08005878

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08005878 	.word	0x08005878

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002be:	f000 b9d3 	b.w	8000668 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000354:	f000 b988 	b.w	8000668 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	468e      	mov	lr, r1
 8000378:	4604      	mov	r4, r0
 800037a:	4688      	mov	r8, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4617      	mov	r7, r2
 8000384:	d962      	bls.n	800044c <__udivmoddi4+0xdc>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	b14e      	cbz	r6, 80003a0 <__udivmoddi4+0x30>
 800038c:	f1c6 0320 	rsb	r3, r6, #32
 8000390:	fa01 f806 	lsl.w	r8, r1, r6
 8000394:	fa20 f303 	lsr.w	r3, r0, r3
 8000398:	40b7      	lsls	r7, r6
 800039a:	ea43 0808 	orr.w	r8, r3, r8
 800039e:	40b4      	lsls	r4, r6
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ac:	0c23      	lsrs	r3, r4, #16
 80003ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80003b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003b6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80003c4:	f080 80ea 	bcs.w	800059c <__udivmoddi4+0x22c>
 80003c8:	429a      	cmp	r2, r3
 80003ca:	f240 80e7 	bls.w	800059c <__udivmoddi4+0x22c>
 80003ce:	3902      	subs	r1, #2
 80003d0:	443b      	add	r3, r7
 80003d2:	1a9a      	subs	r2, r3, r2
 80003d4:	b2a3      	uxth	r3, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003e6:	459c      	cmp	ip, r3
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x8e>
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	f080 80d6 	bcs.w	80005a0 <__udivmoddi4+0x230>
 80003f4:	459c      	cmp	ip, r3
 80003f6:	f240 80d3 	bls.w	80005a0 <__udivmoddi4+0x230>
 80003fa:	443b      	add	r3, r7
 80003fc:	3802      	subs	r0, #2
 80003fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000402:	eba3 030c 	sub.w	r3, r3, ip
 8000406:	2100      	movs	r1, #0
 8000408:	b11d      	cbz	r5, 8000412 <__udivmoddi4+0xa2>
 800040a:	40f3      	lsrs	r3, r6
 800040c:	2200      	movs	r2, #0
 800040e:	e9c5 3200 	strd	r3, r2, [r5]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d905      	bls.n	8000426 <__udivmoddi4+0xb6>
 800041a:	b10d      	cbz	r5, 8000420 <__udivmoddi4+0xb0>
 800041c:	e9c5 0100 	strd	r0, r1, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	4608      	mov	r0, r1
 8000424:	e7f5      	b.n	8000412 <__udivmoddi4+0xa2>
 8000426:	fab3 f183 	clz	r1, r3
 800042a:	2900      	cmp	r1, #0
 800042c:	d146      	bne.n	80004bc <__udivmoddi4+0x14c>
 800042e:	4573      	cmp	r3, lr
 8000430:	d302      	bcc.n	8000438 <__udivmoddi4+0xc8>
 8000432:	4282      	cmp	r2, r0
 8000434:	f200 8105 	bhi.w	8000642 <__udivmoddi4+0x2d2>
 8000438:	1a84      	subs	r4, r0, r2
 800043a:	eb6e 0203 	sbc.w	r2, lr, r3
 800043e:	2001      	movs	r0, #1
 8000440:	4690      	mov	r8, r2
 8000442:	2d00      	cmp	r5, #0
 8000444:	d0e5      	beq.n	8000412 <__udivmoddi4+0xa2>
 8000446:	e9c5 4800 	strd	r4, r8, [r5]
 800044a:	e7e2      	b.n	8000412 <__udivmoddi4+0xa2>
 800044c:	2a00      	cmp	r2, #0
 800044e:	f000 8090 	beq.w	8000572 <__udivmoddi4+0x202>
 8000452:	fab2 f682 	clz	r6, r2
 8000456:	2e00      	cmp	r6, #0
 8000458:	f040 80a4 	bne.w	80005a4 <__udivmoddi4+0x234>
 800045c:	1a8a      	subs	r2, r1, r2
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	b280      	uxth	r0, r0
 8000466:	b2bc      	uxth	r4, r7
 8000468:	2101      	movs	r1, #1
 800046a:	fbb2 fcfe 	udiv	ip, r2, lr
 800046e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000476:	fb04 f20c 	mul.w	r2, r4, ip
 800047a:	429a      	cmp	r2, r3
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x11e>
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x11c>
 8000486:	429a      	cmp	r2, r3
 8000488:	f200 80e0 	bhi.w	800064c <__udivmoddi4+0x2dc>
 800048c:	46c4      	mov	ip, r8
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	fbb3 f2fe 	udiv	r2, r3, lr
 8000494:	fb0e 3312 	mls	r3, lr, r2, r3
 8000498:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800049c:	fb02 f404 	mul.w	r4, r2, r4
 80004a0:	429c      	cmp	r4, r3
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x144>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x142>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f200 80ca 	bhi.w	8000646 <__udivmoddi4+0x2d6>
 80004b2:	4602      	mov	r2, r0
 80004b4:	1b1b      	subs	r3, r3, r4
 80004b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ba:	e7a5      	b.n	8000408 <__udivmoddi4+0x98>
 80004bc:	f1c1 0620 	rsb	r6, r1, #32
 80004c0:	408b      	lsls	r3, r1
 80004c2:	fa22 f706 	lsr.w	r7, r2, r6
 80004c6:	431f      	orrs	r7, r3
 80004c8:	fa0e f401 	lsl.w	r4, lr, r1
 80004cc:	fa20 f306 	lsr.w	r3, r0, r6
 80004d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004d8:	4323      	orrs	r3, r4
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	fa1f fc87 	uxth.w	ip, r7
 80004e2:	fbbe f0f9 	udiv	r0, lr, r9
 80004e6:	0c1c      	lsrs	r4, r3, #16
 80004e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	fa02 f201 	lsl.w	r2, r2, r1
 80004fa:	d909      	bls.n	8000510 <__udivmoddi4+0x1a0>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000502:	f080 809c 	bcs.w	800063e <__udivmoddi4+0x2ce>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f240 8099 	bls.w	800063e <__udivmoddi4+0x2ce>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	eba4 040e 	sub.w	r4, r4, lr
 8000514:	fa1f fe83 	uxth.w	lr, r3
 8000518:	fbb4 f3f9 	udiv	r3, r4, r9
 800051c:	fb09 4413 	mls	r4, r9, r3, r4
 8000520:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000524:	fb03 fc0c 	mul.w	ip, r3, ip
 8000528:	45a4      	cmp	ip, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x1ce>
 800052c:	193c      	adds	r4, r7, r4
 800052e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000532:	f080 8082 	bcs.w	800063a <__udivmoddi4+0x2ca>
 8000536:	45a4      	cmp	ip, r4
 8000538:	d97f      	bls.n	800063a <__udivmoddi4+0x2ca>
 800053a:	3b02      	subs	r3, #2
 800053c:	443c      	add	r4, r7
 800053e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000542:	eba4 040c 	sub.w	r4, r4, ip
 8000546:	fba0 ec02 	umull	lr, ip, r0, r2
 800054a:	4564      	cmp	r4, ip
 800054c:	4673      	mov	r3, lr
 800054e:	46e1      	mov	r9, ip
 8000550:	d362      	bcc.n	8000618 <__udivmoddi4+0x2a8>
 8000552:	d05f      	beq.n	8000614 <__udivmoddi4+0x2a4>
 8000554:	b15d      	cbz	r5, 800056e <__udivmoddi4+0x1fe>
 8000556:	ebb8 0203 	subs.w	r2, r8, r3
 800055a:	eb64 0409 	sbc.w	r4, r4, r9
 800055e:	fa04 f606 	lsl.w	r6, r4, r6
 8000562:	fa22 f301 	lsr.w	r3, r2, r1
 8000566:	431e      	orrs	r6, r3
 8000568:	40cc      	lsrs	r4, r1
 800056a:	e9c5 6400 	strd	r6, r4, [r5]
 800056e:	2100      	movs	r1, #0
 8000570:	e74f      	b.n	8000412 <__udivmoddi4+0xa2>
 8000572:	fbb1 fcf2 	udiv	ip, r1, r2
 8000576:	0c01      	lsrs	r1, r0, #16
 8000578:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800057c:	b280      	uxth	r0, r0
 800057e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000582:	463b      	mov	r3, r7
 8000584:	4638      	mov	r0, r7
 8000586:	463c      	mov	r4, r7
 8000588:	46b8      	mov	r8, r7
 800058a:	46be      	mov	lr, r7
 800058c:	2620      	movs	r6, #32
 800058e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000592:	eba2 0208 	sub.w	r2, r2, r8
 8000596:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800059a:	e766      	b.n	800046a <__udivmoddi4+0xfa>
 800059c:	4601      	mov	r1, r0
 800059e:	e718      	b.n	80003d2 <__udivmoddi4+0x62>
 80005a0:	4610      	mov	r0, r2
 80005a2:	e72c      	b.n	80003fe <__udivmoddi4+0x8e>
 80005a4:	f1c6 0220 	rsb	r2, r6, #32
 80005a8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	40b1      	lsls	r1, r6
 80005b0:	fa20 f202 	lsr.w	r2, r0, r2
 80005b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005b8:	430a      	orrs	r2, r1
 80005ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80005be:	b2bc      	uxth	r4, r7
 80005c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ca:	fb08 f904 	mul.w	r9, r8, r4
 80005ce:	40b0      	lsls	r0, r6
 80005d0:	4589      	cmp	r9, r1
 80005d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005d6:	b280      	uxth	r0, r0
 80005d8:	d93e      	bls.n	8000658 <__udivmoddi4+0x2e8>
 80005da:	1879      	adds	r1, r7, r1
 80005dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005e0:	d201      	bcs.n	80005e6 <__udivmoddi4+0x276>
 80005e2:	4589      	cmp	r9, r1
 80005e4:	d81f      	bhi.n	8000626 <__udivmoddi4+0x2b6>
 80005e6:	eba1 0109 	sub.w	r1, r1, r9
 80005ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ee:	fb09 f804 	mul.w	r8, r9, r4
 80005f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005f6:	b292      	uxth	r2, r2
 80005f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005fc:	4542      	cmp	r2, r8
 80005fe:	d229      	bcs.n	8000654 <__udivmoddi4+0x2e4>
 8000600:	18ba      	adds	r2, r7, r2
 8000602:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000606:	d2c4      	bcs.n	8000592 <__udivmoddi4+0x222>
 8000608:	4542      	cmp	r2, r8
 800060a:	d2c2      	bcs.n	8000592 <__udivmoddi4+0x222>
 800060c:	f1a9 0102 	sub.w	r1, r9, #2
 8000610:	443a      	add	r2, r7
 8000612:	e7be      	b.n	8000592 <__udivmoddi4+0x222>
 8000614:	45f0      	cmp	r8, lr
 8000616:	d29d      	bcs.n	8000554 <__udivmoddi4+0x1e4>
 8000618:	ebbe 0302 	subs.w	r3, lr, r2
 800061c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000620:	3801      	subs	r0, #1
 8000622:	46e1      	mov	r9, ip
 8000624:	e796      	b.n	8000554 <__udivmoddi4+0x1e4>
 8000626:	eba7 0909 	sub.w	r9, r7, r9
 800062a:	4449      	add	r1, r9
 800062c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000630:	fbb1 f9fe 	udiv	r9, r1, lr
 8000634:	fb09 f804 	mul.w	r8, r9, r4
 8000638:	e7db      	b.n	80005f2 <__udivmoddi4+0x282>
 800063a:	4673      	mov	r3, lr
 800063c:	e77f      	b.n	800053e <__udivmoddi4+0x1ce>
 800063e:	4650      	mov	r0, sl
 8000640:	e766      	b.n	8000510 <__udivmoddi4+0x1a0>
 8000642:	4608      	mov	r0, r1
 8000644:	e6fd      	b.n	8000442 <__udivmoddi4+0xd2>
 8000646:	443b      	add	r3, r7
 8000648:	3a02      	subs	r2, #2
 800064a:	e733      	b.n	80004b4 <__udivmoddi4+0x144>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e71c      	b.n	800048e <__udivmoddi4+0x11e>
 8000654:	4649      	mov	r1, r9
 8000656:	e79c      	b.n	8000592 <__udivmoddi4+0x222>
 8000658:	eba1 0109 	sub.w	r1, r1, r9
 800065c:	46c4      	mov	ip, r8
 800065e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000662:	fb09 f804 	mul.w	r8, r9, r4
 8000666:	e7c4      	b.n	80005f2 <__udivmoddi4+0x282>

08000668 <__aeabi_idiv0>:
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f001 ffda 	bl	8002628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f812 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f8e4 	bl	8000844 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067c:	f000 f8b8 	bl	80007f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000680:	f000 f876 	bl	8000770 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_Init();
 8000684:	f001 fad2 	bl	8001c2c <I2C_Init>
  // LCD_Init();
  // BME280_Init();
  // Encoder_Init();
  Menu_Init();
 8000688:	f001 fd26 	bl	80020d8 <Menu_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_Update();
 800068c:	f001 fd48 	bl	8002120 <Menu_Update>
	  HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	@ 0x32
 8000692:	f002 f83b 	bl	800270c <HAL_Delay>
	  Menu_Update();
 8000696:	bf00      	nop
 8000698:	e7f8      	b.n	800068c <main+0x20>
	...

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fc66 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fb51 	bl	8003dc8 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f99a 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2105      	movs	r1, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fdb2 	bl	80042b8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 f983 	bl	8000a64 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007ae:	f002 fa95 	bl	8002cdc <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f954 	bl	8000a64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007c0:	f003 fa86 	bl	8003cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007ca:	f000 f94b 	bl	8000a64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007d2:	f003 fab9 	bl	8003d48 <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f942 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000098 	.word	0x20000098
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART3_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART3_UART_Init+0x4c>)
 8000828:	f003 ff66 	bl	80046f8 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f917 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000ec 	.word	0x200000ec
 8000840:	40004800 	.word	0x40004800

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	@ 0x30
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a7b      	ldr	r2, [pc, #492]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b79      	ldr	r3, [pc, #484]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	4b75      	ldr	r3, [pc, #468]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a74      	ldr	r2, [pc, #464]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b72      	ldr	r3, [pc, #456]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b6e      	ldr	r3, [pc, #440]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a6d      	ldr	r2, [pc, #436]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b6b      	ldr	r3, [pc, #428]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b67      	ldr	r3, [pc, #412]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a66      	ldr	r2, [pc, #408]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b64      	ldr	r3, [pc, #400]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b60      	ldr	r3, [pc, #384]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a5f      	ldr	r2, [pc, #380]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b5d      	ldr	r3, [pc, #372]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b59      	ldr	r3, [pc, #356]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a58      	ldr	r2, [pc, #352]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b56      	ldr	r3, [pc, #344]	@ (8000a50 <MX_GPIO_Init+0x20c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000908:	4852      	ldr	r0, [pc, #328]	@ (8000a54 <MX_GPIO_Init+0x210>)
 800090a:	f002 f9cd 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2140      	movs	r1, #64	@ 0x40
 8000912:	4851      	ldr	r0, [pc, #324]	@ (8000a58 <MX_GPIO_Init+0x214>)
 8000914:	f002 f9c8 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	484b      	ldr	r0, [pc, #300]	@ (8000a5c <MX_GPIO_Init+0x218>)
 8000930:	f001 fff6 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000934:	2332      	movs	r3, #50	@ 0x32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000944:	230b      	movs	r3, #11
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4843      	ldr	r0, [pc, #268]	@ (8000a5c <MX_GPIO_Init+0x218>)
 8000950:	f001 ffe6 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000954:	2386      	movs	r3, #134	@ 0x86
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000964:	230b      	movs	r3, #11
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	483c      	ldr	r0, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x21c>)
 8000970:	f001 ffd6 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000974:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4831      	ldr	r0, [pc, #196]	@ (8000a54 <MX_GPIO_Init+0x210>)
 800098e:	f001 ffc7 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a4:	230b      	movs	r3, #11
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <MX_GPIO_Init+0x210>)
 80009b0:	f001 ffb6 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b4:	2340      	movs	r3, #64	@ 0x40
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4823      	ldr	r0, [pc, #140]	@ (8000a58 <MX_GPIO_Init+0x214>)
 80009cc:	f001 ffa8 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481d      	ldr	r0, [pc, #116]	@ (8000a58 <MX_GPIO_Init+0x214>)
 80009e4:	f001 ff9c 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009e8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fa:	230a      	movs	r3, #10
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4816      	ldr	r0, [pc, #88]	@ (8000a60 <MX_GPIO_Init+0x21c>)
 8000a06:	f001 ff8b 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <MX_GPIO_Init+0x21c>)
 8000a20:	f001 ff7e 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a24:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a36:	230b      	movs	r3, #11
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_GPIO_Init+0x214>)
 8000a42:	f001 ff6d 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	@ 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40021800 	.word	0x40021800
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020000 	.word	0x40020000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	@ (8000b44 <HAL_I2C_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12c      	bne.n	8000b3c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_I2C_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <HAL_I2C_MspInit+0x88>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_I2C_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000afe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b10:	2304      	movs	r3, #4
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <HAL_I2C_MspInit+0x8c>)
 8000b1c:	f001 ff00 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc8:	f001 feaa 	bl	8002920 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40004800 	.word	0x40004800
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020c00 	.word	0x40020c00

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f001 fd49 	bl	80026cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 f98c 	bl	8004f8c <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20030000 	.word	0x20030000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000134 	.word	0x20000134
 8000ca8:	200003e0 	.word	0x200003e0

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f004 f94b 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fcb3 	bl	800066c <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d14:	08005af0 	.word	0x08005af0
  ldr r2, =_sbss
 8000d18:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d1c:	200003e0 	.word	0x200003e0

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <BME280_Init>:
static uint32_t compensate_hum (int32_t adc_H);


/* ====================================================== */
BME280_Status_t BME280_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
    if (I2C_isInit() != I2C_OK && I2C_Init() != I2C_OK)
 8000d2a:	f000 fffb 	bl	8001d24 <I2C_isInit>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <BME280_Init+0x1e>
 8000d34:	f000 ff7a 	bl	8001c2c <I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <BME280_Init+0x1e>
        return BME280_I2C_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e055      	b.n	8000dee <BME280_Init+0xca>

    uint8_t chip_id;
    device_addr_ = BME280_I2C_ADDRESS;
 8000d42:	4b2d      	ldr	r3, [pc, #180]	@ (8000df8 <BME280_Init+0xd4>)
 8000d44:	22ec      	movs	r2, #236	@ 0xec
 8000d46:	701a      	strb	r2, [r3, #0]
    if (BME280_read_buf(BME280_REG_CHIP_ID, &chip_id, 1) != BME280_OK || chip_id != CHIP_ID)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	20d0      	movs	r0, #208	@ 0xd0
 8000d50:	f000 f8bf 	bl	8000ed2 <BME280_read_buf>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <BME280_Init+0x3c>
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b60      	cmp	r3, #96	@ 0x60
 8000d5e:	d010      	beq.n	8000d82 <BME280_Init+0x5e>
    {
        device_addr_ = BME280_I2C_ADDRESS_SEC;
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <BME280_Init+0xd4>)
 8000d62:	22ee      	movs	r2, #238	@ 0xee
 8000d64:	701a      	strb	r2, [r3, #0]
        if (BME280_read_buf(BME280_REG_CHIP_ID, &chip_id, 1) != BME280_OK || chip_id != CHIP_ID)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	20d0      	movs	r0, #208	@ 0xd0
 8000d6e:	f000 f8b0 	bl	8000ed2 <BME280_read_buf>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <BME280_Init+0x5a>
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b60      	cmp	r3, #96	@ 0x60
 8000d7c:	d001      	beq.n	8000d82 <BME280_Init+0x5e>
        {
            return BME280_BAD_DEVICE;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e035      	b.n	8000dee <BME280_Init+0xca>
        }
    }

    if (BME280_write_reg(BME280_REG_RESET, SOFT_RESET_CMD) != BME280_OK)
 8000d82:	21b6      	movs	r1, #182	@ 0xb6
 8000d84:	20e0      	movs	r0, #224	@ 0xe0
 8000d86:	f000 f887 	bl	8000e98 <BME280_write_reg>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <BME280_Init+0x70>
    {
        return BME280_I2C_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e02c      	b.n	8000dee <BME280_Init+0xca>
    }

    uint8_t st;
    do {
        if (BME280_read_buf(BME280_REG_STATUS, &st, 1) != BME280_OK)
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	20f3      	movs	r0, #243	@ 0xf3
 8000d9c:	f000 f899 	bl	8000ed2 <BME280_read_buf>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <BME280_Init+0x86>
        {
            return BME280_I2C_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e021      	b.n	8000dee <BME280_Init+0xca>
        }

    } while (st & 0x01);
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ef      	bne.n	8000d94 <BME280_Init+0x70>

    if (BME280_get_calib_data() != BME280_OK)
 8000db4:	f000 f8b0 	bl	8000f18 <BME280_get_calib_data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <BME280_Init+0x9e>
        return BME280_I2C_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e015      	b.n	8000dee <BME280_Init+0xca>

    if (BME280_write_reg(BME280_REG_CTRL_HUM,  OSRS_H) != BME280_OK)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	20f2      	movs	r0, #242	@ 0xf2
 8000dc6:	f000 f867 	bl	8000e98 <BME280_write_reg>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <BME280_Init+0xb0>
    {
        return BME280_I2C_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e00c      	b.n	8000dee <BME280_Init+0xca>
    }

    if (BME280_write_reg(BME280_REG_CTRL_MEAS, (OSRS_T<<5) | (OSRS_P<<2) | MODE_NORMAL) != BME280_OK)
 8000dd4:	2127      	movs	r1, #39	@ 0x27
 8000dd6:	20f4      	movs	r0, #244	@ 0xf4
 8000dd8:	f000 f85e 	bl	8000e98 <BME280_write_reg>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <BME280_Init+0xc2>
    {
        return BME280_I2C_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e003      	b.n	8000dee <BME280_Init+0xca>
    }

    is_init_ = true;
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <BME280_Init+0xd8>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
    return BME280_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000138 	.word	0x20000138
 8000dfc:	20000139 	.word	0x20000139

08000e00 <BME280_ReadData>:

BME280_Status_t BME280_ReadData(BME280_Data_t *out)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    if (!is_init_) return BME280_NOT_INIT;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <BME280_ReadData+0x94>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f083 0301 	eor.w	r3, r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <BME280_ReadData+0x1a>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e037      	b.n	8000e8a <BME280_ReadData+0x8a>

    uint8_t raw[BME280_LEN_P_T_H_DATA];

    if (BME280_read_buf(BME280_REG_DATA, raw, BME280_LEN_P_T_H_DATA) != BME280_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	20f7      	movs	r0, #247	@ 0xf7
 8000e24:	f000 f855 	bl	8000ed2 <BME280_read_buf>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <BME280_ReadData+0x32>
    {
        return BME280_I2C_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e02b      	b.n	8000e8a <BME280_ReadData+0x8a>
    }

    int32_t adc_P = (raw[0]<<12) | (raw[1]<<4) | (raw[2]>>4);
 8000e32:	7b3b      	ldrb	r3, [r7, #12]
 8000e34:	031a      	lsls	r2, r3, #12
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	7bba      	ldrb	r2, [r7, #14]
 8000e3e:	0912      	lsrs	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61fb      	str	r3, [r7, #28]
    int32_t adc_T = (raw[3]<<12) | (raw[4]<<4) | (raw[5]>>4);
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	031a      	lsls	r2, r3, #12
 8000e4a:	7c3b      	ldrb	r3, [r7, #16]
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	7c7a      	ldrb	r2, [r7, #17]
 8000e52:	0912      	lsrs	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
    int32_t adc_H = (raw[6]<<8)  |  raw[7];
 8000e5a:	7cbb      	ldrb	r3, [r7, #18]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	7cfa      	ldrb	r2, [r7, #19]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]

    out->temperature_x100 = compensate_temp(adc_T);
 8000e64:	69b8      	ldr	r0, [r7, #24]
 8000e66:	f000 f925 	bl	80010b4 <compensate_temp>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
    out->pressure	      = compensate_press(adc_P);
 8000e70:	69f8      	ldr	r0, [r7, #28]
 8000e72:	f000 f95b 	bl	800112c <compensate_press>
 8000e76:	4602      	mov	r2, r0
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	605a      	str	r2, [r3, #4]
    out->humidity_x1024   = compensate_hum(adc_H);
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f000 fc17 	bl	80016b0 <compensate_hum>
 8000e82:	4602      	mov	r2, r0
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
    
    return BME280_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000139 	.word	0x20000139

08000e98 <BME280_write_reg>:


/* ====================================================== */

static BME280_Status_t BME280_write_reg(uint8_t reg, uint8_t val)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = { reg, val };
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	733b      	strb	r3, [r7, #12]
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	737b      	strb	r3, [r7, #13]
    return (I2C_Send(BME280_I2C_ADDRESS, tx, 2) == I2C_OK) ? BME280_OK : BME280_I2C_ERROR;
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	20ec      	movs	r0, #236	@ 0xec
 8000eba:	f000 fef7 	bl	8001cac <I2C_Send>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <BME280_read_buf>:

static BME280_Status_t BME280_read_buf(uint8_t reg, uint8_t *buf, uint16_t n)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	6039      	str	r1, [r7, #0]
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	80bb      	strh	r3, [r7, #4]
    if (I2C_Send(BME280_I2C_ADDRESS, &reg, 1) != I2C_OK) return BME280_I2C_ERROR;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	20ec      	movs	r0, #236	@ 0xec
 8000eea:	f000 fedf 	bl	8001cac <I2C_Send>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <BME280_read_buf+0x26>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e00b      	b.n	8000f10 <BME280_read_buf+0x3e>
    return (I2C_Receive(BME280_I2C_ADDRESS, buf, n) == I2C_OK) ? BME280_OK : BME280_I2C_ERROR;
 8000ef8:	88bb      	ldrh	r3, [r7, #4]
 8000efa:	461a      	mov	r2, r3
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	20ec      	movs	r0, #236	@ 0xec
 8000f00:	f000 fef2 	bl	8001ce8 <I2C_Receive>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <BME280_get_calib_data>:

static BME280_Status_t BME280_get_calib_data(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af00      	add	r7, sp, #0
    uint8_t tp[BME280_LEN_TEMP_PRESS_CALIB_DATA];
    uint8_t h [BME280_LEN_HUMIDITY_CALIB_DATA];

    if (BME280_read_buf(BME280_REG_TEMP_PRESS_CALIB_DATA, tp, sizeof(tp)) != BME280_OK) return BME280_I2C_ERROR;
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	221a      	movs	r2, #26
 8000f24:	4619      	mov	r1, r3
 8000f26:	2088      	movs	r0, #136	@ 0x88
 8000f28:	f7ff ffd3 	bl	8000ed2 <BME280_read_buf>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <BME280_get_calib_data+0x1e>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e0b8      	b.n	80010a8 <BME280_get_calib_data+0x190>
    if (BME280_read_buf(BME280_REG_HUMIDITY_CALIB_DATA  , h , sizeof(h )) != BME280_OK) return BME280_I2C_ERROR;
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2207      	movs	r2, #7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	20e1      	movs	r0, #225	@ 0xe1
 8000f3e:	f7ff ffc8 	bl	8000ed2 <BME280_read_buf>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <BME280_get_calib_data+0x34>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e0ad      	b.n	80010a8 <BME280_get_calib_data+0x190>

    calib_.dig_t1 = (tp[1]<<8)|tp[0];   calib_.dig_t2 = (tp[3]<<8)|tp[2];   calib_.dig_t3 = (tp[5]<<8)|tp[4];
 8000f4c:	7b7b      	ldrb	r3, [r7, #13]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b54      	ldr	r3, [pc, #336]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b4f      	ldr	r3, [pc, #316]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000f74:	805a      	strh	r2, [r3, #2]
 8000f76:	7c7b      	ldrb	r3, [r7, #17]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7c3b      	ldrb	r3, [r7, #16]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b4a      	ldr	r3, [pc, #296]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000f88:	809a      	strh	r2, [r3, #4]
    calib_.dig_p1 = (tp[7]<<8)|tp[6];   calib_.dig_p2 = (tp[9]<<8)|tp[8];   calib_.dig_p3 = (tp[11]<<8)|tp[10];
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	7cbb      	ldrb	r3, [r7, #18]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b44      	ldr	r3, [pc, #272]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000f9e:	80da      	strh	r2, [r3, #6]
 8000fa0:	7d7b      	ldrb	r3, [r7, #21]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	7d3b      	ldrb	r3, [r7, #20]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000fb2:	811a      	strh	r2, [r3, #8]
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000fc6:	815a      	strh	r2, [r3, #10]
    calib_.dig_p4 = (tp[13]<<8)|tp[12]; calib_.dig_p5 = (tp[15]<<8)|tp[14]; calib_.dig_p6 = (tp[17]<<8)|tp[16];
 8000fc8:	7e7b      	ldrb	r3, [r7, #25]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7e3b      	ldrb	r3, [r7, #24]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000fda:	819a      	strh	r2, [r3, #12]
 8000fdc:	7efb      	ldrb	r3, [r7, #27]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	7ebb      	ldrb	r3, [r7, #26]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8000fee:	81da      	strh	r2, [r3, #14]
 8000ff0:	7f7b      	ldrb	r3, [r7, #29]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	7f3b      	ldrb	r3, [r7, #28]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8001002:	821a      	strh	r2, [r3, #16]
    calib_.dig_p7 = (tp[19]<<8)|tp[18]; calib_.dig_p8 = (tp[21]<<8)|tp[20]; calib_.dig_p9 = (tp[23]<<8)|tp[22];
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	b21b      	sxth	r3, r3
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7fbb      	ldrb	r3, [r7, #30]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8001016:	825a      	strh	r2, [r3, #18]
 8001018:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800101c:	b21b      	sxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <BME280_get_calib_data+0x198>)
 800102e:	829a      	strh	r2, [r3, #20]
 8001030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001034:	b21b      	sxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8001046:	82da      	strh	r2, [r3, #22]

    calib_.dig_h1 = tp[25];
 8001048:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <BME280_get_calib_data+0x198>)
 800104e:	761a      	strb	r2, [r3, #24]
    calib_.dig_h2 = (h[1]<<8)|h[0];
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	b21b      	sxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	793b      	ldrb	r3, [r7, #4]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8001062:	835a      	strh	r2, [r3, #26]
    calib_.dig_h3 = h[2];
 8001064:	79ba      	ldrb	r2, [r7, #6]
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8001068:	771a      	strb	r2, [r3, #28]
    calib_.dig_h4 = (h[3]<<4) | (h[4] & 0x0F);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	b21b      	sxth	r3, r3
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	b21a      	sxth	r2, r3
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	b21b      	sxth	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <BME280_get_calib_data+0x198>)
 8001082:	83da      	strh	r2, [r3, #30]
    calib_.dig_h5 = (h[5]<<4) | (h[4] >> 4);
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	b21b      	sxth	r3, r3
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	b21a      	sxth	r2, r3
 800108c:	7a3b      	ldrb	r3, [r7, #8]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	b2db      	uxtb	r3, r3
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <BME280_get_calib_data+0x198>)
 800109a:	841a      	strh	r2, [r3, #32]
    calib_.dig_h6 = (int8_t)h[6];
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <BME280_get_calib_data+0x198>)
 80010a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return BME280_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3728      	adds	r7, #40	@ 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000013c 	.word	0x2000013c

080010b4 <compensate_temp>:

static int32_t compensate_temp(int32_t adc_T)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    int32_t var1 = ((((adc_T>>3) - ((int32_t)calib_.dig_t1<<1))) * calib_.dig_t2) >> 11;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	10da      	asrs	r2, r3, #3
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <compensate_temp+0x70>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <compensate_temp+0x70>)
 80010ca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	12db      	asrs	r3, r3, #11
 80010d4:	60fb      	str	r3, [r7, #12]
    int32_t var2 = (((((adc_T>>4) - calib_.dig_t1)*((adc_T>>4)-calib_.dig_t1))>>12) * calib_.dig_t3) >> 14;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	111b      	asrs	r3, r3, #4
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <compensate_temp+0x70>)
 80010dc:	8812      	ldrh	r2, [r2, #0]
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	1112      	asrs	r2, r2, #4
 80010e4:	490f      	ldr	r1, [pc, #60]	@ (8001124 <compensate_temp+0x70>)
 80010e6:	8809      	ldrh	r1, [r1, #0]
 80010e8:	1a52      	subs	r2, r2, r1
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	131b      	asrs	r3, r3, #12
 80010f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <compensate_temp+0x70>)
 80010f2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	139b      	asrs	r3, r3, #14
 80010fc:	60bb      	str	r3, [r7, #8]
    t_fine_ = var1 + var2;
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4413      	add	r3, r2
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <compensate_temp+0x74>)
 8001106:	6013      	str	r3, [r2, #0]
    return (t_fine_ * 5 + 128) >> 8;                     /* °C ×100 */
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <compensate_temp+0x74>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3380      	adds	r3, #128	@ 0x80
 8001114:	121b      	asrs	r3, r3, #8
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000013c 	.word	0x2000013c
 8001128:	20000164 	.word	0x20000164

0800112c <compensate_press>:

static uint32_t compensate_press(int32_t adc_P)
{
 800112c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001130:	b0ca      	sub	sp, #296	@ 0x128
 8001132:	af00      	add	r7, sp, #0
 8001134:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    int64_t var1 = (int64_t)t_fine_ - 128000;
 8001138:	4baf      	ldr	r3, [pc, #700]	@ (80013f8 <compensate_press+0x2cc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	17da      	asrs	r2, r3, #31
 800113e:	461c      	mov	r4, r3
 8001140:	4615      	mov	r5, r2
 8001142:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001146:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 800114a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
    int64_t var2 = var1 * var1 * calib_.dig_p6;
 800114e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001152:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001156:	fb03 f102 	mul.w	r1, r3, r2
 800115a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800115e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	18ca      	adds	r2, r1, r3
 8001168:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800116c:	fba3 8903 	umull	r8, r9, r3, r3
 8001170:	eb02 0309 	add.w	r3, r2, r9
 8001174:	4699      	mov	r9, r3
 8001176:	4ba1      	ldr	r3, [pc, #644]	@ (80013fc <compensate_press+0x2d0>)
 8001178:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800117c:	b21b      	sxth	r3, r3
 800117e:	17da      	asrs	r2, r3, #31
 8001180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001184:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001188:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800118c:	4603      	mov	r3, r0
 800118e:	fb03 f209 	mul.w	r2, r3, r9
 8001192:	460b      	mov	r3, r1
 8001194:	fb08 f303 	mul.w	r3, r8, r3
 8001198:	4413      	add	r3, r2
 800119a:	4602      	mov	r2, r0
 800119c:	fba8 1202 	umull	r1, r2, r8, r2
 80011a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80011a4:	460a      	mov	r2, r1
 80011a6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80011aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80011ae:	4413      	add	r3, r2
 80011b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80011b4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80011b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80011bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 += (var1 * calib_.dig_p5) << 17;
 80011c0:	4b8e      	ldr	r3, [pc, #568]	@ (80013fc <compensate_press+0x2d0>)
 80011c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	17da      	asrs	r2, r3, #31
 80011ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80011ce:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80011d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011d6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80011da:	462a      	mov	r2, r5
 80011dc:	fb02 f203 	mul.w	r2, r2, r3
 80011e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80011e4:	4621      	mov	r1, r4
 80011e6:	fb01 f303 	mul.w	r3, r1, r3
 80011ea:	441a      	add	r2, r3
 80011ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011f0:	4621      	mov	r1, r4
 80011f2:	fba3 1301 	umull	r1, r3, r3, r1
 80011f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80011fa:	460b      	mov	r3, r1
 80011fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001216:	462b      	mov	r3, r5
 8001218:	0459      	lsls	r1, r3, #17
 800121a:	4623      	mov	r3, r4
 800121c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001220:	4623      	mov	r3, r4
 8001222:	0458      	lsls	r0, r3, #17
 8001224:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001228:	1814      	adds	r4, r2, r0
 800122a:	643c      	str	r4, [r7, #64]	@ 0x40
 800122c:	414b      	adcs	r3, r1
 800122e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001230:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001234:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 += ((int64_t)calib_.dig_p4) << 35;
 8001238:	4b70      	ldr	r3, [pc, #448]	@ (80013fc <compensate_press+0x2d0>)
 800123a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800123e:	b21b      	sxth	r3, r3
 8001240:	17da      	asrs	r2, r3, #31
 8001242:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001246:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800124a:	f04f 0000 	mov.w	r0, #0
 800124e:	f04f 0100 	mov.w	r1, #0
 8001252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001256:	00d9      	lsls	r1, r3, #3
 8001258:	2000      	movs	r0, #0
 800125a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800125e:	1814      	adds	r4, r2, r0
 8001260:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001262:	414b      	adcs	r3, r1
 8001264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001266:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800126a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * calib_.dig_p3)>>8) + ((var1 * calib_.dig_p2)<<12);
 800126e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001272:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001276:	fb03 f102 	mul.w	r1, r3, r2
 800127a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800127e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	18ca      	adds	r2, r1, r3
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800128c:	fba3 1303 	umull	r1, r3, r3, r3
 8001290:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001294:	460b      	mov	r3, r1
 8001296:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800129a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800129e:	18d3      	adds	r3, r2, r3
 80012a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80012a4:	4b55      	ldr	r3, [pc, #340]	@ (80013fc <compensate_press+0x2d0>)
 80012a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	17da      	asrs	r2, r3, #31
 80012ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80012b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80012b6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80012ba:	462b      	mov	r3, r5
 80012bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80012c0:	4642      	mov	r2, r8
 80012c2:	fb02 f203 	mul.w	r2, r2, r3
 80012c6:	464b      	mov	r3, r9
 80012c8:	4621      	mov	r1, r4
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	4622      	mov	r2, r4
 80012d2:	4641      	mov	r1, r8
 80012d4:	fba2 1201 	umull	r1, r2, r2, r1
 80012d8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80012dc:	460a      	mov	r2, r1
 80012de:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80012e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80012e6:	4413      	add	r3, r2
 80012e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80012ec:	f04f 0000 	mov.w	r0, #0
 80012f0:	f04f 0100 	mov.w	r1, #0
 80012f4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80012f8:	4623      	mov	r3, r4
 80012fa:	0a18      	lsrs	r0, r3, #8
 80012fc:	462b      	mov	r3, r5
 80012fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001302:	462b      	mov	r3, r5
 8001304:	1219      	asrs	r1, r3, #8
 8001306:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <compensate_press+0x2d0>)
 8001308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800130c:	b21b      	sxth	r3, r3
 800130e:	17da      	asrs	r2, r3, #31
 8001310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001314:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001318:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800131c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001320:	464a      	mov	r2, r9
 8001322:	fb02 f203 	mul.w	r2, r2, r3
 8001326:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800132a:	4644      	mov	r4, r8
 800132c:	fb04 f303 	mul.w	r3, r4, r3
 8001330:	441a      	add	r2, r3
 8001332:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001336:	4644      	mov	r4, r8
 8001338:	fba3 4304 	umull	r4, r3, r3, r4
 800133c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001340:	4623      	mov	r3, r4
 8001342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800134a:	18d3      	adds	r3, r2, r3
 800134c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800135c:	464c      	mov	r4, r9
 800135e:	0323      	lsls	r3, r4, #12
 8001360:	4644      	mov	r4, r8
 8001362:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001366:	4644      	mov	r4, r8
 8001368:	0322      	lsls	r2, r4, #12
 800136a:	1884      	adds	r4, r0, r2
 800136c:	633c      	str	r4, [r7, #48]	@ 0x30
 800136e:	eb41 0303 	adc.w	r3, r1, r3
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
 8001374:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001378:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1)<<47)+var1) * calib_.dig_p1) >> 33;
 800137c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001380:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001384:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001388:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <compensate_press+0x2d0>)
 800138e:	88db      	ldrh	r3, [r3, #6]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2200      	movs	r2, #0
 8001394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001398:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800139c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013a0:	462b      	mov	r3, r5
 80013a2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80013a6:	4642      	mov	r2, r8
 80013a8:	fb02 f203 	mul.w	r2, r2, r3
 80013ac:	464b      	mov	r3, r9
 80013ae:	4621      	mov	r1, r4
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	4622      	mov	r2, r4
 80013b8:	4641      	mov	r1, r8
 80013ba:	fba2 1201 	umull	r1, r2, r2, r1
 80013be:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80013c2:	460a      	mov	r2, r1
 80013c4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80013c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80013cc:	4413      	add	r3, r2
 80013ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80013de:	4629      	mov	r1, r5
 80013e0:	104a      	asrs	r2, r1, #1
 80013e2:	4629      	mov	r1, r5
 80013e4:	17cb      	asrs	r3, r1, #31
 80013e6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    if (var1 == 0) return 0;
 80013ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80013ee:	4313      	orrs	r3, r2
 80013f0:	d106      	bne.n	8001400 <compensate_press+0x2d4>
 80013f2:	2300      	movs	r3, #0
 80013f4:	e153      	b.n	800169e <compensate_press+0x572>
 80013f6:	bf00      	nop
 80013f8:	20000164 	.word	0x20000164
 80013fc:	2000013c 	.word	0x2000013c
    int64_t p = 1048576 - adc_P;
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001404:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001408:	17da      	asrs	r2, r3, #31
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800140c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800140e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001412:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p<<31) - var2)*3125) / var1;
 8001416:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800141a:	105b      	asrs	r3, r3, #1
 800141c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001420:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001424:	07db      	lsls	r3, r3, #31
 8001426:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800142a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800142e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001432:	4621      	mov	r1, r4
 8001434:	1a89      	subs	r1, r1, r2
 8001436:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001438:	4629      	mov	r1, r5
 800143a:	eb61 0303 	sbc.w	r3, r1, r3
 800143e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001440:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001444:	4622      	mov	r2, r4
 8001446:	462b      	mov	r3, r5
 8001448:	1891      	adds	r1, r2, r2
 800144a:	6239      	str	r1, [r7, #32]
 800144c:	415b      	adcs	r3, r3
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001450:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001454:	4621      	mov	r1, r4
 8001456:	1851      	adds	r1, r2, r1
 8001458:	61b9      	str	r1, [r7, #24]
 800145a:	4629      	mov	r1, r5
 800145c:	414b      	adcs	r3, r1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800146c:	4649      	mov	r1, r9
 800146e:	018b      	lsls	r3, r1, #6
 8001470:	4641      	mov	r1, r8
 8001472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001476:	4641      	mov	r1, r8
 8001478:	018a      	lsls	r2, r1, #6
 800147a:	4641      	mov	r1, r8
 800147c:	1889      	adds	r1, r1, r2
 800147e:	6139      	str	r1, [r7, #16]
 8001480:	4649      	mov	r1, r9
 8001482:	eb43 0101 	adc.w	r1, r3, r1
 8001486:	6179      	str	r1, [r7, #20]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001494:	4649      	mov	r1, r9
 8001496:	008b      	lsls	r3, r1, #2
 8001498:	4641      	mov	r1, r8
 800149a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800149e:	4641      	mov	r1, r8
 80014a0:	008a      	lsls	r2, r1, #2
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	4622      	mov	r2, r4
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	460b      	mov	r3, r1
 80014b0:	462a      	mov	r2, r5
 80014b2:	eb42 0303 	adc.w	r3, r2, r3
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80014c4:	4649      	mov	r1, r9
 80014c6:	008b      	lsls	r3, r1, #2
 80014c8:	4641      	mov	r1, r8
 80014ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014ce:	4641      	mov	r1, r8
 80014d0:	008a      	lsls	r2, r1, #2
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	4622      	mov	r2, r4
 80014da:	189b      	adds	r3, r3, r2
 80014dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80014de:	462b      	mov	r3, r5
 80014e0:	460a      	mov	r2, r1
 80014e2:	eb42 0303 	adc.w	r3, r2, r3
 80014e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80014e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80014f0:	f7fe fed6 	bl	80002a0 <__aeabi_ldivmod>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = ((int64_t)calib_.dig_p9 * (p>>13) * (p>>13)) >> 25;
 80014fc:	4b6b      	ldr	r3, [pc, #428]	@ (80016ac <compensate_press+0x580>)
 80014fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001502:	b21b      	sxth	r3, r3
 8001504:	17da      	asrs	r2, r3, #31
 8001506:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001508:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800150a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	0b50      	lsrs	r0, r2, #13
 8001518:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800151c:	1359      	asrs	r1, r3, #13
 800151e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001522:	462b      	mov	r3, r5
 8001524:	fb00 f203 	mul.w	r2, r0, r3
 8001528:	4623      	mov	r3, r4
 800152a:	fb03 f301 	mul.w	r3, r3, r1
 800152e:	4413      	add	r3, r2
 8001530:	4622      	mov	r2, r4
 8001532:	fba2 1200 	umull	r1, r2, r2, r0
 8001536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800153a:	460a      	mov	r2, r1
 800153c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001540:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001544:	4413      	add	r3, r2
 8001546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800154a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	0b50      	lsrs	r0, r2, #13
 8001558:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800155c:	1359      	asrs	r1, r3, #13
 800155e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001562:	462b      	mov	r3, r5
 8001564:	fb00 f203 	mul.w	r2, r0, r3
 8001568:	4623      	mov	r3, r4
 800156a:	fb03 f301 	mul.w	r3, r3, r1
 800156e:	4413      	add	r3, r2
 8001570:	4622      	mov	r2, r4
 8001572:	fba2 1200 	umull	r1, r2, r2, r0
 8001576:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800157a:	460a      	mov	r2, r1
 800157c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001580:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001584:	4413      	add	r3, r2
 8001586:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001596:	4621      	mov	r1, r4
 8001598:	0e4a      	lsrs	r2, r1, #25
 800159a:	4629      	mov	r1, r5
 800159c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80015a0:	4629      	mov	r1, r5
 80015a2:	164b      	asrs	r3, r1, #25
 80015a4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = ((int64_t)calib_.dig_p8 * p) >> 19;
 80015a8:	4b40      	ldr	r3, [pc, #256]	@ (80016ac <compensate_press+0x580>)
 80015aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	17da      	asrs	r2, r3, #31
 80015b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80015b4:	667a      	str	r2, [r7, #100]	@ 0x64
 80015b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015be:	462a      	mov	r2, r5
 80015c0:	fb02 f203 	mul.w	r2, r2, r3
 80015c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015c8:	4621      	mov	r1, r4
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80015d4:	4621      	mov	r1, r4
 80015d6:	fba2 1201 	umull	r1, r2, r2, r1
 80015da:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80015de:	460a      	mov	r2, r1
 80015e0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80015e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80015e8:	4413      	add	r3, r2
 80015ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80015fa:	4621      	mov	r1, r4
 80015fc:	0cca      	lsrs	r2, r1, #19
 80015fe:	4629      	mov	r1, r5
 8001600:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001604:	4629      	mov	r1, r5
 8001606:	14cb      	asrs	r3, r1, #19
 8001608:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    p = ((p + var1 + var2) >> 8) + ((int64_t)calib_.dig_p7 << 4);
 800160c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001610:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001614:	1884      	adds	r4, r0, r2
 8001616:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001618:	eb41 0303 	adc.w	r3, r1, r3
 800161c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800161e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001622:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001626:	4621      	mov	r1, r4
 8001628:	1889      	adds	r1, r1, r2
 800162a:	6539      	str	r1, [r7, #80]	@ 0x50
 800162c:	4629      	mov	r1, r5
 800162e:	eb43 0101 	adc.w	r1, r3, r1
 8001632:	6579      	str	r1, [r7, #84]	@ 0x54
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001640:	4623      	mov	r3, r4
 8001642:	0a18      	lsrs	r0, r3, #8
 8001644:	462b      	mov	r3, r5
 8001646:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800164a:	462b      	mov	r3, r5
 800164c:	1219      	asrs	r1, r3, #8
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <compensate_press+0x580>)
 8001650:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001654:	b21b      	sxth	r3, r3
 8001656:	17da      	asrs	r2, r3, #31
 8001658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800165a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001668:	464c      	mov	r4, r9
 800166a:	0123      	lsls	r3, r4, #4
 800166c:	4644      	mov	r4, r8
 800166e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001672:	4644      	mov	r4, r8
 8001674:	0122      	lsls	r2, r4, #4
 8001676:	1884      	adds	r4, r0, r2
 8001678:	603c      	str	r4, [r7, #0]
 800167a:	eb41 0303 	adc.w	r3, r1, r3
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001684:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (uint32_t)(p >> 8);                           /* Pa */
 8001688:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	0a02      	lsrs	r2, r0, #8
 8001696:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800169a:	120b      	asrs	r3, r1, #8
 800169c:	4613      	mov	r3, r2
}
 800169e:	4618      	mov	r0, r3
 80016a0:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016aa:	bf00      	nop
 80016ac:	2000013c 	.word	0x2000013c

080016b0 <compensate_hum>:

static uint32_t compensate_hum(int32_t adc_H)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    int32_t v_x1 = t_fine_ - 76800;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <compensate_hum+0xbc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80016c0:	60fb      	str	r3, [r7, #12]
    v_x1 = (((adc_H<<14) - (calib_.dig_h4<<20) - (calib_.dig_h5 * v_x1) + 16384)>>15) *
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	039a      	lsls	r2, r3, #14
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <compensate_hum+0xc0>)
 80016c8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80016cc:	051b      	lsls	r3, r3, #20
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <compensate_hum+0xc0>)
 80016d2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80016d6:	4619      	mov	r1, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80016e4:	13db      	asrs	r3, r3, #15
           (((((((v_x1 * calib_.dig_h6)>>10)*(((v_x1 * calib_.dig_h3)>>11)+32768))>>10)+2097152)*
 80016e6:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <compensate_hum+0xc0>)
 80016e8:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80016ec:	4611      	mov	r1, r2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	fb01 f202 	mul.w	r2, r1, r2
 80016f4:	1292      	asrs	r2, r2, #10
 80016f6:	491e      	ldr	r1, [pc, #120]	@ (8001770 <compensate_hum+0xc0>)
 80016f8:	7f09      	ldrb	r1, [r1, #28]
 80016fa:	4608      	mov	r0, r1
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	fb00 f101 	mul.w	r1, r0, r1
 8001702:	12c9      	asrs	r1, r1, #11
 8001704:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001708:	fb01 f202 	mul.w	r2, r1, r2
 800170c:	1292      	asrs	r2, r2, #10
 800170e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
           calib_.dig_h2 + 8192)>>14);
 8001712:	4917      	ldr	r1, [pc, #92]	@ (8001770 <compensate_hum+0xc0>)
 8001714:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
           (((((((v_x1 * calib_.dig_h6)>>10)*(((v_x1 * calib_.dig_h3)>>11)+32768))>>10)+2097152)*
 8001718:	fb01 f202 	mul.w	r2, r1, r2
           calib_.dig_h2 + 8192)>>14);
 800171c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001720:	1392      	asrs	r2, r2, #14
    v_x1 = (((adc_H<<14) - (calib_.dig_h4<<20) - (calib_.dig_h5 * v_x1) + 16384)>>15) *
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
    v_x1 -= (((((v_x1>>15)*(v_x1>>15))>>7) * calib_.dig_h1)>>4);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	13db      	asrs	r3, r3, #15
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	13d2      	asrs	r2, r2, #15
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	11db      	asrs	r3, r3, #7
 8001736:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <compensate_hum+0xc0>)
 8001738:	7e12      	ldrb	r2, [r2, #24]
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	111b      	asrs	r3, r3, #4
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	60fb      	str	r3, [r7, #12]
    v_x1 = (v_x1 < 0) ? 0 : v_x1;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800174c:	60fb      	str	r3, [r7, #12]
    v_x1 = (v_x1 > 419430400) ? 419430400 : v_x1;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001754:	bfa8      	it	ge
 8001756:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800175a:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(v_x1 >> 12);                       /* % ×1024 */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	131b      	asrs	r3, r3, #12
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000164 	.word	0x20000164
 8001770:	2000013c 	.word	0x2000013c

08001774 <Port_ReadPin>:
{
    HAL_Delay(delayTime);
}

pin_state_t Port_ReadPin(port_t port, pin_t pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
    return HAL_GPIO_ReadPin(port, pin);
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f001 fa77 	bl	8002c78 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <debounceFSM_init>:
static const uint32_t debounceTime = 40U;



void debounceFSM_init(stDebounce *button, gpio_t *pin, delay_t *delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	if (button == NULL || pin == NULL || delay == NULL)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <debounceFSM_init+0x1e>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <debounceFSM_init+0x1e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <debounceFSM_init+0x22>
	{
		Error_Handler();
 80017b2:	f000 f8ba 	bl	800192a <Error_Handler>
	}

	button->gpio_ = pin;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]
	button->delay_ = delay;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
	button->state_ = BUTTON_UP;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	721a      	strb	r2, [r3, #8]
	button->isButtonPressed_ = false;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	729a      	strb	r2, [r3, #10]

	delayInit(button->delay_, debounceTime);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2228      	movs	r2, #40	@ 0x28
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f8ab 	bl	8001932 <delayInit>

	button->isInit = true;	
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	72da      	strb	r2, [r3, #11]
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <debounceFSM_update>:

void debounceFSM_update(stDebounce *button)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	if (!button->isInit)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7adb      	ldrb	r3, [r3, #11]
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <debounceFSM_update+0x1a>
	{
		Error_Handler();
 8001802:	f000 f892 	bl	800192a <Error_Handler>
	}
	pin_state_t buttonState = Port_ReadPin(button->gpio_->port, button->gpio_->pin);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	889b      	ldrh	r3, [r3, #4]
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff ffad 	bl	8001774 <Port_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]

	switch (button->state_) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7a1b      	ldrb	r3, [r3, #8]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d84f      	bhi.n	80018c6 <debounceFSM_update+0xda>
 8001826:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <debounceFSM_update+0x40>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	0800183d 	.word	0x0800183d
 8001830:	08001859 	.word	0x08001859
 8001834:	08001885 	.word	0x08001885
 8001838:	080018a1 	.word	0x080018a1
	case BUTTON_UP:
		if (buttonState == GPIO_PIN_RESET)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d14a      	bne.n	80018d8 <debounceFSM_update+0xec>
		{
			delayWrite(button->delay_, debounceTime);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2228      	movs	r2, #40	@ 0x28
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f8b3 	bl	80019b6 <delayWrite>
			button->state_ = BUTTON_FALLING;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	721a      	strb	r2, [r3, #8]
		}
		break;
 8001856:	e03f      	b.n	80018d8 <debounceFSM_update+0xec>
	case BUTTON_FALLING:
    if (delayRead(button->delay_))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f87f 	bl	8001960 <delayRead>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d039      	beq.n	80018dc <debounceFSM_update+0xf0>
    {
        if (buttonState == GPIO_PIN_RESET)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <debounceFSM_update+0x90>
        {
            button->isButtonPressed_ = true;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	729a      	strb	r2, [r3, #10]
            button->state_ = BUTTON_DOWN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	721a      	strb	r2, [r3, #8]
        else
        {
            button->state_ = BUTTON_UP;
        }
    }
    break;
 800187a:	e02f      	b.n	80018dc <debounceFSM_update+0xf0>
            button->state_ = BUTTON_UP;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	721a      	strb	r2, [r3, #8]
    break;
 8001882:	e02b      	b.n	80018dc <debounceFSM_update+0xf0>
	case BUTTON_DOWN:
		if (buttonState == GPIO_PIN_SET)		
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d12a      	bne.n	80018e0 <debounceFSM_update+0xf4>
		{
			delayWrite(button->delay_, debounceTime);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2228      	movs	r2, #40	@ 0x28
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f88f 	bl	80019b6 <delayWrite>
			button->state_ = BUTTON_RAISING;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	721a      	strb	r2, [r3, #8]
		}
		break;
 800189e:	e01f      	b.n	80018e0 <debounceFSM_update+0xf4>
	case BUTTON_RAISING:
		if (delayRead(button->delay_))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f85b 	bl	8001960 <delayRead>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d019      	beq.n	80018e4 <debounceFSM_update+0xf8>
		{
			if (buttonState == GPIO_PIN_SET)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d103      	bne.n	80018be <debounceFSM_update+0xd2>
			{
				button->state_ = BUTTON_UP;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	721a      	strb	r2, [r3, #8]
			else
			{
				button->state_ = BUTTON_DOWN;
			}
		}
		break;
 80018bc:	e012      	b.n	80018e4 <debounceFSM_update+0xf8>
				button->state_ = BUTTON_DOWN;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	721a      	strb	r2, [r3, #8]
		break;
 80018c4:	e00e      	b.n	80018e4 <debounceFSM_update+0xf8>
	default :
		debounceFSM_init(button, button->gpio_, button->delay_);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	461a      	mov	r2, r3
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff5f 	bl	8001794 <debounceFSM_init>
		break;
 80018d6:	e006      	b.n	80018e6 <debounceFSM_update+0xfa>
		break;
 80018d8:	bf00      	nop
 80018da:	e004      	b.n	80018e6 <debounceFSM_update+0xfa>
    break;
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <debounceFSM_update+0xfa>
		break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <debounceFSM_update+0xfa>
		break;
 80018e4:	bf00      	nop
	}
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop

080018f0 <debounceFSM_readKey>:

bool_t debounceFSM_readKey(stDebounce *button)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    bool_t ret = button->isButtonPressed_;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7a9b      	ldrb	r3, [r3, #10]
 80018fc:	73fb      	strb	r3, [r7, #15]
    button->isButtonPressed_ = false;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	729a      	strb	r2, [r3, #10]
    return ret; 
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <debounceFSM_getState>:

debounceState_t debounceFSM_getState(stDebounce *button)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return button->state_;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7a1b      	ldrb	r3, [r3, #8]
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <Error_Handler>:


static void Error_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
	while (1)
 800192e:	bf00      	nop
 8001930:	e7fd      	b.n	800192e <Error_Handler+0x4>

08001932 <delayInit>:
#include "API_delay.h"
#include "stm32f4xx_hal.h"

void delayInit(delay_t * delay, tick_t duration)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
	if (delay != NULL) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <delayInit+0x26>
		delay->duration = duration;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 800194e:	f000 fed1 	bl	80026f4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	601a      	str	r2, [r3, #0]
	}
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <delayRead>:

bool_t delayRead(delay_t * delay)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
	if (delay == NULL) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <delayRead+0x16>
		return ret;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	e01b      	b.n	80019ae <delayRead+0x4e>
	}

	if (delay->running == false)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7a1b      	ldrb	r3, [r3, #8]
 800197a:	f083 0301 	eor.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <delayRead+0x2e>
	{
		delay->running = true;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	721a      	strb	r2, [r3, #8]
		return ret;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	e00f      	b.n	80019ae <delayRead+0x4e>
	} else if ((HAL_GetTick() - delay->startTime) >= delay->duration)
 800198e:	f000 feb1 	bl	80026f4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1ad2      	subs	r2, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d304      	bcc.n	80019ac <delayRead+0x4c>
		{
		delay->running = false;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	721a      	strb	r2, [r3, #8]
		ret = true;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
		}
	return ret;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <delayWrite>:

void delayWrite(delay_t * delay, tick_t duration)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	if (delay != NULL) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <delayWrite+0x20>
		delay->duration = duration;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	605a      	str	r2, [r3, #4]
		delay->startTime = HAL_GetTick();
 80019cc:	f000 fe92 	bl	80026f4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]
	}
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <Encoder_Init>:
static bool_t prevClkState = false;

static void Encoder_GPIO_Init(void);

Encoder_Status_t Encoder_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
    Encoder_GPIO_Init();
 80019e6:	f000 f8f3 	bl	8001bd0 <Encoder_GPIO_Init>

    encoder_.clk_ = clkGpio_;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <Encoder_Init+0x88>)
 80019ec:	4a1f      	ldr	r2, [pc, #124]	@ (8001a6c <Encoder_Init+0x8c>)
 80019ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019f2:	e883 0003 	stmia.w	r3, {r0, r1}
    encoder_.dt_ = dtGpio_;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <Encoder_Init+0x88>)
 80019f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <Encoder_Init+0x90>)
 80019fa:	3308      	adds	r3, #8
 80019fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a00:	e883 0003 	stmia.w	r3, {r0, r1}
    encoder_.sw_ = swGpio_;
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <Encoder_Init+0x88>)
 8001a06:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <Encoder_Init+0x94>)
 8001a08:	3310      	adds	r3, #16
 8001a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a0e:	e883 0003 	stmia.w	r3, {r0, r1}

    debounceFSM_init(&clkDebounce_, &encoder_.clk_, &clkDelay_);
 8001a12:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <Encoder_Init+0x98>)
 8001a14:	4914      	ldr	r1, [pc, #80]	@ (8001a68 <Encoder_Init+0x88>)
 8001a16:	4819      	ldr	r0, [pc, #100]	@ (8001a7c <Encoder_Init+0x9c>)
 8001a18:	f7ff febc 	bl	8001794 <debounceFSM_init>
    debounceFSM_init(&dtDebounce_, &encoder_.dt_, &dtDelay_);
 8001a1c:	4a18      	ldr	r2, [pc, #96]	@ (8001a80 <Encoder_Init+0xa0>)
 8001a1e:	4919      	ldr	r1, [pc, #100]	@ (8001a84 <Encoder_Init+0xa4>)
 8001a20:	4819      	ldr	r0, [pc, #100]	@ (8001a88 <Encoder_Init+0xa8>)
 8001a22:	f7ff feb7 	bl	8001794 <debounceFSM_init>
    debounceFSM_init(&swDebounce_, &encoder_.sw_, &swDelay_);
 8001a26:	4a19      	ldr	r2, [pc, #100]	@ (8001a8c <Encoder_Init+0xac>)
 8001a28:	4919      	ldr	r1, [pc, #100]	@ (8001a90 <Encoder_Init+0xb0>)
 8001a2a:	481a      	ldr	r0, [pc, #104]	@ (8001a94 <Encoder_Init+0xb4>)
 8001a2c:	f7ff feb2 	bl	8001794 <debounceFSM_init>

    debounceState_t s = debounceFSM_getState(&clkDebounce_);
 8001a30:	4812      	ldr	r0, [pc, #72]	@ (8001a7c <Encoder_Init+0x9c>)
 8001a32:	f7ff ff6e 	bl	8001912 <debounceFSM_getState>
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
    prevClkState = (s == BUTTON_UP);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <Encoder_Init+0xb8>)
 8001a48:	701a      	strb	r2, [r3, #0]



    encoder_.direction_ = ENCODER_DIR_NONE;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <Encoder_Init+0x88>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	765a      	strb	r2, [r3, #25]
    buttonPressed = false;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <Encoder_Init+0xbc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
    isInit_ = true;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <Encoder_Init+0xc0>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
    return ENCODER_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000016c 	.word	0x2000016c
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000014 	.word	0x20000014
 8001a78:	200001ac 	.word	0x200001ac
 8001a7c:	20000188 	.word	0x20000188
 8001a80:	200001b8 	.word	0x200001b8
 8001a84:	20000174 	.word	0x20000174
 8001a88:	20000194 	.word	0x20000194
 8001a8c:	200001c4 	.word	0x200001c4
 8001a90:	2000017c 	.word	0x2000017c
 8001a94:	200001a0 	.word	0x200001a0
 8001a98:	200001d1 	.word	0x200001d1
 8001a9c:	200001d0 	.word	0x200001d0
 8001aa0:	20000168 	.word	0x20000168

08001aa4 <Encoder_Update>:

void Encoder_Update(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    if (!isInit_) return;
 8001aaa:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <Encoder_Update+0xa8>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d145      	bne.n	8001b44 <Encoder_Update+0xa0>

    debounceFSM_update(&clkDebounce_);
 8001ab8:	4825      	ldr	r0, [pc, #148]	@ (8001b50 <Encoder_Update+0xac>)
 8001aba:	f7ff fe97 	bl	80017ec <debounceFSM_update>
    debounceFSM_update(&dtDebounce_);
 8001abe:	4825      	ldr	r0, [pc, #148]	@ (8001b54 <Encoder_Update+0xb0>)
 8001ac0:	f7ff fe94 	bl	80017ec <debounceFSM_update>
    debounceFSM_update(&swDebounce_);
 8001ac4:	4824      	ldr	r0, [pc, #144]	@ (8001b58 <Encoder_Update+0xb4>)
 8001ac6:	f7ff fe91 	bl	80017ec <debounceFSM_update>

    debounceState_t clkS = debounceFSM_getState(&clkDebounce_);
 8001aca:	4821      	ldr	r0, [pc, #132]	@ (8001b50 <Encoder_Update+0xac>)
 8001acc:	f7ff ff21 	bl	8001912 <debounceFSM_getState>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
    debounceState_t dtS  = debounceFSM_getState(&dtDebounce_);
 8001ad4:	481f      	ldr	r0, [pc, #124]	@ (8001b54 <Encoder_Update+0xb0>)
 8001ad6:	f7ff ff1c 	bl	8001912 <debounceFSM_getState>
 8001ada:	4603      	mov	r3, r0
 8001adc:	71bb      	strb	r3, [r7, #6]

    bool clkStableUp   = (clkS == BUTTON_UP);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	717b      	strb	r3, [r7, #5]
    bool clkStableDown = (clkS == BUTTON_DOWN);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	713b      	strb	r3, [r7, #4]
    bool dtStableUp    = (dtS  == BUTTON_UP);
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	70fb      	strb	r3, [r7, #3]

    /* flanco 0→1 sólo si ambos prev y new fueron ESTABLES */
    if (prevClkState == false && clkStableUp)
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <Encoder_Update+0xb8>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	f083 0301 	eor.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <Encoder_Update+0x7a>
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <Encoder_Update+0x7a>
    {
        encoder_.direction_ = dtStableUp ? ENCODER_CCW : ENCODER_CW;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <Encoder_Update+0xbc>)
 8001b1c:	765a      	strb	r2, [r3, #25]
    }

    /* actualizamos prev sólo si está en un estado estable */
    if (clkStableUp || clkStableDown)
 8001b1e:	797b      	ldrb	r3, [r7, #5]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <Encoder_Update+0x86>
 8001b24:	793b      	ldrb	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <Encoder_Update+0x8c>
    {
        prevClkState = clkStableUp;
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <Encoder_Update+0xb8>)
 8001b2c:	797b      	ldrb	r3, [r7, #5]
 8001b2e:	7013      	strb	r3, [r2, #0]
    }

    if (debounceFSM_readKey(&swDebounce_))
 8001b30:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <Encoder_Update+0xb4>)
 8001b32:	f7ff fedd 	bl	80018f0 <debounceFSM_readKey>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <Encoder_Update+0xa2>
        buttonPressed = true;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <Encoder_Update+0xc0>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e000      	b.n	8001b46 <Encoder_Update+0xa2>
    if (!isInit_) return;
 8001b44:	bf00      	nop

}
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000168 	.word	0x20000168
 8001b50:	20000188 	.word	0x20000188
 8001b54:	20000194 	.word	0x20000194
 8001b58:	200001a0 	.word	0x200001a0
 8001b5c:	200001d1 	.word	0x200001d1
 8001b60:	2000016c 	.word	0x2000016c
 8001b64:	200001d0 	.word	0x200001d0

08001b68 <Encoder_GetDirection>:

Encoder_Direction_t Encoder_GetDirection(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
    Encoder_Direction_t d = encoder_.direction_;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <Encoder_GetDirection+0x38>)
 8001b70:	7e5b      	ldrb	r3, [r3, #25]
 8001b72:	71fb      	strb	r3, [r7, #7]
    if (d == ENCODER_CW)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <Encoder_GetDirection+0x1a>
        uartSendString((uint8_t *)"Encoder dir: CW\r\n");
 8001b7a:	480a      	ldr	r0, [pc, #40]	@ (8001ba4 <Encoder_GetDirection+0x3c>)
 8001b7c:	f000 fa94 	bl	80020a8 <uartSendString>
 8001b80:	e009      	b.n	8001b96 <Encoder_GetDirection+0x2e>
    else if (d == ENCODER_CCW)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d103      	bne.n	8001b90 <Encoder_GetDirection+0x28>
        uartSendString((uint8_t *)"Encoder dir: CCW\r\n");
 8001b88:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <Encoder_GetDirection+0x40>)
 8001b8a:	f000 fa8d 	bl	80020a8 <uartSendString>
 8001b8e:	e002      	b.n	8001b96 <Encoder_GetDirection+0x2e>
    else
    encoder_.direction_ = ENCODER_DIR_NONE;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <Encoder_GetDirection+0x38>)
 8001b92:	2202      	movs	r2, #2
 8001b94:	765a      	strb	r2, [r3, #25]
    return d;
 8001b96:	79fb      	ldrb	r3, [r7, #7]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000016c 	.word	0x2000016c
 8001ba4:	08005890 	.word	0x08005890
 8001ba8:	080058a4 	.word	0x080058a4

08001bac <Encoder_IsPressed>:

bool_t Encoder_IsPressed(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
    bool_t p = buttonPressed;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <Encoder_IsPressed+0x20>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
    buttonPressed = false;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <Encoder_IsPressed+0x20>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
    return p;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	200001d0 	.word	0x200001d0

08001bd0 <Encoder_GPIO_Init>:

static void Encoder_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <Encoder_GPIO_Init+0x54>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <Encoder_GPIO_Init+0x54>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <Encoder_GPIO_Init+0x54>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin   = ENCODER_CLK_Pin | ENCODER_DT_Pin | ENCODER_SW_Pin;
 8001c00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c04:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <Encoder_GPIO_Init+0x58>)
 8001c18:	f000 fe82 	bl	8002920 <HAL_GPIO_Init>
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020800 	.word	0x40020800

08001c2c <I2C_Init>:
 * @brief  Inicializa la instancia de I2C utilizada para la comunicacion con los perifericos 
 * 
 * @return I2C_Status_t I2C_OK si la inicializacion fue exitosa, I2C_ERROR en caso contrario
 */
I2C_Status_t I2C_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    if (isInit_) 
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <I2C_Init+0x70>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <I2C_Init+0x10>
    {
        return I2C_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e02c      	b.n	8001c96 <I2C_Init+0x6a>
    }

    hi2c1.Instance = I2C_INSTANCE;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <I2C_Init+0x74>)
 8001c3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <I2C_Init+0x78>)
 8001c40:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <I2C_Init+0x74>)
 8001c44:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <I2C_Init+0x7c>)
 8001c46:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <I2C_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <I2C_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <I2C_Init+0x74>)
 8001c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <I2C_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <I2C_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <I2C_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <I2C_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
    I2C_GPIO_Init(&hi2c1);
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <I2C_Init+0x74>)
 8001c76:	f000 f863 	bl	8001d40 <I2C_GPIO_Init>

    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7a:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <I2C_Init+0x74>)
 8001c7c:	f001 f82e 	bl	8002cdc <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <I2C_Init+0x62>
    {
      Error_Handler();
 8001c86:	f000 f8a3 	bl	8001dd0 <Error_Handler>
      return I2C_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e003      	b.n	8001c96 <I2C_Init+0x6a>
    }

    isInit_ = true;
 8001c8e:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <I2C_Init+0x70>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    return I2C_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000228 	.word	0x20000228
 8001ca0:	200001d4 	.word	0x200001d4
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	000186a0 	.word	0x000186a0

08001cac <I2C_Send>:
 * @param data puntero a los datos a enviar
 * @param size 
 * @return I2C_Status_t si la transferencia fue exitosa devuelve I2C_OK, en caso contrario I2C_ERROR
 */
I2C_Status_t I2C_Send(uint8_t address, uint8_t *data, uint16_t size)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Master_Transmit(&hi2c1, address, data, size, I2C_TIMEOUT) != HAL_OK)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	b299      	uxth	r1, r3
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cc6:	9200      	str	r2, [sp, #0]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <I2C_Send+0x38>)
 8001ccc:	f001 f94a 	bl	8002f64 <HAL_I2C_Master_Transmit>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_Send+0x2e>
    {
        return I2C_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <I2C_Send+0x30>
    }
    return I2C_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200001d4 	.word	0x200001d4

08001ce8 <I2C_Receive>:
 * @param data puntero a los datos a recibir
 * @param size 
 * @return I2C_Status_t si la transferencia fue exitosa devuelve I2C_OK, en caso contrario I2C_ERROR
 */
I2C_Status_t I2C_Receive(uint8_t address, uint8_t *data, uint16_t size)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Master_Receive(&hi2c1, address, data, size, I2C_TIMEOUT) != HAL_OK)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	88bb      	ldrh	r3, [r7, #4]
 8001cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <I2C_Receive+0x38>)
 8001d08:	f001 fa2a 	bl	8003160 <HAL_I2C_Master_Receive>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_Receive+0x2e>
    {
        return I2C_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <I2C_Receive+0x30>
    }
    return I2C_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200001d4 	.word	0x200001d4

08001d24 <I2C_isInit>:
 * @brief 
 * 
 * @return I2C_Status_t I2C_OK si la instancia de I2C fue inicializada, I2C_ERROR en caso contrario
 */
I2C_Status_t I2C_isInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
    return isInit_ ? I2C_OK : I2C_ERROR;
 8001d28:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <I2C_isInit+0x18>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	20000228 	.word	0x20000228

08001d40 <I2C_GPIO_Init>:


static void I2C_GPIO_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <I2C_GPIO_Init+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d134      	bne.n	8001dbc <I2C_GPIO_Init+0x7c>
  {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <I2C_GPIO_Init+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <I2C_GPIO_Init+0x88>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <I2C_GPIO_Init+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8001d7e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d90:	2304      	movs	r3, #4
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <I2C_GPIO_Init+0x8c>)
 8001d9c:	f000 fdc0 	bl	8002920 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <I2C_GPIO_Init+0x88>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <I2C_GPIO_Init+0x88>)
 8001daa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <I2C_GPIO_Init+0x88>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	@ 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <Error_Handler>:
/**
 * @brief Error handler function that is called when an invalid operation occurs
 * 
 */
static void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
    while(1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x4>

08001dd8 <LCD_Init>:
    while (DWT->CYCCNT - start < ticks) { __NOP(); }
}


LCD_Status_t LCD_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
    LCD_Status_t status = LCD_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	71bb      	strb	r3, [r7, #6]
    if (I2C_isInit() != I2C_OK)
 8001de2:	f7ff ff9f 	bl	8001d24 <I2C_isInit>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <LCD_Init+0x22>
    {
        if (I2C_Init() != I2C_OK)
 8001dec:	f7ff ff1e 	bl	8001c2c <I2C_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <LCD_Init+0x22>
        {
            return status;  // Error: I2C no inicializado
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	e037      	b.n	8001e6a <LCD_Init+0x92>
        }
    }

    LCD_Delay(DELAY_20MS);
 8001dfa:	2014      	movs	r0, #20
 8001dfc:	f000 f90f 	bl	800201e <LCD_Delay>
    // -------------------------------------------------------
    // Secuencia de "despertar" en 4 bits:
    // - Enviar 0x03 (nibble alto 0x3) tres veces con retardos
    // - Finalmente, enviar 0x02 (para 4-bit mode)
    // -------------------------------------------------------
    LCD_Send4Bits(LCD_INIT_CMD_1, LCD_CONTROL);  
 8001e00:	2100      	movs	r1, #0
 8001e02:	2003      	movs	r0, #3
 8001e04:	f000 f88c 	bl	8001f20 <LCD_Send4Bits>
    LCD_Delay(DELAY_10MS);
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f000 f908 	bl	800201e <LCD_Delay>
    LCD_Send4Bits(LCD_INIT_CMD_1, LCD_CONTROL);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f885 	bl	8001f20 <LCD_Send4Bits>
    LCD_Delay(DELAY_1MS);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 f901 	bl	800201e <LCD_Delay>
    LCD_Send4Bits(LCD_INIT_CMD_1, LCD_CONTROL);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f000 f87e 	bl	8001f20 <LCD_Send4Bits>
    LCD_Send4Bits(LCD_INIT_CMD_2, LCD_CONTROL);  // Activar modo 4 bits
 8001e24:	2100      	movs	r1, #0
 8001e26:	2002      	movs	r0, #2
 8001e28:	f000 f87a 	bl	8001f20 <LCD_Send4Bits>

    for (uint8_t i = 0; i < sizeof(LCD_INIT_CMD); i++) {
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	e015      	b.n	8001e5e <LCD_Init+0x86>
        LCD_SendCmd(LCD_INIT_CMD[i]);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <LCD_Init+0x9c>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f8c2 	bl	8001fc2 <LCD_SendCmd>
    
        if (LCD_INIT_CMD[i] == CLR_LCD || LCD_INIT_CMD[i] == RETURN_HOME)
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <LCD_Init+0x9c>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d004      	beq.n	8001e52 <LCD_Init+0x7a>
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <LCD_Init+0x9c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d102      	bne.n	8001e58 <LCD_Init+0x80>
            LCD_Delay(DELAY_2MS);
 8001e52:	2002      	movs	r0, #2
 8001e54:	f000 f8e3 	bl	800201e <LCD_Delay>
    for (uint8_t i = 0; i < sizeof(LCD_INIT_CMD); i++) {
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d9e6      	bls.n	8001e32 <LCD_Init+0x5a>
    }

    status = LCD_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	71bb      	strb	r3, [r7, #6]
    return status;
 8001e68:	79bb      	ldrb	r3, [r7, #6]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	08005aa8 	.word	0x08005aa8

08001e78 <LCD_Clear>:

LCD_Status_t LCD_Clear(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
    LCD_Status_t status = LCD_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(CLR_LCD);   // Clear display
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f89d 	bl	8001fc2 <LCD_SendCmd>
    LCD_Delay(DELAY_2MS);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f000 f8c8 	bl	800201e <LCD_Delay>
    status = LCD_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	71fb      	strb	r3, [r7, #7]
    return status;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <LCD_SetCursor>:

LCD_Status_t LCD_SetCursor(uint8_t row, uint8_t col)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
    LCD_Status_t status = LCD_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
    if (row > 1 || col > 15)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d802      	bhi.n	8001ebc <LCD_SetCursor+0x20>
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d901      	bls.n	8001ec0 <LCD_SetCursor+0x24>
    {
        return status;  // Error: fila o columna fuera de rango
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	e015      	b.n	8001eec <LCD_SetCursor+0x50>
    }
    // Dirección base para cada línea (según HD44780)
    uint8_t baseAddress[2] = {LCD_LINE_1, LCD_LINE_2};
 8001ec0:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001ec4:	81bb      	strh	r3, [r7, #12]
    if (row > 1) row = 1;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d901      	bls.n	8001ed0 <LCD_SetCursor+0x34>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(baseAddress[row] + col);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	443b      	add	r3, r7
 8001ed6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	4413      	add	r3, r2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f86e 	bl	8001fc2 <LCD_SendCmd>
    status = LCD_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
    
    return status;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <LCD_Print>:

void LCD_Print(const char *str)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    while (*str)
 8001efc:	e007      	b.n	8001f0e <LCD_Print+0x1a>
    {
        LCD_SendData((uint8_t)*str);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f86b 	bl	8001fde <LCD_SendData>
        str++;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
    while (*str)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f3      	bne.n	8001efe <LCD_Print+0xa>
    }
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <LCD_Send4Bits>:
 *        (RS, RW, EN). Se asume siempre RW=0 (escritura).
 * @param nibble valor de 4 bits (0x0..0xF)
 * @param control si RS=1 es dato, si RS=0 es comando
 */
static void LCD_Send4Bits(uint8_t value, uint8_t control)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	71fb      	strb	r3, [r7, #7]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71bb      	strb	r3, [r7, #6]
    // nibble & 0x0F para asegurar solo 4 bits
    // control: RS=1 / 0, RW=0, EN se activa en el pulso
    uint8_t byte = ((value & LCD_DATA_MASK_LOW) << LCD_DATA_SHIFT);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	73fb      	strb	r3, [r7, #15]
    // Combina con RS
    if (control) byte |= LCD_PIN_RS;
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <LCD_Send4Bits+0x24>
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]

    byte |= lcd_bl_mask;  // Agrega el bit de retroiluminación
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <LCD_Send4Bits+0x64>)
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	73fb      	strb	r3, [r7, #15]
    LCD_WriteI2C(byte | LCD_PIN_EN, sizeof(byte));
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f84e 	bl	8001ffa <LCD_WriteI2C>
    LCD_Delay(DELAY_1MS);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 f85d 	bl	800201e <LCD_Delay>
	LCD_WriteI2C(byte & ~LCD_PIN_EN, sizeof(byte));
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f843 	bl	8001ffa <LCD_WriteI2C>
    LCD_Delay(DELAY_1MS);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f000 f852 	bl	800201e <LCD_Delay>
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000001c 	.word	0x2000001c

08001f88 <LCD_Send8Bits>:

static void LCD_Send8Bits(uint8_t value, uint8_t control)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460a      	mov	r2, r1
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	4613      	mov	r3, r2
 8001f96:	71bb      	strb	r3, [r7, #6]
    LCD_Send4Bits((value & LCD_DATA_MASK_HIGH) >> LCD_DATA_SHIFT, control);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	79ba      	ldrb	r2, [r7, #6]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ffbc 	bl	8001f20 <LCD_Send4Bits>
    LCD_Send4Bits(value & LCD_DATA_MASK_LOW, control);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	79ba      	ldrb	r2, [r7, #6]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ffb3 	bl	8001f20 <LCD_Send4Bits>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <LCD_SendCmd>:

/**
 * @brief Enviar un comando (RS=0).
 */
static void LCD_SendCmd(uint8_t cmd)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
    LCD_Send8Bits(cmd, LCD_CONTROL);
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ffd9 	bl	8001f88 <LCD_Send8Bits>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <LCD_SendData>:

/**
 * @brief Enviar un dato (RS=1).
 */
static void LCD_SendData(uint8_t data)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
    LCD_Send8Bits(data, LCD_DATA);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ffcb 	bl	8001f88 <LCD_Send8Bits>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <LCD_WriteI2C>:

/**
 * @brief Escribe un byte a través de I2C hacia el PCF8574.
 */
static void LCD_WriteI2C(uint8_t dato, uint16_t len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	460a      	mov	r2, r1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	4613      	mov	r3, r2
 8002008:	80bb      	strh	r3, [r7, #4]
    // Transmite un byte al dispositivo en la dirección LCD_I2C_ADDRESS
    I2C_Send(LCD_I2C_ADDRESS, &dato, len);
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	1dfb      	adds	r3, r7, #7
 800200e:	4619      	mov	r1, r3
 8002010:	204e      	movs	r0, #78	@ 0x4e
 8002012:	f7ff fe4b 	bl	8001cac <I2C_Send>
    // Se asume que no hay error de timeout. Podrías evaluar el retorno si deseas.
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <LCD_Delay>:

/**
 * @brief Delay sencillo que reusa HAL_Delay (milisegundos).
 */
static void LCD_Delay(uint32_t ms)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fb70 	bl	800270c <HAL_Delay>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <uartInit>:
/**
 * @brief inicializa la instancia utilizada para la comunicacion serie
 * 
 * @return bool_t true si la inicializacion fue exitosa, false en caso contrario
 */
bool_t uartInit() {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
    bool_t ret = false;
 800203a:	2300      	movs	r3, #0
 800203c:	71fb      	strb	r3, [r7, #7]
    huart_.Instance = UART_INSTANCE;
 800203e:	4b17      	ldr	r3, [pc, #92]	@ (800209c <uartInit+0x68>)
 8002040:	4a17      	ldr	r2, [pc, #92]	@ (80020a0 <uartInit+0x6c>)
 8002042:	601a      	str	r2, [r3, #0]
    huart_.Init.BaudRate = UART_BAUDRATE;
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <uartInit+0x68>)
 8002046:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204a:	605a      	str	r2, [r3, #4]
    huart_.Init.WordLength = UART_WORDLENGTH_8B;
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <uartInit+0x68>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
    huart_.Init.StopBits = UART_STOPBITS_1;
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <uartInit+0x68>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    huart_.Init.Parity = UART_PARITY_NONE;
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <uartInit+0x68>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
    huart_.Init.Mode = UART_MODE_TX_RX;
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <uartInit+0x68>)
 8002060:	220c      	movs	r2, #12
 8002062:	615a      	str	r2, [r3, #20]
    huart_.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <uartInit+0x68>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
    huart_.Init.OverSampling = UART_OVERSAMPLING_16;
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <uartInit+0x68>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart_) != HAL_OK) {
 8002070:	480a      	ldr	r0, [pc, #40]	@ (800209c <uartInit+0x68>)
 8002072:	f002 fb41 	bl	80046f8 <HAL_UART_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <uartInit+0x4e>
        ret = false; // Initialization failed
 800207c:	2300      	movs	r3, #0
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	e006      	b.n	8002090 <uartInit+0x5c>
    } else {
        uartSendString((uint8_t *)uartInitMessage);
 8002082:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <uartInit+0x70>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f80e 	bl	80020a8 <uartSendString>
        ret = true;
 800208c:	2301      	movs	r3, #1
 800208e:	71fb      	strb	r3, [r7, #7]
        // UART initialized successfully
    }
    return ret;
 8002090:	79fb      	ldrb	r3, [r7, #7]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000022c 	.word	0x2000022c
 80020a0:	40004800 	.word	0x40004800
 80020a4:	20000020 	.word	0x20000020

080020a8 <uartSendString>:
/**
 * @brief Envia una cadena de caracteres por UART
 * 
 * @param pstring puntero a la cadena de caracteres a enviar
 */
void uartSendString(uint8_t * pstring) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_, pstring, strlen((char *)pstring), UART_TIMEOUT);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe f89d 	bl	80001f0 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	2364      	movs	r3, #100	@ 0x64
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4803      	ldr	r0, [pc, #12]	@ (80020cc <uartSendString+0x24>)
 80020c0:	f002 fb6a 	bl	8004798 <HAL_UART_Transmit>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000022c 	.word	0x2000022c

080020d0 <Error_Handler>:

static stMenu menu_;
static BME280_Data_t bme280Data_;

static void Error_Handler()
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <Error_Handler+0x4>

080020d8 <Menu_Init>:
}

static void updateDisplayData(BME280_Data_t *data);

void Menu_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    menu_.state_ = STATE_INIT;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <Menu_Init+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    delayInit(&dataDelay_, MENU_DATA_UPDATE_TIME);
 80020e2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020e6:	480d      	ldr	r0, [pc, #52]	@ (800211c <Menu_Init+0x44>)
 80020e8:	f7ff fc23 	bl	8001932 <delayInit>

    if (LCD_Init() != LCD_OK)
 80020ec:	f7ff fe74 	bl	8001dd8 <LCD_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <Menu_Init+0x22>
    {
        Error_Handler();
 80020f6:	f7ff ffeb 	bl	80020d0 <Error_Handler>
    }

    LCD_Clear();
 80020fa:	f7ff febd 	bl	8001e78 <LCD_Clear>

    if (BME280_Init() != BME280_OK)
 80020fe:	f7fe fe11 	bl	8000d24 <BME280_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <Menu_Init+0x34>
    {
        Error_Handler();
 8002108:	f7ff ffe2 	bl	80020d0 <Error_Handler>
    }

    Encoder_Init();
 800210c:	f7ff fc68 	bl	80019e0 <Encoder_Init>
    uartInit();
 8002110:	f7ff ff90 	bl	8002034 <uartInit>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000280 	.word	0x20000280
 800211c:	20000274 	.word	0x20000274

08002120 <Menu_Update>:

static bool_t stateEntry = false;

void Menu_Update(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0

    Encoder_Update();
 8002126:	f7ff fcbd 	bl	8001aa4 <Encoder_Update>
    Encoder_Direction_t dir = Encoder_GetDirection();
 800212a:	f7ff fd1d 	bl	8001b68 <Encoder_GetDirection>
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
    bool_t btnPressed = Encoder_IsPressed();
 8002132:	f7ff fd3b 	bl	8001bac <Encoder_IsPressed>
 8002136:	4603      	mov	r3, r0
 8002138:	71bb      	strb	r3, [r7, #6]

    switch (menu_.state_)
 800213a:	4bad      	ldr	r3, [pc, #692]	@ (80023f0 <Menu_Update+0x2d0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b09      	cmp	r3, #9
 8002140:	f200 81bf 	bhi.w	80024c2 <Menu_Update+0x3a2>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <Menu_Update+0x2c>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	08002175 	.word	0x08002175
 8002150:	080021a5 	.word	0x080021a5
 8002154:	08002213 	.word	0x08002213
 8002158:	08002267 	.word	0x08002267
 800215c:	080022b5 	.word	0x080022b5
 8002160:	08002317 	.word	0x08002317
 8002164:	08002379 	.word	0x08002379
 8002168:	080023b5 	.word	0x080023b5
 800216c:	0800243d 	.word	0x0800243d
 8002170:	08002477 	.word	0x08002477
    {
    case STATE_INIT:
        if (BME280_ReadData(&bme280Data_) == BME280_OK)
 8002174:	489f      	ldr	r0, [pc, #636]	@ (80023f4 <Menu_Update+0x2d4>)
 8002176:	f7fe fe43 	bl	8000e00 <BME280_ReadData>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 81a2 	bne.w	80024c6 <Menu_Update+0x3a6>
        {
            LCD_SetCursor(0, 0);
 8002182:	2100      	movs	r1, #0
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff fe89 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("BME280 Init OK");
 800218a:	489b      	ldr	r0, [pc, #620]	@ (80023f8 <Menu_Update+0x2d8>)
 800218c:	f7ff feb2 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"BME280 Init OK\r\n");
 8002190:	489a      	ldr	r0, [pc, #616]	@ (80023fc <Menu_Update+0x2dc>)
 8002192:	f7ff ff89 	bl	80020a8 <uartSendString>
            menu_.state_ = STATE_DISPLAY_DATA;
 8002196:	4b96      	ldr	r3, [pc, #600]	@ (80023f0 <Menu_Update+0x2d0>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 800219c:	4b98      	ldr	r3, [pc, #608]	@ (8002400 <Menu_Update+0x2e0>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80021a2:	e190      	b.n	80024c6 <Menu_Update+0x3a6>

    case STATE_DISPLAY_DATA:
        if (stateEntry)
 80021a4:	4b96      	ldr	r3, [pc, #600]	@ (8002400 <Menu_Update+0x2e0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d010      	beq.n	80021ce <Menu_Update+0xae>
        {
            LCD_Clear();
 80021ac:	f7ff fe64 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 80021b0:	2100      	movs	r1, #0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff fe72 	bl	8001e9c <LCD_SetCursor>
            updateDisplayData(&bme280Data_);
 80021b8:	488e      	ldr	r0, [pc, #568]	@ (80023f4 <Menu_Update+0x2d4>)
 80021ba:	f000 f9a7 	bl	800250c <updateDisplayData>
            delayWrite(&dataDelay_, MENU_DATA_UPDATE_TIME);
 80021be:	f242 7110 	movw	r1, #10000	@ 0x2710
 80021c2:	4890      	ldr	r0, [pc, #576]	@ (8002404 <Menu_Update+0x2e4>)
 80021c4:	f7ff fbf7 	bl	80019b6 <delayWrite>
            stateEntry = false;
 80021c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002400 <Menu_Update+0x2e0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
        }
        
        if (delayRead(&dataDelay_))
 80021ce:	488d      	ldr	r0, [pc, #564]	@ (8002404 <Menu_Update+0x2e4>)
 80021d0:	f7ff fbc6 	bl	8001960 <delayRead>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <Menu_Update+0xd6>
        {
            BME280_ReadData(&bme280Data_);
 80021da:	4886      	ldr	r0, [pc, #536]	@ (80023f4 <Menu_Update+0x2d4>)
 80021dc:	f7fe fe10 	bl	8000e00 <BME280_ReadData>
            updateDisplayData(&bme280Data_);
 80021e0:	4884      	ldr	r0, [pc, #528]	@ (80023f4 <Menu_Update+0x2d4>)
 80021e2:	f000 f993 	bl	800250c <updateDisplayData>
            uartSendString((uint8_t *)"Polling sensor\r\n");
 80021e6:	4888      	ldr	r0, [pc, #544]	@ (8002408 <Menu_Update+0x2e8>)
 80021e8:	f7ff ff5e 	bl	80020a8 <uartSendString>
            delayWrite(&dataDelay_, MENU_DATA_UPDATE_TIME);
 80021ec:	f242 7110 	movw	r1, #10000	@ 0x2710
 80021f0:	4884      	ldr	r0, [pc, #528]	@ (8002404 <Menu_Update+0x2e4>)
 80021f2:	f7ff fbe0 	bl	80019b6 <delayWrite>
        }

        if (dir == ENCODER_CW || dir == ENCODER_CCW)       
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <Menu_Update+0xe4>
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	f040 8163 	bne.w	80024ca <Menu_Update+0x3aa>
        {
            menu_.state_ = STATE_CALIBRATION;
 8002204:	4b7a      	ldr	r3, [pc, #488]	@ (80023f0 <Menu_Update+0x2d0>)
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 800220a:	4b7d      	ldr	r3, [pc, #500]	@ (8002400 <Menu_Update+0x2e0>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002210:	e15b      	b.n	80024ca <Menu_Update+0x3aa>

    case STATE_CALIBRATION:
        if (stateEntry)
 8002212:	4b7b      	ldr	r3, [pc, #492]	@ (8002400 <Menu_Update+0x2e0>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00e      	beq.n	8002238 <Menu_Update+0x118>
        {
            LCD_Clear();
 800221a:	f7ff fe2d 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 800221e:	2100      	movs	r1, #0
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff fe3b 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Calibracion >");
 8002226:	4879      	ldr	r0, [pc, #484]	@ (800240c <Menu_Update+0x2ec>)
 8002228:	f7ff fe64 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN CALIBRACION\r\n");
 800222c:	4878      	ldr	r0, [pc, #480]	@ (8002410 <Menu_Update+0x2f0>)
 800222e:	f7ff ff3b 	bl	80020a8 <uartSendString>
            stateEntry = false;
 8002232:	4b73      	ldr	r3, [pc, #460]	@ (8002400 <Menu_Update+0x2e0>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <Menu_Update+0x12a>
        {
            menu_.state_ = STATE_CALIBRATION_TEMP;
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <Menu_Update+0x2d0>)
 8002240:	2203      	movs	r2, #3
 8002242:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 8002244:	4b6e      	ldr	r3, [pc, #440]	@ (8002400 <Menu_Update+0x2e0>)
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
        }
        
        if (dir == ENCODER_CW || dir == ENCODER_CCW)
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <Menu_Update+0x138>
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 813b 	bne.w	80024ce <Menu_Update+0x3ae>
        {
            menu_.state_ = STATE_DISPLAY_DATA;
 8002258:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <Menu_Update+0x2d0>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 800225e:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <Menu_Update+0x2e0>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002264:	e133      	b.n	80024ce <Menu_Update+0x3ae>
        
    case STATE_CALIBRATION_TEMP:
        if (stateEntry)
 8002266:	4b66      	ldr	r3, [pc, #408]	@ (8002400 <Menu_Update+0x2e0>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <Menu_Update+0x16c>
        {
            LCD_Clear();
 800226e:	f7ff fe03 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 8002272:	2100      	movs	r1, #0
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff fe11 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Calibracion Temp >");
 800227a:	4866      	ldr	r0, [pc, #408]	@ (8002414 <Menu_Update+0x2f4>)
 800227c:	f7ff fe3a 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN CALIBRACION TEMP\r\n");
 8002280:	4865      	ldr	r0, [pc, #404]	@ (8002418 <Menu_Update+0x2f8>)
 8002282:	f7ff ff11 	bl	80020a8 <uartSendString>
            stateEntry = false;
 8002286:	4b5e      	ldr	r3, [pc, #376]	@ (8002400 <Menu_Update+0x2e0>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <Menu_Update+0x17e>
        {
            menu_.state_ = STATE_OFFSET_TEMP;
 8002292:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <Menu_Update+0x2d0>)
 8002294:	2206      	movs	r2, #6
 8002296:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 8002298:	4b59      	ldr	r3, [pc, #356]	@ (8002400 <Menu_Update+0x2e0>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
        }

        if (dir == ENCODER_CW)
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 8116 	bne.w	80024d2 <Menu_Update+0x3b2>
        {
            menu_.state_ = STATE_CALIBRATION_PRESS;
 80022a6:	4b52      	ldr	r3, [pc, #328]	@ (80023f0 <Menu_Update+0x2d0>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80022ac:	4b54      	ldr	r3, [pc, #336]	@ (8002400 <Menu_Update+0x2e0>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
        }     
        break;
 80022b2:	e10e      	b.n	80024d2 <Menu_Update+0x3b2>

    case STATE_CALIBRATION_PRESS:
        if (stateEntry)
 80022b4:	4b52      	ldr	r3, [pc, #328]	@ (8002400 <Menu_Update+0x2e0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00e      	beq.n	80022da <Menu_Update+0x1ba>
        {
            LCD_Clear();
 80022bc:	f7ff fddc 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 80022c0:	2100      	movs	r1, #0
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fdea 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Calibracion Pres >");
 80022c8:	4854      	ldr	r0, [pc, #336]	@ (800241c <Menu_Update+0x2fc>)
 80022ca:	f7ff fe13 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN CALIBRACION PRES\r\n");
 80022ce:	4854      	ldr	r0, [pc, #336]	@ (8002420 <Menu_Update+0x300>)
 80022d0:	f7ff feea 	bl	80020a8 <uartSendString>
            stateEntry = false;
 80022d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <Menu_Update+0x2e0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <Menu_Update+0x1cc>
        {
            menu_.state_ = STATE_OFFSET_PRESS;
 80022e0:	4b43      	ldr	r3, [pc, #268]	@ (80023f0 <Menu_Update+0x2d0>)
 80022e2:	2207      	movs	r2, #7
 80022e4:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80022e6:	4b46      	ldr	r3, [pc, #280]	@ (8002400 <Menu_Update+0x2e0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
        }

        if (dir == ENCODER_CW)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <Menu_Update+0x1e0>
        {
            menu_.state_ = STATE_CALIBRATION_HUM;
 80022f2:	4b3f      	ldr	r3, [pc, #252]	@ (80023f0 <Menu_Update+0x2d0>)
 80022f4:	2205      	movs	r2, #5
 80022f6:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80022f8:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <Menu_Update+0x2e0>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
        else if (dir == ENCODER_CCW)
        {
            menu_.state_ = STATE_CALIBRATION_TEMP;
            stateEntry = true;
        }
        break;
 80022fe:	e0ea      	b.n	80024d6 <Menu_Update+0x3b6>
        else if (dir == ENCODER_CCW)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 80e7 	bne.w	80024d6 <Menu_Update+0x3b6>
            menu_.state_ = STATE_CALIBRATION_TEMP;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <Menu_Update+0x2d0>)
 800230a:	2203      	movs	r2, #3
 800230c:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <Menu_Update+0x2e0>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
        break;
 8002314:	e0df      	b.n	80024d6 <Menu_Update+0x3b6>

    case STATE_CALIBRATION_HUM:
        if (stateEntry)
 8002316:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <Menu_Update+0x2e0>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00e      	beq.n	800233c <Menu_Update+0x21c>
        {
            LCD_Clear();
 800231e:	f7ff fdab 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 8002322:	2100      	movs	r1, #0
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff fdb9 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Calibracion Hum >");
 800232a:	483e      	ldr	r0, [pc, #248]	@ (8002424 <Menu_Update+0x304>)
 800232c:	f7ff fde2 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN CALIBRACION HUM\r\n");
 8002330:	483d      	ldr	r0, [pc, #244]	@ (8002428 <Menu_Update+0x308>)
 8002332:	f7ff feb9 	bl	80020a8 <uartSendString>
            stateEntry = false;
 8002336:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <Menu_Update+0x2e0>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <Menu_Update+0x22e>
        {
            menu_.state_ = STATE_OFFSET_HUM;
 8002342:	4b2b      	ldr	r3, [pc, #172]	@ (80023f0 <Menu_Update+0x2d0>)
 8002344:	2208      	movs	r2, #8
 8002346:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 8002348:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <Menu_Update+0x2e0>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
        }

        if (dir == ENCODER_CW)
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <Menu_Update+0x242>
        {
            menu_.state_ = STATE_EXIT;
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <Menu_Update+0x2d0>)
 8002356:	2209      	movs	r2, #9
 8002358:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 800235a:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <Menu_Update+0x2e0>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
        else if (dir == ENCODER_CCW)
        {
            menu_.state_ = STATE_CALIBRATION_PRESS;
            stateEntry = true;
        }              
        break;
 8002360:	e0bb      	b.n	80024da <Menu_Update+0x3ba>
        else if (dir == ENCODER_CCW)
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 80b8 	bne.w	80024da <Menu_Update+0x3ba>
            menu_.state_ = STATE_CALIBRATION_PRESS;
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <Menu_Update+0x2d0>)
 800236c:	2204      	movs	r2, #4
 800236e:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 8002370:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <Menu_Update+0x2e0>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
        break;
 8002376:	e0b0      	b.n	80024da <Menu_Update+0x3ba>

    case STATE_OFFSET_TEMP:
        if (stateEntry)
 8002378:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <Menu_Update+0x2e0>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <Menu_Update+0x27e>
        {
            LCD_Clear();
 8002380:	f7ff fd7a 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 8002384:	2100      	movs	r1, #0
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff fd88 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Offset Temp >");
 800238c:	4827      	ldr	r0, [pc, #156]	@ (800242c <Menu_Update+0x30c>)
 800238e:	f7ff fdb1 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN OFFSET TEMP\r\n");
 8002392:	4827      	ldr	r0, [pc, #156]	@ (8002430 <Menu_Update+0x310>)
 8002394:	f7ff fe88 	bl	80020a8 <uartSendString>
            stateEntry = false;
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <Menu_Update+0x2e0>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 809c 	beq.w	80024de <Menu_Update+0x3be>
        {
            menu_.state_ = STATE_CALIBRATION_TEMP;
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <Menu_Update+0x2d0>)
 80023a8:	2203      	movs	r2, #3
 80023aa:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <Menu_Update+0x2e0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80023b2:	e094      	b.n	80024de <Menu_Update+0x3be>

    case STATE_OFFSET_PRESS:
        if (stateEntry)
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <Menu_Update+0x2e0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <Menu_Update+0x2ba>
        {
            LCD_Clear();
 80023bc:	f7ff fd5c 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fd6a 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Offset Pres >");
 80023c8:	481a      	ldr	r0, [pc, #104]	@ (8002434 <Menu_Update+0x314>)
 80023ca:	f7ff fd93 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN OFFSET PRES\r\n");
 80023ce:	481a      	ldr	r0, [pc, #104]	@ (8002438 <Menu_Update+0x318>)
 80023d0:	f7ff fe6a 	bl	80020a8 <uartSendString>
            stateEntry = false;
 80023d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <Menu_Update+0x2e0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8080 	beq.w	80024e2 <Menu_Update+0x3c2>
        {
            menu_.state_ = STATE_CALIBRATION_PRESS;
 80023e2:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <Menu_Update+0x2d0>)
 80023e4:	2204      	movs	r2, #4
 80023e6:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <Menu_Update+0x2e0>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
        }
        break;
 80023ee:	e078      	b.n	80024e2 <Menu_Update+0x3c2>
 80023f0:	20000280 	.word	0x20000280
 80023f4:	20000284 	.word	0x20000284
 80023f8:	080058dc 	.word	0x080058dc
 80023fc:	080058ec 	.word	0x080058ec
 8002400:	20000290 	.word	0x20000290
 8002404:	20000274 	.word	0x20000274
 8002408:	08005900 	.word	0x08005900
 800240c:	08005914 	.word	0x08005914
 8002410:	08005924 	.word	0x08005924
 8002414:	0800593c 	.word	0x0800593c
 8002418:	08005950 	.word	0x08005950
 800241c:	0800596c 	.word	0x0800596c
 8002420:	08005980 	.word	0x08005980
 8002424:	0800599c 	.word	0x0800599c
 8002428:	080059b0 	.word	0x080059b0
 800242c:	080059cc 	.word	0x080059cc
 8002430:	080059dc 	.word	0x080059dc
 8002434:	080059f4 	.word	0x080059f4
 8002438:	08005a04 	.word	0x08005a04

    case STATE_OFFSET_HUM:
        if (stateEntry)
 800243c:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <Menu_Update+0x3d4>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00e      	beq.n	8002462 <Menu_Update+0x342>
        {
            LCD_Clear();
 8002444:	f7ff fd18 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 8002448:	2100      	movs	r1, #0
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff fd26 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Offset Hum >");
 8002450:	4829      	ldr	r0, [pc, #164]	@ (80024f8 <Menu_Update+0x3d8>)
 8002452:	f7ff fd4f 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN OFFSET HUM\r\n");
 8002456:	4829      	ldr	r0, [pc, #164]	@ (80024fc <Menu_Update+0x3dc>)
 8002458:	f7ff fe26 	bl	80020a8 <uartSendString>
            stateEntry = false;
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <Menu_Update+0x3d4>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03e      	beq.n	80024e6 <Menu_Update+0x3c6>
        {
            menu_.state_ = STATE_CALIBRATION_HUM;
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <Menu_Update+0x3e0>)
 800246a:	2205      	movs	r2, #5
 800246c:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 800246e:	4b21      	ldr	r3, [pc, #132]	@ (80024f4 <Menu_Update+0x3d4>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002474:	e037      	b.n	80024e6 <Menu_Update+0x3c6>

    case STATE_EXIT:
        if (stateEntry)
 8002476:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <Menu_Update+0x3d4>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <Menu_Update+0x37c>
        {
            LCD_Clear();
 800247e:	f7ff fcfb 	bl	8001e78 <LCD_Clear>
            LCD_SetCursor(LINE_1, 0);
 8002482:	2100      	movs	r1, #0
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff fd09 	bl	8001e9c <LCD_SetCursor>
            LCD_Print("Salir");
 800248a:	481e      	ldr	r0, [pc, #120]	@ (8002504 <Menu_Update+0x3e4>)
 800248c:	f7ff fd32 	bl	8001ef4 <LCD_Print>
            uartSendString((uint8_t *)"ENTRO EN SALIR\r\n");
 8002490:	481d      	ldr	r0, [pc, #116]	@ (8002508 <Menu_Update+0x3e8>)
 8002492:	f7ff fe09 	bl	80020a8 <uartSendString>
            stateEntry = false;
 8002496:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <Menu_Update+0x3d4>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
        }

        if (dir == ENCODER_CW)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <Menu_Update+0x38e>
        {
            menu_.state_ = STATE_CALIBRATION_HUM;
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <Menu_Update+0x3e0>)
 80024a4:	2205      	movs	r2, #5
 80024a6:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <Menu_Update+0x3d4>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
        }
        
        if (btnPressed)
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01a      	beq.n	80024ea <Menu_Update+0x3ca>
        {
            menu_.state_ = STATE_DISPLAY_DATA;
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <Menu_Update+0x3e0>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
            stateEntry = true;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <Menu_Update+0x3d4>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
        }
        break;
 80024c0:	e013      	b.n	80024ea <Menu_Update+0x3ca>
    
    default:
        break;
 80024c2:	bf00      	nop
 80024c4:	e012      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024c6:	bf00      	nop
 80024c8:	e010      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024ca:	bf00      	nop
 80024cc:	e00e      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024ce:	bf00      	nop
 80024d0:	e00c      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024d2:	bf00      	nop
 80024d4:	e00a      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024d6:	bf00      	nop
 80024d8:	e008      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024da:	bf00      	nop
 80024dc:	e006      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024de:	bf00      	nop
 80024e0:	e004      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024e2:	bf00      	nop
 80024e4:	e002      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <Menu_Update+0x3cc>
        break;
 80024ea:	bf00      	nop
    }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000290 	.word	0x20000290
 80024f8:	08005a1c 	.word	0x08005a1c
 80024fc:	08005a2c 	.word	0x08005a2c
 8002500:	20000280 	.word	0x20000280
 8002504:	08005a44 	.word	0x08005a44
 8002508:	08005a4c 	.word	0x08005a4c

0800250c <updateDisplayData>:

static void updateDisplayData(BME280_Data_t *data)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b090      	sub	sp, #64	@ 0x40
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
    char buffer[LCD_BUFFER_SIZE];

    int32_t t_int = data->temperature_x100 / 100;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <updateDisplayData+0x104>)
 800251a:	fb82 1203 	smull	r1, r2, r2, r3
 800251e:	1152      	asrs	r2, r2, #5
 8002520:	17db      	asrs	r3, r3, #31
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t t_dec = abs(data->temperature_x100 % 100) / 10;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <updateDisplayData+0x104>)
 800252c:	fb83 1302 	smull	r1, r3, r3, r2
 8002530:	1159      	asrs	r1, r3, #5
 8002532:	17d3      	asrs	r3, r2, #31
 8002534:	1acb      	subs	r3, r1, r3
 8002536:	2164      	movs	r1, #100	@ 0x64
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	bfb8      	it	lt
 8002542:	425b      	neglt	r3, r3
 8002544:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <updateDisplayData+0x108>)
 8002546:	fb82 1203 	smull	r1, r2, r2, r3
 800254a:	1092      	asrs	r2, r2, #2
 800254c:	17db      	asrs	r3, r3, #31
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	633b      	str	r3, [r7, #48]	@ 0x30
    snprintf(buffer, sizeof(buffer),"T:%ld.%1ld\xDF""C",(long)t_int, (long)t_dec);
 8002552:	f107 000c 	add.w	r0, r7, #12
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255c:	4a2e      	ldr	r2, [pc, #184]	@ (8002618 <updateDisplayData+0x10c>)
 800255e:	2111      	movs	r1, #17
 8002560:	f002 fcd6 	bl	8004f10 <sniprintf>
    LCD_SetCursor(LINE_1, TEMP_POS);    
 8002564:	2100      	movs	r1, #0
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff fc98 	bl	8001e9c <LCD_SetCursor>
    LCD_Print(buffer);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fcbf 	bl	8001ef4 <LCD_Print>

    uint32_t h_int = data->humidity_x1024 % 1024;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t h_dec = (data->humidity_x1024 * 10 + 512) / 1024;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002590:	0a9b      	lsrs	r3, r3, #10
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
    snprintf(buffer, sizeof(buffer),"H:%lu.%1lu%%",(unsigned long)h_int,(unsigned long)h_dec);
 8002594:	f107 000c 	add.w	r0, r7, #12
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <updateDisplayData+0x110>)
 80025a0:	2111      	movs	r1, #17
 80025a2:	f002 fcb5 	bl	8004f10 <sniprintf>
    LCD_SetCursor(LINE_1, HUM_POS);
 80025a6:	2109      	movs	r1, #9
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fc77 	bl	8001e9c <LCD_SetCursor>
    LCD_Print(buffer);
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc9e 	bl	8001ef4 <LCD_Print>

    uint32_t p_int = data->pressure / 100;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <updateDisplayData+0x104>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t p_dec = (data->pressure % 100) / 10;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <updateDisplayData+0x104>)
 80025cc:	fba3 1302 	umull	r1, r3, r3, r2
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	2164      	movs	r1, #100	@ 0x64
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	4a11      	ldr	r2, [pc, #68]	@ (8002620 <updateDisplayData+0x114>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	623b      	str	r3, [r7, #32]
    snprintf(buffer, sizeof(buffer),"P:%lu.%1luhPa",(unsigned long)p_int,(unsigned long)p_dec);
 80025e4:	f107 000c 	add.w	r0, r7, #12
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <updateDisplayData+0x118>)
 80025f0:	2111      	movs	r1, #17
 80025f2:	f002 fc8d 	bl	8004f10 <sniprintf>
    LCD_SetCursor(LINE_2, PRESS_POS);
 80025f6:	2103      	movs	r1, #3
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff fc4f 	bl	8001e9c <LCD_SetCursor>
    LCD_Print(buffer);
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fc76 	bl	8001ef4 <LCD_Print>
}
 8002608:	bf00      	nop
 800260a:	3738      	adds	r7, #56	@ 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	51eb851f 	.word	0x51eb851f
 8002614:	66666667 	.word	0x66666667
 8002618:	08005a60 	.word	0x08005a60
 800261c:	08005a70 	.word	0x08005a70
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	08005a80 	.word	0x08005a80

08002628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800262c:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <HAL_Init+0x40>)
 8002632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <HAL_Init+0x40>)
 800263e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a07      	ldr	r2, [pc, #28]	@ (8002668 <HAL_Init+0x40>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002650:	2003      	movs	r0, #3
 8002652:	f000 f931 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002656:	2000      	movs	r0, #0
 8002658:	f000 f808 	bl	800266c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800265c:	f7fe fa08 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00

0800266c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_InitTick+0x54>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_InitTick+0x58>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002682:	fbb3 f3f1 	udiv	r3, r3, r1
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f93b 	bl	8002906 <HAL_SYSTICK_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00e      	b.n	80026b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d80a      	bhi.n	80026b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a0:	2200      	movs	r2, #0
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026a8:	f000 f911 	bl	80028ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ac:	4a06      	ldr	r2, [pc, #24]	@ (80026c8 <HAL_InitTick+0x5c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000028 	.word	0x20000028
 80026c8:	20000024 	.word	0x20000024

080026cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x20>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_IncTick+0x24>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_IncTick+0x24>)
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000028 	.word	0x20000028
 80026f0:	20000294 	.word	0x20000294

080026f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return uwTick;
 80026f8:	4b03      	ldr	r3, [pc, #12]	@ (8002708 <HAL_GetTick+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000294 	.word	0x20000294

0800270c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff ffee 	bl	80026f4 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002724:	d005      	beq.n	8002732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_Delay+0x44>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002732:	bf00      	nop
 8002734:	f7ff ffde 	bl	80026f4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d8f7      	bhi.n	8002734 <HAL_Delay+0x28>
  {
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000028 	.word	0x20000028

08002754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	@ (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	@ (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002898:	f7ff ff8e 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff47 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff5c 	bl	800279c <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff8e 	bl	800280c <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5d 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffb0 	bl	8002874 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e177      	b.n	8002c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	f040 8166 	bne.w	8002c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	2b02      	cmp	r3, #2
 8002970:	d130      	bne.n	80029d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0201 	and.w	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d017      	beq.n	8002a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d123      	bne.n	8002a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80c0 	beq.w	8002c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b66      	ldr	r3, [pc, #408]	@ (8002c44 <HAL_GPIO_Init+0x324>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	4a65      	ldr	r2, [pc, #404]	@ (8002c44 <HAL_GPIO_Init+0x324>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab6:	4b63      	ldr	r3, [pc, #396]	@ (8002c44 <HAL_GPIO_Init+0x324>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac2:	4a61      	ldr	r2, [pc, #388]	@ (8002c48 <HAL_GPIO_Init+0x328>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_GPIO_Init+0x32c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d037      	beq.n	8002b5e <HAL_GPIO_Init+0x23e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a57      	ldr	r2, [pc, #348]	@ (8002c50 <HAL_GPIO_Init+0x330>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_GPIO_Init+0x23a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a56      	ldr	r2, [pc, #344]	@ (8002c54 <HAL_GPIO_Init+0x334>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02b      	beq.n	8002b56 <HAL_GPIO_Init+0x236>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a55      	ldr	r2, [pc, #340]	@ (8002c58 <HAL_GPIO_Init+0x338>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d025      	beq.n	8002b52 <HAL_GPIO_Init+0x232>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a54      	ldr	r2, [pc, #336]	@ (8002c5c <HAL_GPIO_Init+0x33c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <HAL_GPIO_Init+0x22e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a53      	ldr	r2, [pc, #332]	@ (8002c60 <HAL_GPIO_Init+0x340>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d019      	beq.n	8002b4a <HAL_GPIO_Init+0x22a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	@ (8002c64 <HAL_GPIO_Init+0x344>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x226>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a51      	ldr	r2, [pc, #324]	@ (8002c68 <HAL_GPIO_Init+0x348>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x222>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a50      	ldr	r2, [pc, #320]	@ (8002c6c <HAL_GPIO_Init+0x34c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x21e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4f      	ldr	r2, [pc, #316]	@ (8002c70 <HAL_GPIO_Init+0x350>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x21a>
 8002b36:	2309      	movs	r3, #9
 8002b38:	e012      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	e010      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	e00e      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	@ (8002c48 <HAL_GPIO_Init+0x328>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a34      	ldr	r2, [pc, #208]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b32      	ldr	r3, [pc, #200]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <HAL_GPIO_Init+0x354>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f ae84 	bls.w	800293c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40021400 	.word	0x40021400
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40021c00 	.word	0x40021c00
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40022400 	.word	0x40022400
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e001      	b.n	8002c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e12b      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fedc 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	@ 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f001 fcb2 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a80      	ldr	r2, [pc, #512]	@ (8002f54 <HAL_I2C_Init+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	@ (8002f58 <HAL_I2C_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e7      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a78      	ldr	r2, [pc, #480]	@ (8002f5c <HAL_I2C_Init+0x280>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a69      	ldr	r2, [pc, #420]	@ (8002f60 <HAL_I2C_Init+0x284>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	495c      	ldr	r1, [pc, #368]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d819      	bhi.n	8002e18 <HAL_I2C_Init+0x13c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_I2C_Init+0x138>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	e051      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e14:	2304      	movs	r3, #4
 8002e16:	e04f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_I2C_Init+0x168>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Init+0x18e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x196>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_I2C_Init+0x1bc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ee6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6911      	ldr	r1, [r2, #16]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	000186a0 	.word	0x000186a0
 8002f54:	001e847f 	.word	0x001e847f
 8002f58:	003d08ff 	.word	0x003d08ff
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
 8002f74:	4613      	mov	r3, r2
 8002f76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff fbbc 	bl	80026f4 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	f040 80e0 	bne.w	800314c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2319      	movs	r3, #25
 8002f92:	2201      	movs	r2, #1
 8002f94:	4970      	ldr	r1, [pc, #448]	@ (8003158 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fc64 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0d3      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x50>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0cc      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ea>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d007      	beq.n	8002fda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fe8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2221      	movs	r2, #33	@ 0x21
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	893a      	ldrh	r2, [r7, #8]
 800300a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a50      	ldr	r2, [pc, #320]	@ (800315c <HAL_I2C_Master_Transmit+0x1f8>)
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 face 	bl	80035c4 <I2C_MasterRequestWrite>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e08d      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003048:	e066      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fd22 	bl	8003a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06b      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d11b      	bne.n	80030ec <HAL_I2C_Master_Transmit+0x188>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	6a39      	ldr	r1, [r7, #32]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fd19 	bl	8003b28 <I2C_WaitOnBTFFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	2b04      	cmp	r3, #4
 8003102:	d107      	bne.n	8003114 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003112:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e01a      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d194      	bne.n	800304a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	00100002 	.word	0x00100002
 800315c:	ffff0000 	.word	0xffff0000

08003160 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08c      	sub	sp, #48	@ 0x30
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff fabe 	bl	80026f4 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 8217 	bne.w	80035b6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	497c      	ldr	r1, [pc, #496]	@ (8003384 <HAL_I2C_Master_Receive+0x224>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fb66 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	e20a      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2C_Master_Receive+0x50>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e203      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d007      	beq.n	80031d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2222      	movs	r2, #34	@ 0x22
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2210      	movs	r2, #16
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	893a      	ldrh	r2, [r7, #8]
 8003206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_I2C_Master_Receive+0x228>)
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003218:	8979      	ldrh	r1, [r7, #10]
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa52 	bl	80036c8 <I2C_MasterRequestRead>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1c4      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d113      	bne.n	800325e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e198      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	2b01      	cmp	r3, #1
 8003264:	d11b      	bne.n	800329e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003274:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e178      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d11b      	bne.n	80032de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	e158      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003304:	e144      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	2b03      	cmp	r3, #3
 800330c:	f200 80f1 	bhi.w	80034f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003314:	2b01      	cmp	r3, #1
 8003316:	d123      	bne.n	8003360 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fc4b 	bl	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e145      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800335e:	e117      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	2b02      	cmp	r3, #2
 8003366:	d14e      	bne.n	8003406 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336e:	2200      	movs	r2, #0
 8003370:	4906      	ldr	r1, [pc, #24]	@ (800338c <HAL_I2C_Master_Receive+0x22c>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fa76 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e11a      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
 8003382:	bf00      	nop
 8003384:	00100002 	.word	0x00100002
 8003388:	ffff0000 	.word	0xffff0000
 800338c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003404:	e0c4      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	2200      	movs	r2, #0
 800340e:	496c      	ldr	r1, [pc, #432]	@ (80035c0 <HAL_I2C_Master_Receive+0x460>)
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fa27 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0cb      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	2200      	movs	r2, #0
 800346a:	4955      	ldr	r1, [pc, #340]	@ (80035c0 <HAL_I2C_Master_Receive+0x460>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9f9 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e09d      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034f0:	e04e      	b.n	8003590 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fb5e 	bl	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e058      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d124      	bne.n	8003590 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354a:	2b03      	cmp	r3, #3
 800354c:	d107      	bne.n	800355e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800355c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f aeb6 	bne.w	8003306 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	@ 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	00010004 	.word	0x00010004

080035c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	460b      	mov	r3, r1
 80035d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d006      	beq.n	80035ee <I2C_MasterRequestWrite+0x2a>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d003      	beq.n	80035ee <I2C_MasterRequestWrite+0x2a>
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035ec:	d108      	bne.n	8003600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e00b      	b.n	8003618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	2b12      	cmp	r3, #18
 8003606:	d107      	bne.n	8003618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f91d 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800363e:	d103      	bne.n	8003648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e035      	b.n	80036b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003654:	d108      	bne.n	8003668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e01b      	b.n	80036a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	11db      	asrs	r3, r3, #7
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0306 	and.w	r3, r3, #6
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f063 030f 	orn	r3, r3, #15
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	490e      	ldr	r1, [pc, #56]	@ (80036c0 <I2C_MasterRequestWrite+0xfc>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f966 	bl	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e010      	b.n	80036b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003696:	897b      	ldrh	r3, [r7, #10]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4907      	ldr	r1, [pc, #28]	@ (80036c4 <I2C_MasterRequestWrite+0x100>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f956 	bl	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	00010008 	.word	0x00010008
 80036c4:	00010002 	.word	0x00010002

080036c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	460b      	mov	r3, r1
 80036d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d006      	beq.n	8003702 <I2C_MasterRequestRead+0x3a>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d003      	beq.n	8003702 <I2C_MasterRequestRead+0x3a>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003700:	d108      	bne.n	8003714 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e00b      	b.n	800372c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	2b11      	cmp	r3, #17
 800371a:	d107      	bne.n	800372c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800372a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f893 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003752:	d103      	bne.n	800375c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e079      	b.n	8003854 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003768:	d108      	bne.n	800377c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]
 800377a:	e05f      	b.n	800383c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800377c:	897b      	ldrh	r3, [r7, #10]
 800377e:	11db      	asrs	r3, r3, #7
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f063 030f 	orn	r3, r3, #15
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4930      	ldr	r1, [pc, #192]	@ (800385c <I2C_MasterRequestRead+0x194>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f8dc 	bl	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e054      	b.n	8003854 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4929      	ldr	r1, [pc, #164]	@ (8003860 <I2C_MasterRequestRead+0x198>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8cc 	bl	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e044      	b.n	8003854 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f831 	bl	8003864 <I2C_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003816:	d103      	bne.n	8003820 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e017      	b.n	8003854 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003824:	897b      	ldrh	r3, [r7, #10]
 8003826:	11db      	asrs	r3, r3, #7
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f063 030e 	orn	r3, r3, #14
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4907      	ldr	r1, [pc, #28]	@ (8003860 <I2C_MasterRequestRead+0x198>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f888 	bl	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010008 	.word	0x00010008
 8003860:	00010002 	.word	0x00010002

08003864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003874:	e048      	b.n	8003908 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800387c:	d044      	beq.n	8003908 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fe ff39 	bl	80026f4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x30>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d139      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d10d      	bne.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	43da      	mvns	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	e00c      	b.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	43da      	mvns	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4013      	ands	r3, r2
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d116      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e023      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10d      	bne.n	800392e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	43da      	mvns	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	e00c      	b.n	8003948 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	43da      	mvns	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4013      	ands	r3, r2
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	429a      	cmp	r2, r3
 800394c:	d093      	beq.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003966:	e071      	b.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003976:	d123      	bne.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003990:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e067      	b.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c6:	d041      	beq.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fe fe94 	bl	80026f4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d136      	bne.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10c      	bne.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf14      	ite	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	2300      	moveq	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e00b      	b.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e021      	b.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10c      	bne.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4013      	ands	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e00b      	b.n	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f af6d 	bne.w	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa4:	e034      	b.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f8e3 	bl	8003c72 <I2C_IsAcknowledgeFailed>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e034      	b.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003abc:	d028      	beq.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe fe19 	bl	80026f4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11d      	bne.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b80      	cmp	r3, #128	@ 0x80
 8003ae0:	d016      	beq.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e007      	b.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b80      	cmp	r3, #128	@ 0x80
 8003b1c:	d1c3      	bne.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b34:	e034      	b.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f89b 	bl	8003c72 <I2C_IsAcknowledgeFailed>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e034      	b.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b4c:	d028      	beq.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7fe fdd1 	bl	80026f4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11d      	bne.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d016      	beq.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d1c3      	bne.n	8003b36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc4:	e049      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d119      	bne.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0210 	mvn.w	r2, #16
 8003bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e030      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c08:	f7fe fd74 	bl	80026f4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11d      	bne.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b40      	cmp	r3, #64	@ 0x40
 8003c2a:	d016      	beq.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e007      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c64:	2b40      	cmp	r3, #64	@ 0x40
 8003c66:	d1ae      	bne.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c88:	d11b      	bne.n	8003cc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f043 0204 	orr.w	r2, r3, #4
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d129      	bne.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	@ 0x24
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0210 	bic.w	r2, r2, #16
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d12a      	bne.n	8003db8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2224      	movs	r2, #36	@ 0x24
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	f023 030f 	bic.w	r3, r3, #15
 8003d88:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	89fa      	ldrh	r2, [r7, #14]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e267      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d075      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003de6:	4b88      	ldr	r3, [pc, #544]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df2:	4b85      	ldr	r3, [pc, #532]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d112      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4b82      	ldr	r3, [pc, #520]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0a:	d10b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05b      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x108>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d157      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e242      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x74>
 8003e2e:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a75      	ldr	r2, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x98>
 8003e46:	4b70      	ldr	r3, [pc, #448]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b6d      	ldr	r3, [pc, #436]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6c      	ldr	r2, [pc, #432]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e60:	4b69      	ldr	r3, [pc, #420]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a68      	ldr	r2, [pc, #416]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b66      	ldr	r3, [pc, #408]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a65      	ldr	r2, [pc, #404]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc38 	bl	80026f4 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fc34 	bl	80026f4 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e207      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0xc0>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fc24 	bl	80026f4 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe fc20 	bl	80026f4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	@ 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1f3      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	4b51      	ldr	r3, [pc, #324]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xe8>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d063      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ede:	4b4a      	ldr	r3, [pc, #296]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eea:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d11c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b44      	ldr	r3, [pc, #272]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d116      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e1c7      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4937      	ldr	r1, [pc, #220]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	e03a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f38:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_RCC_OscConfig+0x244>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fbd9 	bl	80026f4 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fe fbd5 	bl	80026f4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1a8      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	4b2b      	ldr	r3, [pc, #172]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b28      	ldr	r3, [pc, #160]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4925      	ldr	r1, [pc, #148]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7a:	4b24      	ldr	r3, [pc, #144]	@ (800400c <HAL_RCC_OscConfig+0x244>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe fbb8 	bl	80026f4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fe fbb4 	bl	80026f4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e187      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d036      	beq.n	8004020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <HAL_RCC_OscConfig+0x248>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fe fb98 	bl	80026f4 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fb94 	bl	80026f4 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e167      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x200>
 8003fe6:	e01b      	b.n	8004020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCC_OscConfig+0x248>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fee:	f7fe fb81 	bl	80026f4 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	e00e      	b.n	8004014 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fe fb7d 	bl	80026f4 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d907      	bls.n	8004014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e150      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
 8004008:	40023800 	.word	0x40023800
 800400c:	42470000 	.word	0x42470000
 8004010:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	4b88      	ldr	r3, [pc, #544]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1ea      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8097 	beq.w	800415c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004032:	4b81      	ldr	r3, [pc, #516]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	4b7d      	ldr	r3, [pc, #500]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	4a7c      	ldr	r2, [pc, #496]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	@ 0x40
 800404e:	4b7a      	ldr	r3, [pc, #488]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b77      	ldr	r3, [pc, #476]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d118      	bne.n	800409c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	4b74      	ldr	r3, [pc, #464]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a73      	ldr	r2, [pc, #460]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fe fb3d 	bl	80026f4 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fe fb39 	bl	80026f4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e10c      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x2ea>
 80040a4:	4b64      	ldr	r3, [pc, #400]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	4a63      	ldr	r2, [pc, #396]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b0:	e01c      	b.n	80040ec <HAL_RCC_OscConfig+0x324>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x30c>
 80040ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	4a5e      	ldr	r2, [pc, #376]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d2:	e00b      	b.n	80040ec <HAL_RCC_OscConfig+0x324>
 80040d4:	4b58      	ldr	r3, [pc, #352]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d8:	4a57      	ldr	r2, [pc, #348]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e0:	4b55      	ldr	r3, [pc, #340]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	4a54      	ldr	r2, [pc, #336]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040e6:	f023 0304 	bic.w	r3, r3, #4
 80040ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d015      	beq.n	8004120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe fafe 	bl	80026f4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fe fafa 	bl	80026f4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0cb      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	4b49      	ldr	r3, [pc, #292]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ee      	beq.n	80040fc <HAL_RCC_OscConfig+0x334>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004120:	f7fe fae8 	bl	80026f4 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004126:	e00a      	b.n	800413e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fe fae4 	bl	80026f4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e0b5      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	4b3e      	ldr	r3, [pc, #248]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1ee      	bne.n	8004128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004150:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	4a38      	ldr	r2, [pc, #224]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800415a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a1 	beq.w	80042a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004166:	4b34      	ldr	r3, [pc, #208]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b08      	cmp	r3, #8
 8004170:	d05c      	beq.n	800422c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d141      	bne.n	80041fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b31      	ldr	r3, [pc, #196]	@ (8004240 <HAL_RCC_OscConfig+0x478>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fab8 	bl	80026f4 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fab4 	bl	80026f4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e087      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b27      	ldr	r3, [pc, #156]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	3b01      	subs	r3, #1
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	491b      	ldr	r1, [pc, #108]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <HAL_RCC_OscConfig+0x478>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fe fa8d 	bl	80026f4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041de:	f7fe fa89 	bl	80026f4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e05c      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x416>
 80041fc:	e054      	b.n	80042a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fe:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <HAL_RCC_OscConfig+0x478>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fe fa76 	bl	80026f4 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fe fa72 	bl	80026f4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e045      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x444>
 800422a:	e03d      	b.n	80042a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d107      	bne.n	8004244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e038      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
 8004238:	40023800 	.word	0x40023800
 800423c:	40007000 	.word	0x40007000
 8004240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004244:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d028      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d121      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d11a      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800427a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	4293      	cmp	r3, r2
 800427e:	d111      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	3b01      	subs	r3, #1
 800428e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0cc      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b68      	ldr	r3, [pc, #416]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d90c      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b65      	ldr	r3, [pc, #404]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a58      	ldr	r2, [pc, #352]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004316:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a52      	ldr	r2, [pc, #328]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800432e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d044      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d119      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	2b03      	cmp	r3, #3
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b3f      	ldr	r3, [pc, #252]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3b      	ldr	r3, [pc, #236]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e067      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b37      	ldr	r3, [pc, #220]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4934      	ldr	r1, [pc, #208]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fe f9a4 	bl	80026f4 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fe f9a0 	bl	80026f4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e04f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d20c      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b22      	ldr	r3, [pc, #136]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442a:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	@ (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	@ (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe f904 	bl	800266c <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00
 8004474:	40023800 	.word	0x40023800
 8004478:	08005a90 	.word	0x08005a90
 800447c:	20000000 	.word	0x20000000
 8004480:	20000024 	.word	0x20000024

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b094      	sub	sp, #80	@ 0x50
 800448a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	4b79      	ldr	r3, [pc, #484]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f200 80e1 	bhi.w	8004670 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x34>
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x3a>
 80044b6:	e0db      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b73      	ldr	r3, [pc, #460]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044bc:	e0db      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044be:	4b73      	ldr	r3, [pc, #460]	@ (800468c <HAL_RCC_GetSysClockFreq+0x208>)
 80044c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044c2:	e0d8      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d063      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b6a      	ldr	r3, [pc, #424]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	2200      	movs	r2, #0
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	f04f 0000 	mov.w	r0, #0
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	0159      	lsls	r1, r3, #5
 8004504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004508:	0150      	lsls	r0, r2, #5
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4621      	mov	r1, r4
 8004510:	1a51      	subs	r1, r2, r1
 8004512:	6139      	str	r1, [r7, #16]
 8004514:	4629      	mov	r1, r5
 8004516:	eb63 0301 	sbc.w	r3, r3, r1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004528:	4659      	mov	r1, fp
 800452a:	018b      	lsls	r3, r1, #6
 800452c:	4651      	mov	r1, sl
 800452e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004532:	4651      	mov	r1, sl
 8004534:	018a      	lsls	r2, r1, #6
 8004536:	4651      	mov	r1, sl
 8004538:	ebb2 0801 	subs.w	r8, r2, r1
 800453c:	4659      	mov	r1, fp
 800453e:	eb63 0901 	sbc.w	r9, r3, r1
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800454e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004556:	4690      	mov	r8, r2
 8004558:	4699      	mov	r9, r3
 800455a:	4623      	mov	r3, r4
 800455c:	eb18 0303 	adds.w	r3, r8, r3
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	462b      	mov	r3, r5
 8004564:	eb49 0303 	adc.w	r3, r9, r3
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004576:	4629      	mov	r1, r5
 8004578:	024b      	lsls	r3, r1, #9
 800457a:	4621      	mov	r1, r4
 800457c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004580:	4621      	mov	r1, r4
 8004582:	024a      	lsls	r2, r1, #9
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458a:	2200      	movs	r2, #0
 800458c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004594:	f7fb fed4 	bl	8000340 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4613      	mov	r3, r2
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a0:	e058      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a2:	4b38      	ldr	r3, [pc, #224]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	2200      	movs	r2, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	4611      	mov	r1, r2
 80045ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	2300      	movs	r3, #0
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	f04f 0000 	mov.w	r0, #0
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	0159      	lsls	r1, r3, #5
 80045ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ce:	0150      	lsls	r0, r2, #5
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4641      	mov	r1, r8
 80045d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045da:	4649      	mov	r1, r9
 80045dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045f4:	ebb2 040a 	subs.w	r4, r2, sl
 80045f8:	eb63 050b 	sbc.w	r5, r3, fp
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	00eb      	lsls	r3, r5, #3
 8004606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460a:	00e2      	lsls	r2, r4, #3
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	4643      	mov	r3, r8
 8004612:	18e3      	adds	r3, r4, r3
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	464b      	mov	r3, r9
 8004618:	eb45 0303 	adc.w	r3, r5, r3
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800462a:	4629      	mov	r1, r5
 800462c:	028b      	lsls	r3, r1, #10
 800462e:	4621      	mov	r1, r4
 8004630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004634:	4621      	mov	r1, r4
 8004636:	028a      	lsls	r2, r1, #10
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800463e:	2200      	movs	r2, #0
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	61fa      	str	r2, [r7, #28]
 8004644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004648:	f7fb fe7a 	bl	8000340 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4613      	mov	r3, r2
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	3301      	adds	r3, #1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004664:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800466e:	e002      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x204>)
 8004672:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004678:	4618      	mov	r0, r3
 800467a:	3750      	adds	r7, #80	@ 0x50
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200

08004690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000000 	.word	0x20000000

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ac:	f7ff fff0 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08005aa0 	.word	0x08005aa0

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046d4:	f7ff ffdc 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	0b5b      	lsrs	r3, r3, #13
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800
 80046f4:	08005aa0 	.word	0x08005aa0

080046f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e042      	b.n	8004790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fa16 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800473a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f973 	bl	8004a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d175      	bne.n	80048a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_UART_Transmit+0x2c>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e06e      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	@ 0x21
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d6:	f7fd ff8d 	bl	80026f4 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x6c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800480c:	e02e      	b.n	800486c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	@ 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f848 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e03a      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cb      	bne.n	800480e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	@ 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f814 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e006      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b086      	sub	sp, #24
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	e03b      	b.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048c6:	d037      	beq.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7fd ff14 	bl	80026f4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <UART_WaitOnFlagUntilTimeout+0x30>
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e03a      	b.n	8004958 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d023      	beq.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b80      	cmp	r3, #128	@ 0x80
 80048f4:	d020      	beq.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d01d      	beq.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b08      	cmp	r3, #8
 8004908:	d116      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f81d 	bl	8004960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2208      	movs	r2, #8
 800492a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e00f      	b.n	8004958 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	429a      	cmp	r2, r3
 8004954:	d0b4      	beq.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b095      	sub	sp, #84	@ 0x54
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004988:	643a      	str	r2, [r7, #64]	@ 0x40
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800498e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d119      	bne.n	8004a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f023 0310 	bic.w	r3, r3, #16
 80049ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f8:	61ba      	str	r2, [r7, #24]
 80049fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6979      	ldr	r1, [r7, #20]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	613b      	str	r3, [r7, #16]
   return(result);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a1a:	bf00      	nop
 8004a1c:	3754      	adds	r7, #84	@ 0x54
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a2c:	b0c0      	sub	sp, #256	@ 0x100
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	68d9      	ldr	r1, [r3, #12]
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	ea40 0301 	orr.w	r3, r0, r1
 8004a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a80:	f021 010c 	bic.w	r1, r1, #12
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa2:	6999      	ldr	r1, [r3, #24]
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	ea40 0301 	orr.w	r3, r0, r1
 8004aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf4 <UART_SetConfig+0x2cc>)
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d005      	beq.n	8004ac8 <UART_SetConfig+0xa0>
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8004cf8 <UART_SetConfig+0x2d0>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d104      	bne.n	8004ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7ff fe02 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8004acc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ad0:	e003      	b.n	8004ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ad2:	f7ff fde9 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8004ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae4:	f040 810c 	bne.w	8004d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004af2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b02:	415b      	adcs	r3, r3
 8004b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	eb12 0801 	adds.w	r8, r2, r1
 8004b10:	4629      	mov	r1, r5
 8004b12:	eb43 0901 	adc.w	r9, r3, r1
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	4699      	mov	r9, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	eb18 0303 	adds.w	r3, r8, r3
 8004b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b38:	462b      	mov	r3, r5
 8004b3a:	eb49 0303 	adc.w	r3, r9, r3
 8004b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b56:	460b      	mov	r3, r1
 8004b58:	18db      	adds	r3, r3, r3
 8004b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	eb42 0303 	adc.w	r3, r2, r3
 8004b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b6c:	f7fb fbe8 	bl	8000340 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4b61      	ldr	r3, [pc, #388]	@ (8004cfc <UART_SetConfig+0x2d4>)
 8004b76:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	011c      	lsls	r4, r3, #4
 8004b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	1891      	adds	r1, r2, r2
 8004b96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b98:	415b      	adcs	r3, r3
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc0:	4692      	mov	sl, r2
 8004bc2:	469b      	mov	fp, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8004bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004be4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bec:	460b      	mov	r3, r1
 8004bee:	18db      	adds	r3, r3, r3
 8004bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	eb42 0303 	adc.w	r3, r2, r3
 8004bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c02:	f7fb fb9d 	bl	8000340 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004cfc <UART_SetConfig+0x2d4>)
 8004c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2264      	movs	r2, #100	@ 0x64
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	1acb      	subs	r3, r1, r3
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c22:	4b36      	ldr	r3, [pc, #216]	@ (8004cfc <UART_SetConfig+0x2d4>)
 8004c24:	fba3 2302 	umull	r2, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c30:	441c      	add	r4, r3
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c54:	4641      	mov	r1, r8
 8004c56:	1851      	adds	r1, r2, r1
 8004c58:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	414b      	adcs	r3, r1
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c6c:	4659      	mov	r1, fp
 8004c6e:	00cb      	lsls	r3, r1, #3
 8004c70:	4651      	mov	r1, sl
 8004c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c76:	4651      	mov	r1, sl
 8004c78:	00ca      	lsls	r2, r1, #3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4642      	mov	r2, r8
 8004c82:	189b      	adds	r3, r3, r2
 8004c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c88:	464b      	mov	r3, r9
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	eb42 0303 	adc.w	r3, r2, r3
 8004c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ca8:	460b      	mov	r3, r1
 8004caa:	18db      	adds	r3, r3, r3
 8004cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cae:	4613      	mov	r3, r2
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cbe:	f7fb fb3f 	bl	8000340 <__aeabi_uldivmod>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <UART_SetConfig+0x2d4>)
 8004cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	2164      	movs	r1, #100	@ 0x64
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	3332      	adds	r3, #50	@ 0x32
 8004cda:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <UART_SetConfig+0x2d4>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	f003 0207 	and.w	r2, r3, #7
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4422      	add	r2, r4
 8004cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cf0:	e106      	b.n	8004f00 <UART_SetConfig+0x4d8>
 8004cf2:	bf00      	nop
 8004cf4:	40011000 	.word	0x40011000
 8004cf8:	40011400 	.word	0x40011400
 8004cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d12:	4642      	mov	r2, r8
 8004d14:	464b      	mov	r3, r9
 8004d16:	1891      	adds	r1, r2, r2
 8004d18:	6239      	str	r1, [r7, #32]
 8004d1a:	415b      	adcs	r3, r3
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d22:	4641      	mov	r1, r8
 8004d24:	1854      	adds	r4, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb43 0501 	adc.w	r5, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	00eb      	lsls	r3, r5, #3
 8004d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3a:	00e2      	lsls	r2, r4, #3
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	461d      	mov	r5, r3
 8004d40:	4643      	mov	r3, r8
 8004d42:	18e3      	adds	r3, r4, r3
 8004d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d48:	464b      	mov	r3, r9
 8004d4a:	eb45 0303 	adc.w	r3, r5, r3
 8004d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d6e:	4629      	mov	r1, r5
 8004d70:	008b      	lsls	r3, r1, #2
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d78:	4621      	mov	r1, r4
 8004d7a:	008a      	lsls	r2, r1, #2
 8004d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d80:	f7fb fade 	bl	8000340 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b60      	ldr	r3, [pc, #384]	@ (8004f0c <UART_SetConfig+0x4e4>)
 8004d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	011c      	lsls	r4, r3, #4
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	61b9      	str	r1, [r7, #24]
 8004dac:	415b      	adcs	r3, r3
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db4:	4641      	mov	r1, r8
 8004db6:	1851      	adds	r1, r2, r1
 8004db8:	6139      	str	r1, [r7, #16]
 8004dba:	4649      	mov	r1, r9
 8004dbc:	414b      	adcs	r3, r1
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dcc:	4659      	mov	r1, fp
 8004dce:	00cb      	lsls	r3, r1, #3
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	00ca      	lsls	r2, r1, #3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	4642      	mov	r2, r8
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004de8:	464b      	mov	r3, r9
 8004dea:	460a      	mov	r2, r1
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	008b      	lsls	r3, r1, #2
 8004e10:	4641      	mov	r1, r8
 8004e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e16:	4641      	mov	r1, r8
 8004e18:	008a      	lsls	r2, r1, #2
 8004e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e1e:	f7fb fa8f 	bl	8000340 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	4b38      	ldr	r3, [pc, #224]	@ (8004f0c <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2264      	movs	r2, #100	@ 0x64
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	1acb      	subs	r3, r1, r3
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	3332      	adds	r3, #50	@ 0x32
 8004e3c:	4a33      	ldr	r2, [pc, #204]	@ (8004f0c <UART_SetConfig+0x4e4>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e48:	441c      	add	r4, r3
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e52:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	415b      	adcs	r3, r3
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e68:	4641      	mov	r1, r8
 8004e6a:	1851      	adds	r1, r2, r1
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	4649      	mov	r1, r9
 8004e70:	414b      	adcs	r3, r1
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e80:	4659      	mov	r1, fp
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4642      	mov	r2, r8
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eae:	667a      	str	r2, [r7, #100]	@ 0x64
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	008b      	lsls	r3, r1, #2
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	008a      	lsls	r2, r1, #2
 8004eca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ece:	f7fb fa37 	bl	8000340 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <UART_SetConfig+0x4e4>)
 8004ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	2164      	movs	r1, #100	@ 0x64
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	3332      	adds	r3, #50	@ 0x32
 8004eea:	4a08      	ldr	r2, [pc, #32]	@ (8004f0c <UART_SetConfig+0x4e4>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 020f 	and.w	r2, r3, #15
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4422      	add	r2, r4
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f06:	46bd      	mov	sp, r7
 8004f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0c:	51eb851f 	.word	0x51eb851f

08004f10 <sniprintf>:
 8004f10:	b40c      	push	{r2, r3}
 8004f12:	b530      	push	{r4, r5, lr}
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <sniprintf+0x68>)
 8004f16:	1e0c      	subs	r4, r1, #0
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	b09d      	sub	sp, #116	@ 0x74
 8004f1c:	da08      	bge.n	8004f30 <sniprintf+0x20>
 8004f1e:	238b      	movs	r3, #139	@ 0x8b
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f26:	b01d      	add	sp, #116	@ 0x74
 8004f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f2c:	b002      	add	sp, #8
 8004f2e:	4770      	bx	lr
 8004f30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004f3e:	bf14      	ite	ne
 8004f40:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004f44:	4623      	moveq	r3, r4
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	9307      	str	r3, [sp, #28]
 8004f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f4e:	9002      	str	r0, [sp, #8]
 8004f50:	9006      	str	r0, [sp, #24]
 8004f52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f58:	ab21      	add	r3, sp, #132	@ 0x84
 8004f5a:	a902      	add	r1, sp, #8
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	f000 f994 	bl	800528c <_svfiprintf_r>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	bfbc      	itt	lt
 8004f68:	238b      	movlt	r3, #139	@ 0x8b
 8004f6a:	602b      	strlt	r3, [r5, #0]
 8004f6c:	2c00      	cmp	r4, #0
 8004f6e:	d0da      	beq.n	8004f26 <sniprintf+0x16>
 8004f70:	9b02      	ldr	r3, [sp, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e7d6      	b.n	8004f26 <sniprintf+0x16>
 8004f78:	2000002c 	.word	0x2000002c

08004f7c <memset>:
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <__errno>:
 8004f8c:	4b01      	ldr	r3, [pc, #4]	@ (8004f94 <__errno+0x8>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2000002c 	.word	0x2000002c

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	@ (8004fdc <__libc_init_array+0x44>)
 8004fac:	f000 fc64 	bl	8005878 <_init>
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	08005ae8 	.word	0x08005ae8
 8004fd4:	08005ae8 	.word	0x08005ae8
 8004fd8:	08005ae8 	.word	0x08005ae8
 8004fdc:	08005aec 	.word	0x08005aec

08004fe0 <__retarget_lock_acquire_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <__retarget_lock_release_recursive>:
 8004fe2:	4770      	bx	lr

08004fe4 <_free_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	d041      	beq.n	8005070 <_free_r+0x8c>
 8004fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff0:	1f0c      	subs	r4, r1, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bfb8      	it	lt
 8004ff6:	18e4      	addlt	r4, r4, r3
 8004ff8:	f000 f8e0 	bl	80051bc <__malloc_lock>
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8005074 <_free_r+0x90>)
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	b933      	cbnz	r3, 8005010 <_free_r+0x2c>
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	6014      	str	r4, [r2, #0]
 8005006:	4628      	mov	r0, r5
 8005008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800500c:	f000 b8dc 	b.w	80051c8 <__malloc_unlock>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d908      	bls.n	8005026 <_free_r+0x42>
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	1821      	adds	r1, r4, r0
 8005018:	428b      	cmp	r3, r1
 800501a:	bf01      	itttt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	1809      	addeq	r1, r1, r0
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	e7ed      	b.n	8005002 <_free_r+0x1e>
 8005026:	461a      	mov	r2, r3
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b10b      	cbz	r3, 8005030 <_free_r+0x4c>
 800502c:	42a3      	cmp	r3, r4
 800502e:	d9fa      	bls.n	8005026 <_free_r+0x42>
 8005030:	6811      	ldr	r1, [r2, #0]
 8005032:	1850      	adds	r0, r2, r1
 8005034:	42a0      	cmp	r0, r4
 8005036:	d10b      	bne.n	8005050 <_free_r+0x6c>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	4401      	add	r1, r0
 800503c:	1850      	adds	r0, r2, r1
 800503e:	4283      	cmp	r3, r0
 8005040:	6011      	str	r1, [r2, #0]
 8005042:	d1e0      	bne.n	8005006 <_free_r+0x22>
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	6053      	str	r3, [r2, #4]
 800504a:	4408      	add	r0, r1
 800504c:	6010      	str	r0, [r2, #0]
 800504e:	e7da      	b.n	8005006 <_free_r+0x22>
 8005050:	d902      	bls.n	8005058 <_free_r+0x74>
 8005052:	230c      	movs	r3, #12
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	e7d6      	b.n	8005006 <_free_r+0x22>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	1821      	adds	r1, r4, r0
 800505c:	428b      	cmp	r3, r1
 800505e:	bf04      	itt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	bf04      	itt	eq
 8005068:	1809      	addeq	r1, r1, r0
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	6054      	str	r4, [r2, #4]
 800506e:	e7ca      	b.n	8005006 <_free_r+0x22>
 8005070:	bd38      	pop	{r3, r4, r5, pc}
 8005072:	bf00      	nop
 8005074:	200003dc 	.word	0x200003dc

08005078 <sbrk_aligned>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4e0f      	ldr	r6, [pc, #60]	@ (80050b8 <sbrk_aligned+0x40>)
 800507c:	460c      	mov	r4, r1
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	4605      	mov	r5, r0
 8005082:	b911      	cbnz	r1, 800508a <sbrk_aligned+0x12>
 8005084:	f000 fba4 	bl	80057d0 <_sbrk_r>
 8005088:	6030      	str	r0, [r6, #0]
 800508a:	4621      	mov	r1, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f000 fb9f 	bl	80057d0 <_sbrk_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d103      	bne.n	800509e <sbrk_aligned+0x26>
 8005096:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800509a:	4620      	mov	r0, r4
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	1cc4      	adds	r4, r0, #3
 80050a0:	f024 0403 	bic.w	r4, r4, #3
 80050a4:	42a0      	cmp	r0, r4
 80050a6:	d0f8      	beq.n	800509a <sbrk_aligned+0x22>
 80050a8:	1a21      	subs	r1, r4, r0
 80050aa:	4628      	mov	r0, r5
 80050ac:	f000 fb90 	bl	80057d0 <_sbrk_r>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1f2      	bne.n	800509a <sbrk_aligned+0x22>
 80050b4:	e7ef      	b.n	8005096 <sbrk_aligned+0x1e>
 80050b6:	bf00      	nop
 80050b8:	200003d8 	.word	0x200003d8

080050bc <_malloc_r>:
 80050bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c0:	1ccd      	adds	r5, r1, #3
 80050c2:	f025 0503 	bic.w	r5, r5, #3
 80050c6:	3508      	adds	r5, #8
 80050c8:	2d0c      	cmp	r5, #12
 80050ca:	bf38      	it	cc
 80050cc:	250c      	movcc	r5, #12
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	4606      	mov	r6, r0
 80050d2:	db01      	blt.n	80050d8 <_malloc_r+0x1c>
 80050d4:	42a9      	cmp	r1, r5
 80050d6:	d904      	bls.n	80050e2 <_malloc_r+0x26>
 80050d8:	230c      	movs	r3, #12
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051b8 <_malloc_r+0xfc>
 80050e6:	f000 f869 	bl	80051bc <__malloc_lock>
 80050ea:	f8d8 3000 	ldr.w	r3, [r8]
 80050ee:	461c      	mov	r4, r3
 80050f0:	bb44      	cbnz	r4, 8005144 <_malloc_r+0x88>
 80050f2:	4629      	mov	r1, r5
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff ffbf 	bl	8005078 <sbrk_aligned>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	4604      	mov	r4, r0
 80050fe:	d158      	bne.n	80051b2 <_malloc_r+0xf6>
 8005100:	f8d8 4000 	ldr.w	r4, [r8]
 8005104:	4627      	mov	r7, r4
 8005106:	2f00      	cmp	r7, #0
 8005108:	d143      	bne.n	8005192 <_malloc_r+0xd6>
 800510a:	2c00      	cmp	r4, #0
 800510c:	d04b      	beq.n	80051a6 <_malloc_r+0xea>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	4639      	mov	r1, r7
 8005112:	4630      	mov	r0, r6
 8005114:	eb04 0903 	add.w	r9, r4, r3
 8005118:	f000 fb5a 	bl	80057d0 <_sbrk_r>
 800511c:	4581      	cmp	r9, r0
 800511e:	d142      	bne.n	80051a6 <_malloc_r+0xea>
 8005120:	6821      	ldr	r1, [r4, #0]
 8005122:	1a6d      	subs	r5, r5, r1
 8005124:	4629      	mov	r1, r5
 8005126:	4630      	mov	r0, r6
 8005128:	f7ff ffa6 	bl	8005078 <sbrk_aligned>
 800512c:	3001      	adds	r0, #1
 800512e:	d03a      	beq.n	80051a6 <_malloc_r+0xea>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	442b      	add	r3, r5
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	f8d8 3000 	ldr.w	r3, [r8]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	bb62      	cbnz	r2, 8005198 <_malloc_r+0xdc>
 800513e:	f8c8 7000 	str.w	r7, [r8]
 8005142:	e00f      	b.n	8005164 <_malloc_r+0xa8>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	1b52      	subs	r2, r2, r5
 8005148:	d420      	bmi.n	800518c <_malloc_r+0xd0>
 800514a:	2a0b      	cmp	r2, #11
 800514c:	d917      	bls.n	800517e <_malloc_r+0xc2>
 800514e:	1961      	adds	r1, r4, r5
 8005150:	42a3      	cmp	r3, r4
 8005152:	6025      	str	r5, [r4, #0]
 8005154:	bf18      	it	ne
 8005156:	6059      	strne	r1, [r3, #4]
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	bf08      	it	eq
 800515c:	f8c8 1000 	streq.w	r1, [r8]
 8005160:	5162      	str	r2, [r4, r5]
 8005162:	604b      	str	r3, [r1, #4]
 8005164:	4630      	mov	r0, r6
 8005166:	f000 f82f 	bl	80051c8 <__malloc_unlock>
 800516a:	f104 000b 	add.w	r0, r4, #11
 800516e:	1d23      	adds	r3, r4, #4
 8005170:	f020 0007 	bic.w	r0, r0, #7
 8005174:	1ac2      	subs	r2, r0, r3
 8005176:	bf1c      	itt	ne
 8005178:	1a1b      	subne	r3, r3, r0
 800517a:	50a3      	strne	r3, [r4, r2]
 800517c:	e7af      	b.n	80050de <_malloc_r+0x22>
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	42a3      	cmp	r3, r4
 8005182:	bf0c      	ite	eq
 8005184:	f8c8 2000 	streq.w	r2, [r8]
 8005188:	605a      	strne	r2, [r3, #4]
 800518a:	e7eb      	b.n	8005164 <_malloc_r+0xa8>
 800518c:	4623      	mov	r3, r4
 800518e:	6864      	ldr	r4, [r4, #4]
 8005190:	e7ae      	b.n	80050f0 <_malloc_r+0x34>
 8005192:	463c      	mov	r4, r7
 8005194:	687f      	ldr	r7, [r7, #4]
 8005196:	e7b6      	b.n	8005106 <_malloc_r+0x4a>
 8005198:	461a      	mov	r2, r3
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	42a3      	cmp	r3, r4
 800519e:	d1fb      	bne.n	8005198 <_malloc_r+0xdc>
 80051a0:	2300      	movs	r3, #0
 80051a2:	6053      	str	r3, [r2, #4]
 80051a4:	e7de      	b.n	8005164 <_malloc_r+0xa8>
 80051a6:	230c      	movs	r3, #12
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	4630      	mov	r0, r6
 80051ac:	f000 f80c 	bl	80051c8 <__malloc_unlock>
 80051b0:	e794      	b.n	80050dc <_malloc_r+0x20>
 80051b2:	6005      	str	r5, [r0, #0]
 80051b4:	e7d6      	b.n	8005164 <_malloc_r+0xa8>
 80051b6:	bf00      	nop
 80051b8:	200003dc 	.word	0x200003dc

080051bc <__malloc_lock>:
 80051bc:	4801      	ldr	r0, [pc, #4]	@ (80051c4 <__malloc_lock+0x8>)
 80051be:	f7ff bf0f 	b.w	8004fe0 <__retarget_lock_acquire_recursive>
 80051c2:	bf00      	nop
 80051c4:	200003d4 	.word	0x200003d4

080051c8 <__malloc_unlock>:
 80051c8:	4801      	ldr	r0, [pc, #4]	@ (80051d0 <__malloc_unlock+0x8>)
 80051ca:	f7ff bf0a 	b.w	8004fe2 <__retarget_lock_release_recursive>
 80051ce:	bf00      	nop
 80051d0:	200003d4 	.word	0x200003d4

080051d4 <__ssputs_r>:
 80051d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	688e      	ldr	r6, [r1, #8]
 80051da:	461f      	mov	r7, r3
 80051dc:	42be      	cmp	r6, r7
 80051de:	680b      	ldr	r3, [r1, #0]
 80051e0:	4682      	mov	sl, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	4690      	mov	r8, r2
 80051e6:	d82d      	bhi.n	8005244 <__ssputs_r+0x70>
 80051e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051f0:	d026      	beq.n	8005240 <__ssputs_r+0x6c>
 80051f2:	6965      	ldr	r5, [r4, #20]
 80051f4:	6909      	ldr	r1, [r1, #16]
 80051f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051fa:	eba3 0901 	sub.w	r9, r3, r1
 80051fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005202:	1c7b      	adds	r3, r7, #1
 8005204:	444b      	add	r3, r9
 8005206:	106d      	asrs	r5, r5, #1
 8005208:	429d      	cmp	r5, r3
 800520a:	bf38      	it	cc
 800520c:	461d      	movcc	r5, r3
 800520e:	0553      	lsls	r3, r2, #21
 8005210:	d527      	bpl.n	8005262 <__ssputs_r+0x8e>
 8005212:	4629      	mov	r1, r5
 8005214:	f7ff ff52 	bl	80050bc <_malloc_r>
 8005218:	4606      	mov	r6, r0
 800521a:	b360      	cbz	r0, 8005276 <__ssputs_r+0xa2>
 800521c:	6921      	ldr	r1, [r4, #16]
 800521e:	464a      	mov	r2, r9
 8005220:	f000 fae6 	bl	80057f0 <memcpy>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800522a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800522e:	81a3      	strh	r3, [r4, #12]
 8005230:	6126      	str	r6, [r4, #16]
 8005232:	6165      	str	r5, [r4, #20]
 8005234:	444e      	add	r6, r9
 8005236:	eba5 0509 	sub.w	r5, r5, r9
 800523a:	6026      	str	r6, [r4, #0]
 800523c:	60a5      	str	r5, [r4, #8]
 800523e:	463e      	mov	r6, r7
 8005240:	42be      	cmp	r6, r7
 8005242:	d900      	bls.n	8005246 <__ssputs_r+0x72>
 8005244:	463e      	mov	r6, r7
 8005246:	6820      	ldr	r0, [r4, #0]
 8005248:	4632      	mov	r2, r6
 800524a:	4641      	mov	r1, r8
 800524c:	f000 faa6 	bl	800579c <memmove>
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	1b9b      	subs	r3, r3, r6
 8005254:	60a3      	str	r3, [r4, #8]
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	4433      	add	r3, r6
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	2000      	movs	r0, #0
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	462a      	mov	r2, r5
 8005264:	f000 fad2 	bl	800580c <_realloc_r>
 8005268:	4606      	mov	r6, r0
 800526a:	2800      	cmp	r0, #0
 800526c:	d1e0      	bne.n	8005230 <__ssputs_r+0x5c>
 800526e:	6921      	ldr	r1, [r4, #16]
 8005270:	4650      	mov	r0, sl
 8005272:	f7ff feb7 	bl	8004fe4 <_free_r>
 8005276:	230c      	movs	r3, #12
 8005278:	f8ca 3000 	str.w	r3, [sl]
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005282:	81a3      	strh	r3, [r4, #12]
 8005284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005288:	e7e9      	b.n	800525e <__ssputs_r+0x8a>
	...

0800528c <_svfiprintf_r>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	4698      	mov	r8, r3
 8005292:	898b      	ldrh	r3, [r1, #12]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	b09d      	sub	sp, #116	@ 0x74
 8005298:	4607      	mov	r7, r0
 800529a:	460d      	mov	r5, r1
 800529c:	4614      	mov	r4, r2
 800529e:	d510      	bpl.n	80052c2 <_svfiprintf_r+0x36>
 80052a0:	690b      	ldr	r3, [r1, #16]
 80052a2:	b973      	cbnz	r3, 80052c2 <_svfiprintf_r+0x36>
 80052a4:	2140      	movs	r1, #64	@ 0x40
 80052a6:	f7ff ff09 	bl	80050bc <_malloc_r>
 80052aa:	6028      	str	r0, [r5, #0]
 80052ac:	6128      	str	r0, [r5, #16]
 80052ae:	b930      	cbnz	r0, 80052be <_svfiprintf_r+0x32>
 80052b0:	230c      	movs	r3, #12
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052b8:	b01d      	add	sp, #116	@ 0x74
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	2340      	movs	r3, #64	@ 0x40
 80052c0:	616b      	str	r3, [r5, #20]
 80052c2:	2300      	movs	r3, #0
 80052c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c6:	2320      	movs	r3, #32
 80052c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80052d0:	2330      	movs	r3, #48	@ 0x30
 80052d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005470 <_svfiprintf_r+0x1e4>
 80052d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052da:	f04f 0901 	mov.w	r9, #1
 80052de:	4623      	mov	r3, r4
 80052e0:	469a      	mov	sl, r3
 80052e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052e6:	b10a      	cbz	r2, 80052ec <_svfiprintf_r+0x60>
 80052e8:	2a25      	cmp	r2, #37	@ 0x25
 80052ea:	d1f9      	bne.n	80052e0 <_svfiprintf_r+0x54>
 80052ec:	ebba 0b04 	subs.w	fp, sl, r4
 80052f0:	d00b      	beq.n	800530a <_svfiprintf_r+0x7e>
 80052f2:	465b      	mov	r3, fp
 80052f4:	4622      	mov	r2, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	4638      	mov	r0, r7
 80052fa:	f7ff ff6b 	bl	80051d4 <__ssputs_r>
 80052fe:	3001      	adds	r0, #1
 8005300:	f000 80a7 	beq.w	8005452 <_svfiprintf_r+0x1c6>
 8005304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005306:	445a      	add	r2, fp
 8005308:	9209      	str	r2, [sp, #36]	@ 0x24
 800530a:	f89a 3000 	ldrb.w	r3, [sl]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 809f 	beq.w	8005452 <_svfiprintf_r+0x1c6>
 8005314:	2300      	movs	r3, #0
 8005316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800531a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800531e:	f10a 0a01 	add.w	sl, sl, #1
 8005322:	9304      	str	r3, [sp, #16]
 8005324:	9307      	str	r3, [sp, #28]
 8005326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800532a:	931a      	str	r3, [sp, #104]	@ 0x68
 800532c:	4654      	mov	r4, sl
 800532e:	2205      	movs	r2, #5
 8005330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005334:	484e      	ldr	r0, [pc, #312]	@ (8005470 <_svfiprintf_r+0x1e4>)
 8005336:	f7fa ff63 	bl	8000200 <memchr>
 800533a:	9a04      	ldr	r2, [sp, #16]
 800533c:	b9d8      	cbnz	r0, 8005376 <_svfiprintf_r+0xea>
 800533e:	06d0      	lsls	r0, r2, #27
 8005340:	bf44      	itt	mi
 8005342:	2320      	movmi	r3, #32
 8005344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005348:	0711      	lsls	r1, r2, #28
 800534a:	bf44      	itt	mi
 800534c:	232b      	movmi	r3, #43	@ 0x2b
 800534e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005352:	f89a 3000 	ldrb.w	r3, [sl]
 8005356:	2b2a      	cmp	r3, #42	@ 0x2a
 8005358:	d015      	beq.n	8005386 <_svfiprintf_r+0xfa>
 800535a:	9a07      	ldr	r2, [sp, #28]
 800535c:	4654      	mov	r4, sl
 800535e:	2000      	movs	r0, #0
 8005360:	f04f 0c0a 	mov.w	ip, #10
 8005364:	4621      	mov	r1, r4
 8005366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800536a:	3b30      	subs	r3, #48	@ 0x30
 800536c:	2b09      	cmp	r3, #9
 800536e:	d94b      	bls.n	8005408 <_svfiprintf_r+0x17c>
 8005370:	b1b0      	cbz	r0, 80053a0 <_svfiprintf_r+0x114>
 8005372:	9207      	str	r2, [sp, #28]
 8005374:	e014      	b.n	80053a0 <_svfiprintf_r+0x114>
 8005376:	eba0 0308 	sub.w	r3, r0, r8
 800537a:	fa09 f303 	lsl.w	r3, r9, r3
 800537e:	4313      	orrs	r3, r2
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	46a2      	mov	sl, r4
 8005384:	e7d2      	b.n	800532c <_svfiprintf_r+0xa0>
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	1d19      	adds	r1, r3, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	9103      	str	r1, [sp, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	bfbb      	ittet	lt
 8005392:	425b      	neglt	r3, r3
 8005394:	f042 0202 	orrlt.w	r2, r2, #2
 8005398:	9307      	strge	r3, [sp, #28]
 800539a:	9307      	strlt	r3, [sp, #28]
 800539c:	bfb8      	it	lt
 800539e:	9204      	strlt	r2, [sp, #16]
 80053a0:	7823      	ldrb	r3, [r4, #0]
 80053a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053a4:	d10a      	bne.n	80053bc <_svfiprintf_r+0x130>
 80053a6:	7863      	ldrb	r3, [r4, #1]
 80053a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053aa:	d132      	bne.n	8005412 <_svfiprintf_r+0x186>
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	1d1a      	adds	r2, r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	9203      	str	r2, [sp, #12]
 80053b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053b8:	3402      	adds	r4, #2
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005480 <_svfiprintf_r+0x1f4>
 80053c0:	7821      	ldrb	r1, [r4, #0]
 80053c2:	2203      	movs	r2, #3
 80053c4:	4650      	mov	r0, sl
 80053c6:	f7fa ff1b 	bl	8000200 <memchr>
 80053ca:	b138      	cbz	r0, 80053dc <_svfiprintf_r+0x150>
 80053cc:	9b04      	ldr	r3, [sp, #16]
 80053ce:	eba0 000a 	sub.w	r0, r0, sl
 80053d2:	2240      	movs	r2, #64	@ 0x40
 80053d4:	4082      	lsls	r2, r0
 80053d6:	4313      	orrs	r3, r2
 80053d8:	3401      	adds	r4, #1
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e0:	4824      	ldr	r0, [pc, #144]	@ (8005474 <_svfiprintf_r+0x1e8>)
 80053e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053e6:	2206      	movs	r2, #6
 80053e8:	f7fa ff0a 	bl	8000200 <memchr>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d036      	beq.n	800545e <_svfiprintf_r+0x1d2>
 80053f0:	4b21      	ldr	r3, [pc, #132]	@ (8005478 <_svfiprintf_r+0x1ec>)
 80053f2:	bb1b      	cbnz	r3, 800543c <_svfiprintf_r+0x1b0>
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	3307      	adds	r3, #7
 80053f8:	f023 0307 	bic.w	r3, r3, #7
 80053fc:	3308      	adds	r3, #8
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005402:	4433      	add	r3, r6
 8005404:	9309      	str	r3, [sp, #36]	@ 0x24
 8005406:	e76a      	b.n	80052de <_svfiprintf_r+0x52>
 8005408:	fb0c 3202 	mla	r2, ip, r2, r3
 800540c:	460c      	mov	r4, r1
 800540e:	2001      	movs	r0, #1
 8005410:	e7a8      	b.n	8005364 <_svfiprintf_r+0xd8>
 8005412:	2300      	movs	r3, #0
 8005414:	3401      	adds	r4, #1
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	4619      	mov	r1, r3
 800541a:	f04f 0c0a 	mov.w	ip, #10
 800541e:	4620      	mov	r0, r4
 8005420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005424:	3a30      	subs	r2, #48	@ 0x30
 8005426:	2a09      	cmp	r2, #9
 8005428:	d903      	bls.n	8005432 <_svfiprintf_r+0x1a6>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0c6      	beq.n	80053bc <_svfiprintf_r+0x130>
 800542e:	9105      	str	r1, [sp, #20]
 8005430:	e7c4      	b.n	80053bc <_svfiprintf_r+0x130>
 8005432:	fb0c 2101 	mla	r1, ip, r1, r2
 8005436:	4604      	mov	r4, r0
 8005438:	2301      	movs	r3, #1
 800543a:	e7f0      	b.n	800541e <_svfiprintf_r+0x192>
 800543c:	ab03      	add	r3, sp, #12
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	462a      	mov	r2, r5
 8005442:	4b0e      	ldr	r3, [pc, #56]	@ (800547c <_svfiprintf_r+0x1f0>)
 8005444:	a904      	add	r1, sp, #16
 8005446:	4638      	mov	r0, r7
 8005448:	f3af 8000 	nop.w
 800544c:	1c42      	adds	r2, r0, #1
 800544e:	4606      	mov	r6, r0
 8005450:	d1d6      	bne.n	8005400 <_svfiprintf_r+0x174>
 8005452:	89ab      	ldrh	r3, [r5, #12]
 8005454:	065b      	lsls	r3, r3, #25
 8005456:	f53f af2d 	bmi.w	80052b4 <_svfiprintf_r+0x28>
 800545a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800545c:	e72c      	b.n	80052b8 <_svfiprintf_r+0x2c>
 800545e:	ab03      	add	r3, sp, #12
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	462a      	mov	r2, r5
 8005464:	4b05      	ldr	r3, [pc, #20]	@ (800547c <_svfiprintf_r+0x1f0>)
 8005466:	a904      	add	r1, sp, #16
 8005468:	4638      	mov	r0, r7
 800546a:	f000 f879 	bl	8005560 <_printf_i>
 800546e:	e7ed      	b.n	800544c <_svfiprintf_r+0x1c0>
 8005470:	08005aad 	.word	0x08005aad
 8005474:	08005ab7 	.word	0x08005ab7
 8005478:	00000000 	.word	0x00000000
 800547c:	080051d5 	.word	0x080051d5
 8005480:	08005ab3 	.word	0x08005ab3

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4616      	mov	r6, r2
 800548a:	4698      	mov	r8, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a0:	4607      	mov	r7, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b10a      	cbz	r2, 80054aa <_printf_common+0x26>
 80054a6:	3301      	adds	r3, #1
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	6833      	ldrmi	r3, [r6, #0]
 80054b2:	3302      	addmi	r3, #2
 80054b4:	6033      	strmi	r3, [r6, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d106      	bne.n	80054cc <_printf_common+0x48>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dc26      	bgt.n	800551a <_printf_common+0x96>
 80054cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	3b00      	subs	r3, #0
 80054d4:	bf18      	it	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	0692      	lsls	r2, r2, #26
 80054da:	d42b      	bmi.n	8005534 <_printf_common+0xb0>
 80054dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e0:	4641      	mov	r1, r8
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c8      	blx	r9
 80054e6:	3001      	adds	r0, #1
 80054e8:	d01e      	beq.n	8005528 <_printf_common+0xa4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	f003 0306 	and.w	r3, r3, #6
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf02      	ittt	eq
 80054f6:	68e5      	ldreq	r5, [r4, #12]
 80054f8:	6833      	ldreq	r3, [r6, #0]
 80054fa:	1aed      	subeq	r5, r5, r3
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	bf0c      	ite	eq
 8005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005504:	2500      	movne	r5, #0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfc4      	itt	gt
 800550a:	1a9b      	subgt	r3, r3, r2
 800550c:	18ed      	addgt	r5, r5, r3
 800550e:	2600      	movs	r6, #0
 8005510:	341a      	adds	r4, #26
 8005512:	42b5      	cmp	r5, r6
 8005514:	d11a      	bne.n	800554c <_printf_common+0xc8>
 8005516:	2000      	movs	r0, #0
 8005518:	e008      	b.n	800552c <_printf_common+0xa8>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4641      	mov	r1, r8
 8005520:	4638      	mov	r0, r7
 8005522:	47c8      	blx	r9
 8005524:	3001      	adds	r0, #1
 8005526:	d103      	bne.n	8005530 <_printf_common+0xac>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	3501      	adds	r5, #1
 8005532:	e7c6      	b.n	80054c2 <_printf_common+0x3e>
 8005534:	18e1      	adds	r1, r4, r3
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	2030      	movs	r0, #48	@ 0x30
 800553a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800553e:	4422      	add	r2, r4
 8005540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005548:	3302      	adds	r3, #2
 800554a:	e7c7      	b.n	80054dc <_printf_common+0x58>
 800554c:	2301      	movs	r3, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4641      	mov	r1, r8
 8005552:	4638      	mov	r0, r7
 8005554:	47c8      	blx	r9
 8005556:	3001      	adds	r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa4>
 800555a:	3601      	adds	r6, #1
 800555c:	e7d9      	b.n	8005512 <_printf_common+0x8e>
	...

08005560 <_printf_i>:
 8005560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	7e0f      	ldrb	r7, [r1, #24]
 8005566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005568:	2f78      	cmp	r7, #120	@ 0x78
 800556a:	4691      	mov	r9, r2
 800556c:	4680      	mov	r8, r0
 800556e:	460c      	mov	r4, r1
 8005570:	469a      	mov	sl, r3
 8005572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005576:	d807      	bhi.n	8005588 <_printf_i+0x28>
 8005578:	2f62      	cmp	r7, #98	@ 0x62
 800557a:	d80a      	bhi.n	8005592 <_printf_i+0x32>
 800557c:	2f00      	cmp	r7, #0
 800557e:	f000 80d1 	beq.w	8005724 <_printf_i+0x1c4>
 8005582:	2f58      	cmp	r7, #88	@ 0x58
 8005584:	f000 80b8 	beq.w	80056f8 <_printf_i+0x198>
 8005588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800558c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005590:	e03a      	b.n	8005608 <_printf_i+0xa8>
 8005592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005596:	2b15      	cmp	r3, #21
 8005598:	d8f6      	bhi.n	8005588 <_printf_i+0x28>
 800559a:	a101      	add	r1, pc, #4	@ (adr r1, 80055a0 <_printf_i+0x40>)
 800559c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	08005589 	.word	0x08005589
 80055ac:	08005589 	.word	0x08005589
 80055b0:	08005589 	.word	0x08005589
 80055b4:	08005589 	.word	0x08005589
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005589 	.word	0x08005589
 80055c0:	08005589 	.word	0x08005589
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	0800570b 	.word	0x0800570b
 80055d0:	08005637 	.word	0x08005637
 80055d4:	080056c5 	.word	0x080056c5
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	0800572d 	.word	0x0800572d
 80055e4:	08005589 	.word	0x08005589
 80055e8:	08005637 	.word	0x08005637
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	080056cd 	.word	0x080056cd
 80055f8:	6833      	ldr	r3, [r6, #0]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6032      	str	r2, [r6, #0]
 8005600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005608:	2301      	movs	r3, #1
 800560a:	e09c      	b.n	8005746 <_printf_i+0x1e6>
 800560c:	6833      	ldr	r3, [r6, #0]
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	1d19      	adds	r1, r3, #4
 8005612:	6031      	str	r1, [r6, #0]
 8005614:	0606      	lsls	r6, r0, #24
 8005616:	d501      	bpl.n	800561c <_printf_i+0xbc>
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	e003      	b.n	8005624 <_printf_i+0xc4>
 800561c:	0645      	lsls	r5, r0, #25
 800561e:	d5fb      	bpl.n	8005618 <_printf_i+0xb8>
 8005620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005624:	2d00      	cmp	r5, #0
 8005626:	da03      	bge.n	8005630 <_printf_i+0xd0>
 8005628:	232d      	movs	r3, #45	@ 0x2d
 800562a:	426d      	negs	r5, r5
 800562c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005630:	4858      	ldr	r0, [pc, #352]	@ (8005794 <_printf_i+0x234>)
 8005632:	230a      	movs	r3, #10
 8005634:	e011      	b.n	800565a <_printf_i+0xfa>
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	6833      	ldr	r3, [r6, #0]
 800563a:	0608      	lsls	r0, r1, #24
 800563c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005640:	d402      	bmi.n	8005648 <_printf_i+0xe8>
 8005642:	0649      	lsls	r1, r1, #25
 8005644:	bf48      	it	mi
 8005646:	b2ad      	uxthmi	r5, r5
 8005648:	2f6f      	cmp	r7, #111	@ 0x6f
 800564a:	4852      	ldr	r0, [pc, #328]	@ (8005794 <_printf_i+0x234>)
 800564c:	6033      	str	r3, [r6, #0]
 800564e:	bf14      	ite	ne
 8005650:	230a      	movne	r3, #10
 8005652:	2308      	moveq	r3, #8
 8005654:	2100      	movs	r1, #0
 8005656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800565a:	6866      	ldr	r6, [r4, #4]
 800565c:	60a6      	str	r6, [r4, #8]
 800565e:	2e00      	cmp	r6, #0
 8005660:	db05      	blt.n	800566e <_printf_i+0x10e>
 8005662:	6821      	ldr	r1, [r4, #0]
 8005664:	432e      	orrs	r6, r5
 8005666:	f021 0104 	bic.w	r1, r1, #4
 800566a:	6021      	str	r1, [r4, #0]
 800566c:	d04b      	beq.n	8005706 <_printf_i+0x1a6>
 800566e:	4616      	mov	r6, r2
 8005670:	fbb5 f1f3 	udiv	r1, r5, r3
 8005674:	fb03 5711 	mls	r7, r3, r1, r5
 8005678:	5dc7      	ldrb	r7, [r0, r7]
 800567a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800567e:	462f      	mov	r7, r5
 8005680:	42bb      	cmp	r3, r7
 8005682:	460d      	mov	r5, r1
 8005684:	d9f4      	bls.n	8005670 <_printf_i+0x110>
 8005686:	2b08      	cmp	r3, #8
 8005688:	d10b      	bne.n	80056a2 <_printf_i+0x142>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	07df      	lsls	r7, r3, #31
 800568e:	d508      	bpl.n	80056a2 <_printf_i+0x142>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	6861      	ldr	r1, [r4, #4]
 8005694:	4299      	cmp	r1, r3
 8005696:	bfde      	ittt	le
 8005698:	2330      	movle	r3, #48	@ 0x30
 800569a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800569e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056a2:	1b92      	subs	r2, r2, r6
 80056a4:	6122      	str	r2, [r4, #16]
 80056a6:	f8cd a000 	str.w	sl, [sp]
 80056aa:	464b      	mov	r3, r9
 80056ac:	aa03      	add	r2, sp, #12
 80056ae:	4621      	mov	r1, r4
 80056b0:	4640      	mov	r0, r8
 80056b2:	f7ff fee7 	bl	8005484 <_printf_common>
 80056b6:	3001      	adds	r0, #1
 80056b8:	d14a      	bne.n	8005750 <_printf_i+0x1f0>
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056be:	b004      	add	sp, #16
 80056c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	f043 0320 	orr.w	r3, r3, #32
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	4832      	ldr	r0, [pc, #200]	@ (8005798 <_printf_i+0x238>)
 80056ce:	2778      	movs	r7, #120	@ 0x78
 80056d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	061f      	lsls	r7, r3, #24
 80056da:	f851 5b04 	ldr.w	r5, [r1], #4
 80056de:	d402      	bmi.n	80056e6 <_printf_i+0x186>
 80056e0:	065f      	lsls	r7, r3, #25
 80056e2:	bf48      	it	mi
 80056e4:	b2ad      	uxthmi	r5, r5
 80056e6:	6031      	str	r1, [r6, #0]
 80056e8:	07d9      	lsls	r1, r3, #31
 80056ea:	bf44      	itt	mi
 80056ec:	f043 0320 	orrmi.w	r3, r3, #32
 80056f0:	6023      	strmi	r3, [r4, #0]
 80056f2:	b11d      	cbz	r5, 80056fc <_printf_i+0x19c>
 80056f4:	2310      	movs	r3, #16
 80056f6:	e7ad      	b.n	8005654 <_printf_i+0xf4>
 80056f8:	4826      	ldr	r0, [pc, #152]	@ (8005794 <_printf_i+0x234>)
 80056fa:	e7e9      	b.n	80056d0 <_printf_i+0x170>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	e7f6      	b.n	80056f4 <_printf_i+0x194>
 8005706:	4616      	mov	r6, r2
 8005708:	e7bd      	b.n	8005686 <_printf_i+0x126>
 800570a:	6833      	ldr	r3, [r6, #0]
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	6961      	ldr	r1, [r4, #20]
 8005710:	1d18      	adds	r0, r3, #4
 8005712:	6030      	str	r0, [r6, #0]
 8005714:	062e      	lsls	r6, r5, #24
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	d501      	bpl.n	800571e <_printf_i+0x1be>
 800571a:	6019      	str	r1, [r3, #0]
 800571c:	e002      	b.n	8005724 <_printf_i+0x1c4>
 800571e:	0668      	lsls	r0, r5, #25
 8005720:	d5fb      	bpl.n	800571a <_printf_i+0x1ba>
 8005722:	8019      	strh	r1, [r3, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	4616      	mov	r6, r2
 800572a:	e7bc      	b.n	80056a6 <_printf_i+0x146>
 800572c:	6833      	ldr	r3, [r6, #0]
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	6032      	str	r2, [r6, #0]
 8005732:	681e      	ldr	r6, [r3, #0]
 8005734:	6862      	ldr	r2, [r4, #4]
 8005736:	2100      	movs	r1, #0
 8005738:	4630      	mov	r0, r6
 800573a:	f7fa fd61 	bl	8000200 <memchr>
 800573e:	b108      	cbz	r0, 8005744 <_printf_i+0x1e4>
 8005740:	1b80      	subs	r0, r0, r6
 8005742:	6060      	str	r0, [r4, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	2300      	movs	r3, #0
 800574a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800574e:	e7aa      	b.n	80056a6 <_printf_i+0x146>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	4632      	mov	r2, r6
 8005754:	4649      	mov	r1, r9
 8005756:	4640      	mov	r0, r8
 8005758:	47d0      	blx	sl
 800575a:	3001      	adds	r0, #1
 800575c:	d0ad      	beq.n	80056ba <_printf_i+0x15a>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	079b      	lsls	r3, r3, #30
 8005762:	d413      	bmi.n	800578c <_printf_i+0x22c>
 8005764:	68e0      	ldr	r0, [r4, #12]
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	4298      	cmp	r0, r3
 800576a:	bfb8      	it	lt
 800576c:	4618      	movlt	r0, r3
 800576e:	e7a6      	b.n	80056be <_printf_i+0x15e>
 8005770:	2301      	movs	r3, #1
 8005772:	4632      	mov	r2, r6
 8005774:	4649      	mov	r1, r9
 8005776:	4640      	mov	r0, r8
 8005778:	47d0      	blx	sl
 800577a:	3001      	adds	r0, #1
 800577c:	d09d      	beq.n	80056ba <_printf_i+0x15a>
 800577e:	3501      	adds	r5, #1
 8005780:	68e3      	ldr	r3, [r4, #12]
 8005782:	9903      	ldr	r1, [sp, #12]
 8005784:	1a5b      	subs	r3, r3, r1
 8005786:	42ab      	cmp	r3, r5
 8005788:	dcf2      	bgt.n	8005770 <_printf_i+0x210>
 800578a:	e7eb      	b.n	8005764 <_printf_i+0x204>
 800578c:	2500      	movs	r5, #0
 800578e:	f104 0619 	add.w	r6, r4, #25
 8005792:	e7f5      	b.n	8005780 <_printf_i+0x220>
 8005794:	08005abe 	.word	0x08005abe
 8005798:	08005acf 	.word	0x08005acf

0800579c <memmove>:
 800579c:	4288      	cmp	r0, r1
 800579e:	b510      	push	{r4, lr}
 80057a0:	eb01 0402 	add.w	r4, r1, r2
 80057a4:	d902      	bls.n	80057ac <memmove+0x10>
 80057a6:	4284      	cmp	r4, r0
 80057a8:	4623      	mov	r3, r4
 80057aa:	d807      	bhi.n	80057bc <memmove+0x20>
 80057ac:	1e43      	subs	r3, r0, #1
 80057ae:	42a1      	cmp	r1, r4
 80057b0:	d008      	beq.n	80057c4 <memmove+0x28>
 80057b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ba:	e7f8      	b.n	80057ae <memmove+0x12>
 80057bc:	4402      	add	r2, r0
 80057be:	4601      	mov	r1, r0
 80057c0:	428a      	cmp	r2, r1
 80057c2:	d100      	bne.n	80057c6 <memmove+0x2a>
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ce:	e7f7      	b.n	80057c0 <memmove+0x24>

080057d0 <_sbrk_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d06      	ldr	r5, [pc, #24]	@ (80057ec <_sbrk_r+0x1c>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fb fa30 	bl	8000c40 <_sbrk>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_sbrk_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_sbrk_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	200003d0 	.word	0x200003d0

080057f0 <memcpy>:
 80057f0:	440a      	add	r2, r1
 80057f2:	4291      	cmp	r1, r2
 80057f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057f8:	d100      	bne.n	80057fc <memcpy+0xc>
 80057fa:	4770      	bx	lr
 80057fc:	b510      	push	{r4, lr}
 80057fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005806:	4291      	cmp	r1, r2
 8005808:	d1f9      	bne.n	80057fe <memcpy+0xe>
 800580a:	bd10      	pop	{r4, pc}

0800580c <_realloc_r>:
 800580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005810:	4607      	mov	r7, r0
 8005812:	4614      	mov	r4, r2
 8005814:	460d      	mov	r5, r1
 8005816:	b921      	cbnz	r1, 8005822 <_realloc_r+0x16>
 8005818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581c:	4611      	mov	r1, r2
 800581e:	f7ff bc4d 	b.w	80050bc <_malloc_r>
 8005822:	b92a      	cbnz	r2, 8005830 <_realloc_r+0x24>
 8005824:	f7ff fbde 	bl	8004fe4 <_free_r>
 8005828:	4625      	mov	r5, r4
 800582a:	4628      	mov	r0, r5
 800582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005830:	f000 f81a 	bl	8005868 <_malloc_usable_size_r>
 8005834:	4284      	cmp	r4, r0
 8005836:	4606      	mov	r6, r0
 8005838:	d802      	bhi.n	8005840 <_realloc_r+0x34>
 800583a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800583e:	d8f4      	bhi.n	800582a <_realloc_r+0x1e>
 8005840:	4621      	mov	r1, r4
 8005842:	4638      	mov	r0, r7
 8005844:	f7ff fc3a 	bl	80050bc <_malloc_r>
 8005848:	4680      	mov	r8, r0
 800584a:	b908      	cbnz	r0, 8005850 <_realloc_r+0x44>
 800584c:	4645      	mov	r5, r8
 800584e:	e7ec      	b.n	800582a <_realloc_r+0x1e>
 8005850:	42b4      	cmp	r4, r6
 8005852:	4622      	mov	r2, r4
 8005854:	4629      	mov	r1, r5
 8005856:	bf28      	it	cs
 8005858:	4632      	movcs	r2, r6
 800585a:	f7ff ffc9 	bl	80057f0 <memcpy>
 800585e:	4629      	mov	r1, r5
 8005860:	4638      	mov	r0, r7
 8005862:	f7ff fbbf 	bl	8004fe4 <_free_r>
 8005866:	e7f1      	b.n	800584c <_realloc_r+0x40>

08005868 <_malloc_usable_size_r>:
 8005868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586c:	1f18      	subs	r0, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	bfbc      	itt	lt
 8005872:	580b      	ldrlt	r3, [r1, r0]
 8005874:	18c0      	addlt	r0, r0, r3
 8005876:	4770      	bx	lr

08005878 <_init>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr

08005884 <_fini>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr
