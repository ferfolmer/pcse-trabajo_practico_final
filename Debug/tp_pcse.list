
tp_pcse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004060  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800420c  0800420c  0000520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004258  08004258  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004258  08004258  00005258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004260  08004260  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004264  08004264  00005264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004268  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000005ec  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005fc  200005fc  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f63c  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002299  00000000  00000000  0001567c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00017918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a48  00000000  00000000  00018648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c8d  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001023f  00000000  00000000  0003cd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b85  00000000  00000000  0004cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123ae1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037c8  00000000  00000000  00123b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001272ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080041f4 	.word	0x080041f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080041f4 	.word	0x080041f4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fd60 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f828 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f952 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f8f8 	bl	800071c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052c:	f000 f920 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000530:	f000 f88a 	bl	8000648 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f8c8 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&hi2c1);
 8000538:	480b      	ldr	r0, [pc, #44]	@ (8000568 <main+0x50>)
 800053a:	f000 fc23 	bl	8000d84 <LCD_Init>

  // Borrar pantalla y posicionar cursor en la primera línea
  LCD_Clear();
 800053e:	f000 fc6f 	bl	8000e20 <LCD_Clear>
  LCD_SetCursor(0, 0);
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fc7d 	bl	8000e44 <LCD_SetCursor>
  // Imprimir un mensaje
  LCD_Print("fERNDANAODASDFASDFASDFASDF");
 800054a:	4808      	ldr	r0, [pc, #32]	@ (800056c <main+0x54>)
 800054c:	f000 fca6 	bl	8000e9c <LCD_Print>

  // Mover cursor a segunda línea y mostrar algo más
  LCD_SetCursor(1, 0);
 8000550:	2100      	movs	r1, #0
 8000552:	2001      	movs	r0, #1
 8000554:	f000 fc76 	bl	8000e44 <LCD_SetCursor>
  LCD_Print("STM32 + I2C LCD");
 8000558:	4805      	ldr	r0, [pc, #20]	@ (8000570 <main+0x58>)
 800055a:	f000 fc9f 	bl	8000e9c <LCD_Print>

  // Bucle principal
  while (1)
  {
    // Aquí podrías refrescar datos, etc.
    HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000562:	f000 fdaf 	bl	80010c4 <HAL_Delay>
 8000566:	e7fa      	b.n	800055e <main+0x46>
 8000568:	2000002c 	.word	0x2000002c
 800056c:	0800420c 	.word	0x0800420c
 8000570:	08004228 	.word	0x08004228

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fe09 	bl	800419a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a27      	ldr	r2, [pc, #156]	@ (8000640 <SystemClock_Config+0xcc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <SystemClock_Config+0xd0>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e8:	23a8      	movs	r3, #168	@ 0xa8
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 ff19 	bl	8002430 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000604:	f000 f9d4 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000614:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2105      	movs	r1, #5
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f97a 	bl	8002920 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000632:	f000 f9bd 	bl	80009b0 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000666:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000686:	f001 f8ab 	bl	80017e0 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f98e 	bl	80009b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	4809      	ldr	r0, [pc, #36]	@ (80006bc <MX_I2C1_Init+0x74>)
 8000698:	f001 fd3f 	bl	800211a <HAL_I2CEx_ConfigAnalogFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006a2:	f000 f985 	bl	80009b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2C1_Init+0x74>)
 80006aa:	f001 fd72 	bl	8002192 <HAL_I2CEx_ConfigDigitalFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006b4:	f000 f97c 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f002 fb2e 	bl	8002d60 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f951 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000080 	.word	0x20000080
 8000718:	40004400 	.word	0x40004400

0800071c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_USART3_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART3_UART_Init+0x4c>)
 8000754:	f002 fb04 	bl	8002d60 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f927 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000c8 	.word	0x200000c8
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2204      	movs	r2, #4
 8000780:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f001 fd2c 	bl	8002210 <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8f7 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000110 	.word	0x20000110

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b6d      	ldr	r3, [pc, #436]	@ (800099c <MX_GPIO_Init+0x1d0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a6c      	ldr	r2, [pc, #432]	@ (800099c <MX_GPIO_Init+0x1d0>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b6a      	ldr	r3, [pc, #424]	@ (800099c <MX_GPIO_Init+0x1d0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b66      	ldr	r3, [pc, #408]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a65      	ldr	r2, [pc, #404]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b63      	ldr	r3, [pc, #396]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b5f      	ldr	r3, [pc, #380]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a5e      	ldr	r2, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b5c      	ldr	r3, [pc, #368]	@ (800099c <MX_GPIO_Init+0x1d0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b58      	ldr	r3, [pc, #352]	@ (800099c <MX_GPIO_Init+0x1d0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a57      	ldr	r2, [pc, #348]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b55      	ldr	r3, [pc, #340]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b51      	ldr	r3, [pc, #324]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a50      	ldr	r2, [pc, #320]	@ (800099c <MX_GPIO_Init+0x1d0>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b4e      	ldr	r3, [pc, #312]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b4a      	ldr	r3, [pc, #296]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a49      	ldr	r2, [pc, #292]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1d0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000890:	4843      	ldr	r0, [pc, #268]	@ (80009a0 <MX_GPIO_Init+0x1d4>)
 8000892:	f000 ff8b 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	@ 0x40
 800089a:	4842      	ldr	r0, [pc, #264]	@ (80009a4 <MX_GPIO_Init+0x1d8>)
 800089c:	f000 ff86 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	483c      	ldr	r0, [pc, #240]	@ (80009a8 <MX_GPIO_Init+0x1dc>)
 80008b8:	f000 fdcc 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008bc:	2332      	movs	r3, #50	@ 0x32
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008cc:	230b      	movs	r3, #11
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4834      	ldr	r0, [pc, #208]	@ (80009a8 <MX_GPIO_Init+0x1dc>)
 80008d8:	f000 fdbc 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008dc:	2386      	movs	r3, #134	@ 0x86
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ec:	230b      	movs	r3, #11
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	482d      	ldr	r0, [pc, #180]	@ (80009ac <MX_GPIO_Init+0x1e0>)
 80008f8:	f000 fdac 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008fc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4822      	ldr	r0, [pc, #136]	@ (80009a0 <MX_GPIO_Init+0x1d4>)
 8000916:	f000 fd9d 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800091a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092c:	230b      	movs	r3, #11
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481a      	ldr	r0, [pc, #104]	@ (80009a0 <MX_GPIO_Init+0x1d4>)
 8000938:	f000 fd8c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093c:	2340      	movs	r3, #64	@ 0x40
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <MX_GPIO_Init+0x1d8>)
 8000954:	f000 fd7e 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <MX_GPIO_Init+0x1d8>)
 800096c:	f000 fd72 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000970:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000982:	230b      	movs	r3, #11
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_GPIO_Init+0x1d8>)
 800098e:	f000 fd61 	bl	8001454 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40021800 	.word	0x40021800
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020000 	.word	0x40020000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_I2C_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12c      	bne.n	8000a88 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a4a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a50:	2312      	movs	r3, #18
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <HAL_I2C_MspInit+0x8c>)
 8000a68:	f000 fcf4 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40005400 	.word	0x40005400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	@ 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a45      	ldr	r2, [pc, #276]	@ (8000bd0 <HAL_UART_MspInit+0x134>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d152      	bne.n	8000b64 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4b44      	ldr	r3, [pc, #272]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a43      	ldr	r2, [pc, #268]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b41      	ldr	r3, [pc, #260]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b36      	ldr	r3, [pc, #216]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a35      	ldr	r2, [pc, #212]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b12:	2308      	movs	r3, #8
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	482a      	ldr	r0, [pc, #168]	@ (8000bd8 <HAL_UART_MspInit+0x13c>)
 8000b2e:	f000 fc91 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b32:	2320      	movs	r3, #32
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b42:	2307      	movs	r3, #7
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4823      	ldr	r0, [pc, #140]	@ (8000bdc <HAL_UART_MspInit+0x140>)
 8000b4e:	f000 fc81 	bl	8001454 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2026      	movs	r0, #38	@ 0x26
 8000b58:	f000 fbb3 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5c:	2026      	movs	r0, #38	@ 0x26
 8000b5e:	f000 fbcc 	bl	80012fa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b62:	e031      	b.n	8000bc8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <HAL_UART_MspInit+0x144>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_UART_MspInit+0x138>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ba6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <HAL_UART_MspInit+0x140>)
 8000bc4:	f000 fc46 	bl	8001454 <HAL_GPIO_Init>
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	@ 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40004800 	.word	0x40004800

08000be4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c04:	d13f      	bne.n	8000c86 <HAL_PCD_MspInit+0xa2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a20      	ldr	r2, [pc, #128]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c22:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c34:	230a      	movs	r3, #10
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4815      	ldr	r0, [pc, #84]	@ (8000c94 <HAL_PCD_MspInit+0xb0>)
 8000c40:	f000 fc08 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <HAL_PCD_MspInit+0xb0>)
 8000c5a:	f000 fbfb 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c62:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c68:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_PCD_MspInit+0xac>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <MemManage_Handler+0x4>

08000cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cee:	f000 f9c9 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <USART2_IRQHandler+0x10>)
 8000cfe:	f002 f87f 	bl	8002e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000080 	.word	0x20000080

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	@ (8000d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	@ (8000d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f003 fa25 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fbd9 	bl	8000518 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d74:	08004268 	.word	0x08004268
  ldr r2, =_sbss
 8000d78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d7c:	200005fc 	.word	0x200005fc

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <LCD_Init>:

//-----------------------------------------------------------------------------
// Implementación de las funciones públicas
//-----------------------------------------------------------------------------
LCD_Status_t LCD_Init(I2C_HandleTypeDef *hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    LCD_Status_t status = LCD_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73bb      	strb	r3, [r7, #14]
    if (hi2c == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <LCD_Init+0x16>
    {
        return status;
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	e03a      	b.n	8000e10 <LCD_Init+0x8c>
    }
    g_lcdI2c = hi2c;
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <LCD_Init+0x94>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6013      	str	r3, [r2, #0]

    LCD_Delay(DELAY_20MS);
 8000da0:	2014      	movs	r0, #20
 8000da2:	f000 f911 	bl	8000fc8 <LCD_Delay>
    // -------------------------------------------------------
    // Secuencia de "despertar" en 4 bits:
    // - Enviar 0x03 (nibble alto 0x3) tres veces con retardos
    // - Finalmente, enviar 0x02 (para 4-bit mode)
    // -------------------------------------------------------
    LCD_Send4Bits(0x03, 0);  
 8000da6:	2100      	movs	r1, #0
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f88d 	bl	8000ec8 <LCD_Send4Bits>
    LCD_Delay(DELAY_10MS);
 8000dae:	200a      	movs	r0, #10
 8000db0:	f000 f90a 	bl	8000fc8 <LCD_Delay>
    LCD_Send4Bits(0x03, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f886 	bl	8000ec8 <LCD_Send4Bits>
    LCD_Delay(DELAY_1MS);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 f903 	bl	8000fc8 <LCD_Delay>
    LCD_Send4Bits(0x03, 0);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f87f 	bl	8000ec8 <LCD_Send4Bits>
    LCD_Send4Bits(0x02, 0);  // Activar modo 4 bits
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f000 f87b 	bl	8000ec8 <LCD_Send4Bits>

    for (uint8_t i = 0; i < sizeof(LCD_INIT_CMD); i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e015      	b.n	8000e04 <LCD_Init+0x80>
        LCD_SendCmd(LCD_INIT_CMD[i]);
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <LCD_Init+0x98>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f8c1 	bl	8000f66 <LCD_SendCmd>
    
        if (LCD_INIT_CMD[i] == CLR_LCD || LCD_INIT_CMD[i] == RETURN_HOME)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LCD_Init+0x98>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d004      	beq.n	8000df8 <LCD_Init+0x74>
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LCD_Init+0x98>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d102      	bne.n	8000dfe <LCD_Init+0x7a>
            LCD_Delay(DELAY_2MS);
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f000 f8e5 	bl	8000fc8 <LCD_Delay>
    for (uint8_t i = 0; i < sizeof(LCD_INIT_CMD); i++) {
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d9e6      	bls.n	8000dd8 <LCD_Init+0x54>
    }


    status = LCD_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
    return status;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200005f4 	.word	0x200005f4
 8000e1c:	08004250 	.word	0x08004250

08000e20 <LCD_Clear>:

LCD_Status_t LCD_Clear(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
    LCD_Status_t status = LCD_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(CLR_LCD);   // Clear display
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 f89b 	bl	8000f66 <LCD_SendCmd>
    LCD_Delay(DELAY_2MS);
 8000e30:	2002      	movs	r0, #2
 8000e32:	f000 f8c9 	bl	8000fc8 <LCD_Delay>
    status = LCD_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
    return status;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <LCD_SetCursor>:

LCD_Status_t LCD_SetCursor(uint8_t row, uint8_t col)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	4613      	mov	r3, r2
 8000e52:	71bb      	strb	r3, [r7, #6]
    LCD_Status_t status = LCD_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
    if (row > 1 || col > 15)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d802      	bhi.n	8000e64 <LCD_SetCursor+0x20>
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d901      	bls.n	8000e68 <LCD_SetCursor+0x24>
    {
        return status;  // Error: fila o columna fuera de rango
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	e015      	b.n	8000e94 <LCD_SetCursor+0x50>
    }
    // Dirección base para cada línea (según HD44780)
    uint8_t baseAddress[2] = {LCD_LINE_1, LCD_LINE_2};
 8000e68:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8000e6c:	81bb      	strh	r3, [r7, #12]
    if (row > 1) row = 1;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d901      	bls.n	8000e78 <LCD_SetCursor+0x34>
 8000e74:	2301      	movs	r3, #1
 8000e76:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(baseAddress[row] + col);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	3310      	adds	r3, #16
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	4413      	add	r3, r2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f86c 	bl	8000f66 <LCD_SendCmd>
    status = LCD_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
    
    return status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LCD_Print>:

void LCD_Print(const char *str)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    while (*str)
 8000ea4:	e007      	b.n	8000eb6 <LCD_Print+0x1a>
    {
        LCD_SendData((uint8_t)*str);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f869 	bl	8000f82 <LCD_SendData>
        str++;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
    while (*str)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f3      	bne.n	8000ea6 <LCD_Print+0xa>
    }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LCD_Send4Bits>:
 *        (RS, RW, EN). Se asume siempre RW=0 (escritura).
 * @param nibble valor de 4 bits (0x0..0xF)
 * @param control si RS=1 es dato, si RS=0 es comando
 */
static void LCD_Send4Bits(uint8_t value, uint8_t control)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
    // nibble & 0x0F para asegurar solo 4 bits
    // control: RS=1 / 0, RW=0, EN se activa en el pulso
    uint8_t byte = ((value & LCD_DATA_MASK_LOW) << LCD_DATA_SHIFT);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	73fb      	strb	r3, [r7, #15]
    // Combina con RS
    if (control) byte |= LCD_PIN_RS;
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <LCD_Send4Bits+0x24>
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]

    byte |= lcd_bl_mask;  // Agrega el bit de retroiluminación
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <LCD_Send4Bits+0x60>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	73fb      	strb	r3, [r7, #15]
    LCD_WriteI2C(byte | LCD_PIN_EN);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f84e 	bl	8000fa0 <LCD_WriteI2C>
    LCD_Delay(DELAY_1MS);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 f85f 	bl	8000fc8 <LCD_Delay>
	LCD_WriteI2C(byte & ~LCD_PIN_EN);
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f023 0304 	bic.w	r3, r3, #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f844 	bl	8000fa0 <LCD_WriteI2C>
    LCD_Delay(DELAY_1MS);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 f855 	bl	8000fc8 <LCD_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000004 	.word	0x20000004

08000f2c <LCD_Send8Bits>:

static void LCD_Send8Bits(uint8_t value, uint8_t control)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
    LCD_Send4Bits((value & LCD_DATA_MASK_HIGH) >> LCD_DATA_SHIFT, control);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffbe 	bl	8000ec8 <LCD_Send4Bits>
    LCD_Send4Bits(value & LCD_DATA_MASK_LOW, control);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffb5 	bl	8000ec8 <LCD_Send4Bits>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <LCD_SendCmd>:

/**
 * @brief Enviar un comando (RS=0).
 */
static void LCD_SendCmd(uint8_t cmd)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
    LCD_Send8Bits(cmd, CONTROL);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffd9 	bl	8000f2c <LCD_Send8Bits>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LCD_SendData>:

/**
 * @brief Enviar un dato (RS=1).
 */
static void LCD_SendData(uint8_t data)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
    LCD_Send8Bits(data, DATA);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ffcb 	bl	8000f2c <LCD_Send8Bits>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <LCD_WriteI2C>:

/**
 * @brief Escribe un byte a través de I2C hacia el PCF8574.
 */
static void LCD_WriteI2C(uint8_t dato)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    // Transmite un byte al dispositivo en la dirección LCD_I2C_ADDRESS
    HAL_I2C_Master_Transmit(g_lcdI2c, LCD_I2C_ADDRESS, &dato, 1, 100);
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <LCD_WriteI2C+0x24>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	214e      	movs	r1, #78	@ 0x4e
 8000fb8:	f000 fd56 	bl	8001a68 <HAL_I2C_Master_Transmit>
    // Se asume que no hay error de timeout. Podrías evaluar el retorno si deseas.
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200005f4 	.word	0x200005f4

08000fc8 <LCD_Delay>:

/**
 * @brief Delay sencillo que reusa HAL_Delay (milisegundos).
 */
static void LCD_Delay(uint32_t ms)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f877 	bl	80010c4 <HAL_Delay>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f94f 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fcd2 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f967 	bl	8001316 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001060:	f000 f92f 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	2000000c 	.word	0x2000000c
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	200005f8 	.word	0x200005f8

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200005f8 	.word	0x200005f8

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	@ (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff feb6 	bl	80010ac <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d008      	beq.n	8001360 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2280      	movs	r2, #128	@ 0x80
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e052      	b.n	8001406 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0216 	bic.w	r2, r2, #22
 800136e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800137e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <HAL_DMA_Abort+0x62>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b0:	e013      	b.n	80013da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b2:	f7ff fe7b 	bl	80010ac <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d90c      	bls.n	80013da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e015      	b.n	8001406 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e4      	bne.n	80013b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ec:	223f      	movs	r2, #63	@ 0x3f
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d004      	beq.n	800142c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e00c      	b.n	8001446 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2205      	movs	r2, #5
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e177      	b.n	8001760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8166 	bne.w	800175a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80c0 	beq.w	800175a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b66      	ldr	r3, [pc, #408]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a65      	ldr	r2, [pc, #404]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a61      	ldr	r2, [pc, #388]	@ (800177c <HAL_GPIO_Init+0x328>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a58      	ldr	r2, [pc, #352]	@ (8001780 <HAL_GPIO_Init+0x32c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d037      	beq.n	8001692 <HAL_GPIO_Init+0x23e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a57      	ldr	r2, [pc, #348]	@ (8001784 <HAL_GPIO_Init+0x330>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d031      	beq.n	800168e <HAL_GPIO_Init+0x23a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a56      	ldr	r2, [pc, #344]	@ (8001788 <HAL_GPIO_Init+0x334>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02b      	beq.n	800168a <HAL_GPIO_Init+0x236>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a55      	ldr	r2, [pc, #340]	@ (800178c <HAL_GPIO_Init+0x338>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d025      	beq.n	8001686 <HAL_GPIO_Init+0x232>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a54      	ldr	r2, [pc, #336]	@ (8001790 <HAL_GPIO_Init+0x33c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01f      	beq.n	8001682 <HAL_GPIO_Init+0x22e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a53      	ldr	r2, [pc, #332]	@ (8001794 <HAL_GPIO_Init+0x340>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x22a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	@ (8001798 <HAL_GPIO_Init+0x344>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x226>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a51      	ldr	r2, [pc, #324]	@ (800179c <HAL_GPIO_Init+0x348>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a50      	ldr	r2, [pc, #320]	@ (80017a0 <HAL_GPIO_Init+0x34c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4f      	ldr	r2, [pc, #316]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x21a>
 800166a:	2309      	movs	r3, #9
 800166c:	e012      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800166e:	230a      	movs	r3, #10
 8001670:	e010      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001672:	2308      	movs	r3, #8
 8001674:	e00e      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001676:	2307      	movs	r3, #7
 8001678:	e00c      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800167a:	2306      	movs	r3, #6
 800167c:	e00a      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800167e:	2305      	movs	r3, #5
 8001680:	e008      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001682:	2304      	movs	r3, #4
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001686:	2303      	movs	r3, #3
 8001688:	e004      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001692:	2300      	movs	r3, #0
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	f002 0203 	and.w	r2, r2, #3
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	4093      	lsls	r3, r2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a4:	4935      	ldr	r1, [pc, #212]	@ (800177c <HAL_GPIO_Init+0x328>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d6:	4a34      	ldr	r2, [pc, #208]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016dc:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001700:	4a29      	ldr	r2, [pc, #164]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172a:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001730:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_GPIO_Init+0x354>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f67f ae84 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3724      	adds	r7, #36	@ 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40021400 	.word	0x40021400
 8001798:	40021800 	.word	0x40021800
 800179c:	40021c00 	.word	0x40021c00
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40022400 	.word	0x40022400
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e12b      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff f900 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	@ 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f001 fa64 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a81      	ldr	r2, [pc, #516]	@ (8001a54 <HAL_I2C_Init+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d807      	bhi.n	8001864 <HAL_I2C_Init+0x84>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a80      	ldr	r2, [pc, #512]	@ (8001a58 <HAL_I2C_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e006      	b.n	8001872 <HAL_I2C_Init+0x92>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a7d      	ldr	r2, [pc, #500]	@ (8001a5c <HAL_I2C_Init+0x27c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0e7      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a78      	ldr	r2, [pc, #480]	@ (8001a60 <HAL_I2C_Init+0x280>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a54 <HAL_I2C_Init+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d802      	bhi.n	80018b4 <HAL_I2C_Init+0xd4>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	e009      	b.n	80018c8 <HAL_I2C_Init+0xe8>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a69      	ldr	r2, [pc, #420]	@ (8001a64 <HAL_I2C_Init+0x284>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	495c      	ldr	r1, [pc, #368]	@ (8001a54 <HAL_I2C_Init+0x274>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d819      	bhi.n	800191c <HAL_I2C_Init+0x13c>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_I2C_Init+0x138>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	e051      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001918:	2304      	movs	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x168>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x18e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x196>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x1bc>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	461a      	mov	r2, r3
 8001a74:	460b      	mov	r3, r1
 8001a76:	817b      	strh	r3, [r7, #10]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff fb16 	bl	80010ac <HAL_GetTick>
 8001a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	f040 80e0 	bne.w	8001c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2319      	movs	r3, #25
 8001a96:	2201      	movs	r2, #1
 8001a98:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f964 	bl	8001d68 <I2C_WaitOnFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e0d3      	b.n	8001c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2C_Master_Transmit+0x50>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e0cc      	b.n	8001c52 <HAL_I2C_Master_Transmit+0x1ea>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d007      	beq.n	8001ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2221      	movs	r2, #33	@ 0x21
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2210      	movs	r2, #16
 8001afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	893a      	ldrh	r2, [r7, #8]
 8001b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	@ (8001c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f89c 	bl	8001c64 <I2C_MasterRequestWrite>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08d      	b.n	8001c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b4c:	e066      	b.n	8001c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	6a39      	ldr	r1, [r7, #32]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fa22 	bl	8001f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00d      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d107      	bne.n	8001b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06b      	b.n	8001c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d11b      	bne.n	8001bf0 <HAL_I2C_Master_Transmit+0x188>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d017      	beq.n	8001bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6a39      	ldr	r1, [r7, #32]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa19 	bl	800202c <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e01a      	b.n	8001c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d194      	bne.n	8001b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	00100002 	.word	0x00100002
 8001c60:	ffff0000 	.word	0xffff0000

08001c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d006      	beq.n	8001c8e <I2C_MasterRequestWrite+0x2a>
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d003      	beq.n	8001c8e <I2C_MasterRequestWrite+0x2a>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c8c:	d108      	bne.n	8001ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e00b      	b.n	8001cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d107      	bne.n	8001cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f84f 	bl	8001d68 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00d      	beq.n	8001cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cde:	d103      	bne.n	8001ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e035      	b.n	8001d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cf4:	d108      	bne.n	8001d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	e01b      	b.n	8001d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	11db      	asrs	r3, r3, #7
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0306 	and.w	r3, r3, #6
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f063 030f 	orn	r3, r3, #15
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	490e      	ldr	r1, [pc, #56]	@ (8001d60 <I2C_MasterRequestWrite+0xfc>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f898 	bl	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e010      	b.n	8001d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <I2C_MasterRequestWrite+0x100>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f888 	bl	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	00010008 	.word	0x00010008
 8001d64:	00010002 	.word	0x00010002

08001d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d78:	e048      	b.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d80:	d044      	beq.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d82:	f7ff f993 	bl	80010ac <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d302      	bcc.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d139      	bne.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10d      	bne.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4013      	ands	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	e00c      	b.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d116      	bne.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e023      	b.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10d      	bne.n	8001e32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	e00c      	b.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d093      	beq.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e6a:	e071      	b.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e7a:	d123      	bne.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e067      	b.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eca:	d041      	beq.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ecc:	f7ff f8ee 	bl	80010ac <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d302      	bcc.n	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d136      	bne.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10c      	bne.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	e00b      	b.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	4013      	ands	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d016      	beq.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e021      	b.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	0c1b      	lsrs	r3, r3, #16
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10c      	bne.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	43da      	mvns	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4013      	ands	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf14      	ite	ne
 8001f6c:	2301      	movne	r3, #1
 8001f6e:	2300      	moveq	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e00b      	b.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f47f af6d 	bne.w	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa8:	e034      	b.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f886 	bl	80020bc <I2C_IsAcknowledgeFailed>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e034      	b.n	8002024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fc0:	d028      	beq.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc2:	f7ff f873 	bl	80010ac <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d302      	bcc.n	8001fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11d      	bne.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe2:	2b80      	cmp	r3, #128	@ 0x80
 8001fe4:	d016      	beq.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e007      	b.n	8002024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201e:	2b80      	cmp	r3, #128	@ 0x80
 8002020:	d1c3      	bne.n	8001faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002038:	e034      	b.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f83e 	bl	80020bc <I2C_IsAcknowledgeFailed>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e034      	b.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002050:	d028      	beq.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7ff f82b 	bl	80010ac <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11d      	bne.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d016      	beq.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e007      	b.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d1c3      	bne.n	800203a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d2:	d11b      	bne.n	800210c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0204 	orr.w	r2, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	d129      	bne.n	8002184 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0210 	bic.w	r2, r2, #16
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d12a      	bne.n	8002202 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	@ 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	f023 030f 	bic.w	r3, r3, #15
 80021d2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	4313      	orrs	r3, r2
 80021dc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	89fa      	ldrh	r2, [r7, #14]
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e101      	b.n	8002426 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7fe fcd1 	bl	8000be4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002250:	d102      	bne.n	8002258 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fd01 	bl	8003c64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7c1a      	ldrb	r2, [r3, #16]
 800226a:	f88d 2000 	strb.w	r2, [sp]
 800226e:	3304      	adds	r3, #4
 8002270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002272:	f001 fc93 	bl	8003b9c <USB_CoreInit>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0ce      	b.n	8002426 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fcf9 	bl	8003c86 <USB_SetCurrentMode>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0bf      	b.n	8002426 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04a      	b.n	8002342 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3315      	adds	r3, #21
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3314      	adds	r3, #20
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b298      	uxth	r0, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	332e      	adds	r3, #46	@ 0x2e
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3318      	adds	r3, #24
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	331c      	adds	r3, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3320      	adds	r3, #32
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3324      	adds	r3, #36	@ 0x24
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3af      	bcc.n	80022ac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e044      	b.n	80023dc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	791b      	ldrb	r3, [r3, #4]
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b5      	bcc.n	8002352 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7c1a      	ldrb	r2, [r3, #16]
 80023ee:	f88d 2000 	strb.w	r2, [sp]
 80023f2:	3304      	adds	r3, #4
 80023f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f6:	f001 fc93 	bl	8003d20 <USB_DevInit>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e00c      	b.n	8002426 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 fe5b 	bl	80040da <USB_DevDisconnect>

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e267      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800244e:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002462:	2b08      	cmp	r3, #8
 8002464:	d112      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b82      	ldr	r3, [pc, #520]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b7e      	ldr	r3, [pc, #504]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e242      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x74>
 8002496:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b70      	ldr	r3, [pc, #448]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6c      	ldr	r2, [pc, #432]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024c8:	4b69      	ldr	r3, [pc, #420]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a68      	ldr	r2, [pc, #416]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b66      	ldr	r3, [pc, #408]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a65      	ldr	r2, [pc, #404]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fde0 	bl	80010ac <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fddc 	bl	80010ac <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e207      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fdcc 	bl	80010ac <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fdc8 	bl	80010ac <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1f3      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b51      	ldr	r3, [pc, #324]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002546:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b44      	ldr	r3, [pc, #272]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c7      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4937      	ldr	r1, [pc, #220]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_RCC_OscConfig+0x244>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fd81 	bl	80010ac <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fd7d 	bl	80010ac <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1a8      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4925      	ldr	r1, [pc, #148]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_OscConfig+0x244>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fd60 	bl	80010ac <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe fd5c 	bl	80010ac <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e187      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d036      	beq.n	8002688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_RCC_OscConfig+0x248>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fd40 	bl	80010ac <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fd3c 	bl	80010ac <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e167      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x200>
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_OscConfig+0x248>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fd29 	bl	80010ac <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00e      	b.n	800267c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fd25 	bl	80010ac <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d907      	bls.n	800267c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e150      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	42470000 	.word	0x42470000
 8002678:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ea      	bne.n	800265e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8097 	beq.w	80027c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b81      	ldr	r3, [pc, #516]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b7d      	ldr	r3, [pc, #500]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a7c      	ldr	r2, [pc, #496]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b7a      	ldr	r3, [pc, #488]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b77      	ldr	r3, [pc, #476]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b74      	ldr	r3, [pc, #464]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a73      	ldr	r2, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fce5 	bl	80010ac <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fce1 	bl	80010ac <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e10c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x2ea>
 800270c:	4b64      	ldr	r3, [pc, #400]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a63      	ldr	r2, [pc, #396]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x30c>
 8002722:	4b5f      	ldr	r3, [pc, #380]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	4a5e      	ldr	r2, [pc, #376]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6713      	str	r3, [r2, #112]	@ 0x70
 800272e:	4b5c      	ldr	r3, [pc, #368]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	4a5b      	ldr	r2, [pc, #364]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	@ 0x70
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800273c:	4b58      	ldr	r3, [pc, #352]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	4a57      	ldr	r2, [pc, #348]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	@ 0x70
 8002748:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a54      	ldr	r2, [pc, #336]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fca6 	bl	80010ac <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fca2 	bl	80010ac <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0cb      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ee      	beq.n	8002764 <HAL_RCC_OscConfig+0x334>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7fe fc90 	bl	80010ac <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fc8c 	bl	80010ac <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0b5      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	4b3e      	ldr	r3, [pc, #248]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ee      	bne.n	8002790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	4a38      	ldr	r2, [pc, #224]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a1 	beq.w	8002910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ce:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d05c      	beq.n	8002894 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d141      	bne.n	8002866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fc60 	bl	80010ac <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fc5c 	bl	80010ac <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e087      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	491b      	ldr	r1, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fc35 	bl	80010ac <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fc31 	bl	80010ac <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e05c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x416>
 8002864:	e054      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fc1e 	bl	80010ac <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fc1a 	bl	80010ac <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e045      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
 8002892:	e03d      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e038      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000
 80028a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x4ec>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d028      	beq.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d121      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d11a      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028dc:	4013      	ands	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fb4c 	bl	80010ac <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe fb48 	bl	80010ac <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f821 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe faac 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08004238 	.word	0x08004238
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000008 	.word	0x20000008

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af0:	b094      	sub	sp, #80	@ 0x50
 8002af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b04:	4b79      	ldr	r3, [pc, #484]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x40>
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	f200 80e1 	bhi.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1e:	e0db      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b73      	ldr	r3, [pc, #460]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b24:	e0db      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b26:	4b73      	ldr	r3, [pc, #460]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b2a:	e0d8      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4621      	mov	r1, r4
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	6139      	str	r1, [r7, #16]
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b90:	4659      	mov	r1, fp
 8002b92:	018b      	lsls	r3, r1, #6
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	018a      	lsls	r2, r1, #6
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bbe:	4690      	mov	r8, r2
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	eb18 0303 	adds.w	r3, r8, r3
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	462b      	mov	r3, r5
 8002bcc:	eb49 0303 	adc.w	r3, r9, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bde:	4629      	mov	r1, r5
 8002be0:	024b      	lsls	r3, r1, #9
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be8:	4621      	mov	r1, r4
 8002bea:	024a      	lsls	r2, r1, #9
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bfc:	f7fd faf6 	bl	80001ec <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c08:	e058      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b38      	ldr	r3, [pc, #224]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	2200      	movs	r2, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	4611      	mov	r1, r2
 8002c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	0159      	lsls	r1, r3, #5
 8002c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c36:	0150      	lsls	r0, r2, #5
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c60:	eb63 050b 	sbc.w	r5, r3, fp
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	00eb      	lsls	r3, r5, #3
 8002c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c72:	00e2      	lsls	r2, r4, #3
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	4643      	mov	r3, r8
 8002c7a:	18e3      	adds	r3, r4, r3
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	464b      	mov	r3, r9
 8002c80:	eb45 0303 	adc.w	r3, r5, r3
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c92:	4629      	mov	r1, r5
 8002c94:	028b      	lsls	r3, r1, #10
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	028a      	lsls	r2, r1, #10
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	61fa      	str	r2, [r7, #28]
 8002cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb0:	f7fd fa9c 	bl	80001ec <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3750      	adds	r7, #80	@ 0x50
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08004248 	.word	0x08004248

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffdc 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08004248 	.word	0x08004248

08002d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e042      	b.n	8002df8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fe88 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	@ 0x24
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fc85 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0ba      	sub	sp, #232	@ 0xe8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb69 	bl	8003536 <UART_Receive_IT>
      return;
 8002e64:	e25b      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80de 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80d1 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 81f2 	beq.w	8003314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 faf4 	bl	8003536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_UART_IRQHandler+0x17a>
 8002f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9fc 	bl	8003378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8a:	2b40      	cmp	r3, #64	@ 0x40
 8002f8c:	d141      	bne.n	8003012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1d9      	bne.n	8002f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80031e0 <HAL_UART_IRQHandler+0x3e0>)
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fa0d 	bl	800140e <HAL_DMA_Abort_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00e      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f99e 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00a      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f99a 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e006      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f996 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003026:	e175      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	bf00      	nop
    return;
 800302a:	e173      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 814f 	bne.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8148 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8141 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	f040 80b6 	bne.w	80031e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8145 	beq.w	8003318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003096:	429a      	cmp	r2, r3
 8003098:	f080 813e 	bcs.w	8003318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ae:	f000 8088 	beq.w	80031c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1d9      	bne.n	80030b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800310e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800312a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e1      	bne.n	80030fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800314a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800315e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800316c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e3      	bne.n	800313a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003192:	f023 0310 	bic.w	r3, r3, #16
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e3      	bne.n	8003180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f8b6 	bl	800132e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8c1 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031de:	e09b      	b.n	8003318 <HAL_UART_IRQHandler+0x518>
 80031e0:	0800343f 	.word	0x0800343f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 808e 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8089 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800322e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800323c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e3      	bne.n	800320a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	623b      	str	r3, [r7, #32]
   return(result);
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003266:	633a      	str	r2, [r7, #48]	@ 0x30
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800326c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60fb      	str	r3, [r7, #12]
   return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032ac:	61fa      	str	r2, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f847 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032d2:	e023      	b.n	800331c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8ba 	bl	8003466 <UART_Transmit_IT>
    return;
 80032f2:	e014      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8fa 	bl	8003506 <UART_EndTransmit_IT>
    return;
 8003312:	e004      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    return;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 800331c:	bf00      	nop
  }
}
 800331e:	37e8      	adds	r7, #232	@ 0xe8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b095      	sub	sp, #84	@ 0x54
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d119      	bne.n	8003424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	647b      	str	r3, [r7, #68]	@ 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003410:	61ba      	str	r2, [r7, #24]
 8003412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6979      	ldr	r1, [r7, #20]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	613b      	str	r3, [r7, #16]
   return(result);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003432:	bf00      	nop
 8003434:	3754      	adds	r7, #84	@ 0x54
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff ff77 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b21      	cmp	r3, #33	@ 0x21
 8003478:	d13e      	bne.n	80034f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d114      	bne.n	80034ae <UART_Transmit_IT+0x48>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d110      	bne.n	80034ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	621a      	str	r2, [r3, #32]
 80034ac:	e008      	b.n	80034c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6211      	str	r1, [r2, #32]
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4619      	mov	r1, r3
 80034ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800351c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fefc 	bl	8003324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08c      	sub	sp, #48	@ 0x30
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b22      	cmp	r3, #34	@ 0x22
 8003548:	f040 80ae 	bne.w	80036a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d117      	bne.n	8003586 <UART_Receive_IT+0x50>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	b29a      	uxth	r2, r3
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
 8003584:	e026      	b.n	80035d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003598:	d007      	beq.n	80035aa <UART_Receive_IT+0x74>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <UART_Receive_IT+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e008      	b.n	80035ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4619      	mov	r1, r3
 80035e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d15d      	bne.n	80036a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0220 	bic.w	r2, r2, #32
 80035f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	2b01      	cmp	r3, #1
 800362c:	d135      	bne.n	800369a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 0310 	bic.w	r3, r3, #16
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	623a      	str	r2, [r7, #32]
 8003656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	61bb      	str	r3, [r7, #24]
   return(result);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b10      	cmp	r3, #16
 8003674:	d10a      	bne.n	800368c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe64 	bl	8003360 <HAL_UARTEx_RxEventCallback>
 8003698:	e002      	b.n	80036a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe4c 	bl	8003338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e002      	b.n	80036aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3730      	adds	r7, #48	@ 0x30
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b8:	b0c0      	sub	sp, #256	@ 0x100
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	ea40 0301 	orr.w	r3, r0, r1
 80036dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800370c:	f021 010c 	bic.w	r1, r1, #12
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800371a:	430b      	orrs	r3, r1
 800371c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	6999      	ldr	r1, [r3, #24]
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	ea40 0301 	orr.w	r3, r0, r1
 800373a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8f      	ldr	r3, [pc, #572]	@ (8003980 <UART_SetConfig+0x2cc>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d005      	beq.n	8003754 <UART_SetConfig+0xa0>
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b8d      	ldr	r3, [pc, #564]	@ (8003984 <UART_SetConfig+0x2d0>)
 8003750:	429a      	cmp	r2, r3
 8003752:	d104      	bne.n	800375e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff faf0 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003758:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800375c:	e003      	b.n	8003766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800375e:	f7ff fad7 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8003762:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003770:	f040 810c 	bne.w	800398c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003778:	2200      	movs	r2, #0
 800377a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800377e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003786:	4622      	mov	r2, r4
 8003788:	462b      	mov	r3, r5
 800378a:	1891      	adds	r1, r2, r2
 800378c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800378e:	415b      	adcs	r3, r3
 8003790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003796:	4621      	mov	r1, r4
 8003798:	eb12 0801 	adds.w	r8, r2, r1
 800379c:	4629      	mov	r1, r5
 800379e:	eb43 0901 	adc.w	r9, r3, r1
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b6:	4690      	mov	r8, r2
 80037b8:	4699      	mov	r9, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	eb18 0303 	adds.w	r3, r8, r3
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037c4:	462b      	mov	r3, r5
 80037c6:	eb49 0303 	adc.w	r3, r9, r3
 80037ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037e2:	460b      	mov	r3, r1
 80037e4:	18db      	adds	r3, r3, r3
 80037e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e8:	4613      	mov	r3, r2
 80037ea:	eb42 0303 	adc.w	r3, r2, r3
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80037f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037f8:	f7fc fcf8 	bl	80001ec <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4b61      	ldr	r3, [pc, #388]	@ (8003988 <UART_SetConfig+0x2d4>)
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	011c      	lsls	r4, r3, #4
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380e:	2200      	movs	r2, #0
 8003810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003814:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800381c:	4642      	mov	r2, r8
 800381e:	464b      	mov	r3, r9
 8003820:	1891      	adds	r1, r2, r2
 8003822:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003824:	415b      	adcs	r3, r3
 8003826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800382c:	4641      	mov	r1, r8
 800382e:	eb12 0a01 	adds.w	sl, r2, r1
 8003832:	4649      	mov	r1, r9
 8003834:	eb43 0b01 	adc.w	fp, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800384c:	4692      	mov	sl, r2
 800384e:	469b      	mov	fp, r3
 8003850:	4643      	mov	r3, r8
 8003852:	eb1a 0303 	adds.w	r3, sl, r3
 8003856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800385a:	464b      	mov	r3, r9
 800385c:	eb4b 0303 	adc.w	r3, fp, r3
 8003860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003870:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003878:	460b      	mov	r3, r1
 800387a:	18db      	adds	r3, r3, r3
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
 800387e:	4613      	mov	r3, r2
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	647b      	str	r3, [r7, #68]	@ 0x44
 8003886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800388a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800388e:	f7fc fcad 	bl	80001ec <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4611      	mov	r1, r2
 8003898:	4b3b      	ldr	r3, [pc, #236]	@ (8003988 <UART_SetConfig+0x2d4>)
 800389a:	fba3 2301 	umull	r2, r3, r3, r1
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2264      	movs	r2, #100	@ 0x64
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	1acb      	subs	r3, r1, r3
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038ae:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <UART_SetConfig+0x2d4>)
 80038b0:	fba3 2302 	umull	r2, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038bc:	441c      	add	r4, r3
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038d8:	415b      	adcs	r3, r3
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038e0:	4641      	mov	r1, r8
 80038e2:	1851      	adds	r1, r2, r1
 80038e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80038e6:	4649      	mov	r1, r9
 80038e8:	414b      	adcs	r3, r1
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038f8:	4659      	mov	r1, fp
 80038fa:	00cb      	lsls	r3, r1, #3
 80038fc:	4651      	mov	r1, sl
 80038fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003902:	4651      	mov	r1, sl
 8003904:	00ca      	lsls	r2, r1, #3
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	4603      	mov	r3, r0
 800390c:	4642      	mov	r2, r8
 800390e:	189b      	adds	r3, r3, r2
 8003910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003914:	464b      	mov	r3, r9
 8003916:	460a      	mov	r2, r1
 8003918:	eb42 0303 	adc.w	r3, r2, r3
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800392c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003934:	460b      	mov	r3, r1
 8003936:	18db      	adds	r3, r3, r3
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393a:	4613      	mov	r3, r2
 800393c:	eb42 0303 	adc.w	r3, r2, r3
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800394a:	f7fc fc4f 	bl	80001ec <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <UART_SetConfig+0x2d4>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	@ 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	3332      	adds	r3, #50	@ 0x32
 8003966:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <UART_SetConfig+0x2d4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 0207 	and.w	r2, r3, #7
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4422      	add	r2, r4
 800397a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800397c:	e106      	b.n	8003b8c <UART_SetConfig+0x4d8>
 800397e:	bf00      	nop
 8003980:	40011000 	.word	0x40011000
 8003984:	40011400 	.word	0x40011400
 8003988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800399a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800399e:	4642      	mov	r2, r8
 80039a0:	464b      	mov	r3, r9
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	6239      	str	r1, [r7, #32]
 80039a6:	415b      	adcs	r3, r3
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ae:	4641      	mov	r1, r8
 80039b0:	1854      	adds	r4, r2, r1
 80039b2:	4649      	mov	r1, r9
 80039b4:	eb43 0501 	adc.w	r5, r3, r1
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	00eb      	lsls	r3, r5, #3
 80039c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c6:	00e2      	lsls	r2, r4, #3
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4643      	mov	r3, r8
 80039ce:	18e3      	adds	r3, r4, r3
 80039d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039d4:	464b      	mov	r3, r9
 80039d6:	eb45 0303 	adc.w	r3, r5, r3
 80039da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039fa:	4629      	mov	r1, r5
 80039fc:	008b      	lsls	r3, r1, #2
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a04:	4621      	mov	r1, r4
 8003a06:	008a      	lsls	r2, r1, #2
 8003a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a0c:	f7fc fbee 	bl	80001ec <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4b60      	ldr	r3, [pc, #384]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003a16:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	011c      	lsls	r4, r3, #4
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	61b9      	str	r1, [r7, #24]
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6139      	str	r1, [r7, #16]
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a98:	4649      	mov	r1, r9
 8003a9a:	008b      	lsls	r3, r1, #2
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	008a      	lsls	r2, r1, #2
 8003aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003aaa:	f7fc fb9f 	bl	80001ec <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2264      	movs	r2, #100	@ 0x64
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	1acb      	subs	r3, r1, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	@ 0x32
 8003ac8:	4a33      	ldr	r2, [pc, #204]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b26:	464b      	mov	r3, r9
 8003b28:	460a      	mov	r2, r1
 8003b2a:	eb42 0303 	adc.w	r3, r2, r3
 8003b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b48:	4649      	mov	r1, r9
 8003b4a:	008b      	lsls	r3, r1, #2
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b52:	4641      	mov	r1, r8
 8003b54:	008a      	lsls	r2, r1, #2
 8003b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b5a:	f7fc fb47 	bl	80001ec <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	@ 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	3332      	adds	r3, #50	@ 0x32
 8003b76:	4a08      	ldr	r2, [pc, #32]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4422      	add	r2, r4
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b98:	51eb851f 	.word	0x51eb851f

08003b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	f107 001c 	add.w	r0, r7, #28
 8003baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d123      	bne.n	8003bfe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 faa0 	bl	8004138 <USB_CoreReset>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e01b      	b.n	8003c36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa94 	bl	8004138 <USB_CoreReset>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c28:	e005      	b.n	8003c36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c36:	7fbb      	ldrb	r3, [r7, #30]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10b      	bne.n	8003c54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f043 0206 	orr.w	r2, r3, #6
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c60:	b004      	add	sp, #16
 8003c62:	4770      	bx	lr

08003c64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 0201 	bic.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d115      	bne.n	8003cd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cb4:	200a      	movs	r0, #10
 8003cb6:	f7fd fa05 	bl	80010c4 <HAL_Delay>
      ms += 10U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	330a      	adds	r3, #10
 8003cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fa2b 	bl	800411c <USB_GetMode>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d01e      	beq.n	8003d0a <USB_SetCurrentMode+0x84>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cd0:	d9f0      	bls.n	8003cb4 <USB_SetCurrentMode+0x2e>
 8003cd2:	e01a      	b.n	8003d0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ce6:	200a      	movs	r0, #10
 8003ce8:	f7fd f9ec 	bl	80010c4 <HAL_Delay>
      ms += 10U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	330a      	adds	r3, #10
 8003cf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa12 	bl	800411c <USB_GetMode>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <USB_SetCurrentMode+0x84>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d02:	d9f0      	bls.n	8003ce6 <USB_SetCurrentMode+0x60>
 8003d04:	e001      	b.n	8003d0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e005      	b.n	8003d16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d0e:	d101      	bne.n	8003d14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d20:	b084      	sub	sp, #16
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e009      	b.n	8003d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3340      	adds	r3, #64	@ 0x40
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	3301      	adds	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0e      	cmp	r3, #14
 8003d58:	d9f2      	bls.n	8003d40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11c      	bne.n	8003d9c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d9a:	e00b      	b.n	8003db4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10d      	bne.n	8003de4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f968 	bl	80040a8 <USB_SetDevSpeed>
 8003dd8:	e008      	b.n	8003dec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dda:	2101      	movs	r1, #1
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f963 	bl	80040a8 <USB_SetDevSpeed>
 8003de2:	e003      	b.n	8003dec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003de4:	2103      	movs	r1, #3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f95e 	bl	80040a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dec:	2110      	movs	r1, #16
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8fa 	bl	8003fe8 <USB_FlushTxFifo>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f924 	bl	800404c <USB_FlushRxFifo>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	461a      	mov	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	e043      	b.n	8003ec0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e4e:	d118      	bne.n	8003e82 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e62:	461a      	mov	r2, r3
 8003e64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e013      	b.n	8003e94 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e008      	b.n	8003e94 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d3b5      	bcc.n	8003e38 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e043      	b.n	8003f5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee8:	d118      	bne.n	8003f1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e013      	b.n	8003f2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f12:	461a      	mov	r2, r3
 8003f14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e008      	b.n	8003f2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	3301      	adds	r3, #1
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f5e:	461a      	mov	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d3b5      	bcc.n	8003ed2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003f86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f043 0210 	orr.w	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <USB_DevInit+0x2c4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f043 0208 	orr.w	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe0:	b004      	add	sp, #16
 8003fe2:	4770      	bx	lr
 8003fe4:	803c3800 	.word	0x803c3800

08003fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004002:	d901      	bls.n	8004008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e01b      	b.n	8004040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	daf2      	bge.n	8003ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	019b      	lsls	r3, r3, #6
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800402c:	d901      	bls.n	8004032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e006      	b.n	8004040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d0f0      	beq.n	8004020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004064:	d901      	bls.n	800406a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e018      	b.n	800409c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	daf2      	bge.n	8004058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2210      	movs	r2, #16
 800407a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004088:	d901      	bls.n	800408e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e006      	b.n	800409c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d0f0      	beq.n	800407c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0301 	and.w	r3, r3, #1
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004150:	d901      	bls.n	8004156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e01b      	b.n	800418e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	daf2      	bge.n	8004144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800417a:	d901      	bls.n	8004180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d0f0      	beq.n	800416e <USB_CoreReset+0x36>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <memset>:
 800419a:	4402      	add	r2, r0
 800419c:	4603      	mov	r3, r0
 800419e:	4293      	cmp	r3, r2
 80041a0:	d100      	bne.n	80041a4 <memset+0xa>
 80041a2:	4770      	bx	lr
 80041a4:	f803 1b01 	strb.w	r1, [r3], #1
 80041a8:	e7f9      	b.n	800419e <memset+0x4>
	...

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4d0d      	ldr	r5, [pc, #52]	@ (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	@ (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2600      	movs	r6, #0
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4d0b      	ldr	r5, [pc, #44]	@ (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	@ (80041f0 <__libc_init_array+0x44>)
 80041c0:	f000 f818 	bl	80041f4 <_init>
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2600      	movs	r6, #0
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	08004260 	.word	0x08004260
 80041e8:	08004260 	.word	0x08004260
 80041ec:	08004260 	.word	0x08004260
 80041f0:	08004264 	.word	0x08004264

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
